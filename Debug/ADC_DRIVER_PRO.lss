
ADC_DRIVER_PRO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003afc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  00003afc  00003b90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800098  00800098  00003bc8  2**0
                  ALLOC
  3 .stab         000043c8  00000000  00000000  00003bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001cc7  00000000  00000000  00007f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009c57  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009d97  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009f07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000bb50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ca3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d7e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d948  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000dbd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e3a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 5f 0a 	jmp	0x14be	; 0x14be <__vector_1>
       8:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <__vector_2>
       c:	0c 94 b9 0a 	jmp	0x1572	; 0x1572 <__vector_3>
      10:	0c 94 14 06 	jmp	0xc28	; 0xc28 <__vector_4>
      14:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__vector_5>
      18:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__vector_6>
      1c:	0c 94 73 07 	jmp	0xee6	; 0xee6 <__vector_7>
      20:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <__vector_8>
      24:	0c 94 cd 07 	jmp	0xf9a	; 0xf9a <__vector_9>
      28:	0c 94 9b 08 	jmp	0x1136	; 0x1136 <__vector_10>
      2c:	0c 94 c8 08 	jmp	0x1190	; 0x1190 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 7a 0f 	jmp	0x1ef4	; 0x1ef4 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ef       	ldi	r30, 0xFC	; 252
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 39       	cpi	r26, 0x98	; 152
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e9       	ldi	r26, 0x98	; 152
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3a       	cpi	r26, 0xA3	; 163
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <main>
      8a:	0c 94 7c 1d 	jmp	0x3af8	; 0x3af8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 45 1d 	jmp	0x3a8a	; 0x3a8a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e7       	ldi	r26, 0x7F	; 127
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 61 1d 	jmp	0x3ac2	; 0x3ac2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 51 1d 	jmp	0x3aa2	; 0x3aa2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6d 1d 	jmp	0x3ada	; 0x3ada <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 51 1d 	jmp	0x3aa2	; 0x3aa2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6d 1d 	jmp	0x3ada	; 0x3ada <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 45 1d 	jmp	0x3a8a	; 0x3a8a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e7       	ldi	r24, 0x7F	; 127
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 61 1d 	jmp	0x3ac2	; 0x3ac2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 51 1d 	jmp	0x3aa2	; 0x3aa2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6d 1d 	jmp	0x3ada	; 0x3ada <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 51 1d 	jmp	0x3aa2	; 0x3aa2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6d 1d 	jmp	0x3ada	; 0x3ada <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 51 1d 	jmp	0x3aa2	; 0x3aa2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6d 1d 	jmp	0x3ada	; 0x3ada <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 55 1d 	jmp	0x3aaa	; 0x3aaa <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 71 1d 	jmp	0x3ae2	; 0x3ae2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MTIMER2_VidInit>:
#include"MTIMER2_Config.h"


void (*MTIMER2_CALLBACK)(void);
void MTIMER2_VidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR2,6);
	/*OverFlow Interrupt Enable */
	SET_BIT(TIMSK,6);

#elif TIMER2SETMODE == TIMER2_FASTPWMMODE
	SET_BIT(TCCR2,6);
     b4e:	a5 e4       	ldi	r26, 0x45	; 69
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e5 e4       	ldi	r30, 0x45	; 69
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
	SET_BIT(TCCR2,3);
     b5c:	a5 e4       	ldi	r26, 0x45	; 69
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e5 e4       	ldi	r30, 0x45	; 69
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	88 60       	ori	r24, 0x08	; 8
     b68:	8c 93       	st	X, r24
  #if TIMER2_PWMMODE_OC2PINMODE==TIMER2_PWMMODE_NON_INVERTING
	CLR_BIT(TCCR2,4);
     b6a:	a5 e4       	ldi	r26, 0x45	; 69
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e5 e4       	ldi	r30, 0x45	; 69
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 7e       	andi	r24, 0xEF	; 239
     b76:	8c 93       	st	X, r24
	SET_BIT(TCCR2,5);
     b78:	a5 e4       	ldi	r26, 0x45	; 69
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e5 e4       	ldi	r30, 0x45	; 69
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	80 62       	ori	r24, 0x20	; 32
     b84:	8c 93       	st	X, r24
#else
	#error"Timer2 Mode Options Is Not Valid.."
#endif

	              /*SET PRESCALER*/
	TCCR2&=0xF8;
     b86:	a5 e4       	ldi	r26, 0x45	; 69
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e5 e4       	ldi	r30, 0x45	; 69
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	88 7f       	andi	r24, 0xF8	; 248
     b92:	8c 93       	st	X, r24
	TCCR2|=MTIMER2_SET_PRESCALER;
     b94:	a5 e4       	ldi	r26, 0x45	; 69
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e5 e4       	ldi	r30, 0x45	; 69
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	85 60       	ori	r24, 0x05	; 5
     ba0:	8c 93       	st	X, r24
}
     ba2:	cf 91       	pop	r28
     ba4:	df 91       	pop	r29
     ba6:	08 95       	ret

00000ba8 <MTIMER2_VidSetPreLoad>:
void MTIMER2_VidSetPreLoad(uint8 copy_uint8PreLoadValue)
{
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	0f 92       	push	r0
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	89 83       	std	Y+1, r24	; 0x01
	TCNT2=copy_uint8PreLoadValue;
     bb4:	e4 e4       	ldi	r30, 0x44	; 68
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	80 83       	st	Z, r24
}
     bbc:	0f 90       	pop	r0
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <MTIMER2_VidSetCTCRegister>:
void MTIMER2_VidSetCTCRegister(uint8 copy_uint8CTCRegisteValue)
{
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	0f 92       	push	r0
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	89 83       	std	Y+1, r24	; 0x01
	OCR2=copy_uint8CTCRegisteValue;
     bd0:	e3 e4       	ldi	r30, 0x43	; 67
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	80 83       	st	Z, r24
}
     bd8:	0f 90       	pop	r0
     bda:	cf 91       	pop	r28
     bdc:	df 91       	pop	r29
     bde:	08 95       	ret

00000be0 <MTIMER2_VidTIMER2_OVERFLOW_SetCallBack>:
void MTIMER2_VidTIMER2_OVERFLOW_SetCallBack(void (*PtrToFun)(void))
{
     be0:	df 93       	push	r29
     be2:	cf 93       	push	r28
     be4:	00 d0       	rcall	.+0      	; 0xbe6 <MTIMER2_VidTIMER2_OVERFLOW_SetCallBack+0x6>
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
     bea:	9a 83       	std	Y+2, r25	; 0x02
     bec:	89 83       	std	Y+1, r24	; 0x01
	MTIMER2_CALLBACK=PtrToFun;
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	9a 81       	ldd	r25, Y+2	; 0x02
     bf2:	90 93 9a 00 	sts	0x009A, r25
     bf6:	80 93 99 00 	sts	0x0099, r24
}
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	cf 91       	pop	r28
     c00:	df 91       	pop	r29
     c02:	08 95       	ret

00000c04 <MTIMER2_VidTIMER2_CTC_SetCallBack>:
void MTIMER2_VidTIMER2_CTC_SetCallBack(void (*PtrToFun)(void))
{
     c04:	df 93       	push	r29
     c06:	cf 93       	push	r28
     c08:	00 d0       	rcall	.+0      	; 0xc0a <MTIMER2_VidTIMER2_CTC_SetCallBack+0x6>
     c0a:	cd b7       	in	r28, 0x3d	; 61
     c0c:	de b7       	in	r29, 0x3e	; 62
     c0e:	9a 83       	std	Y+2, r25	; 0x02
     c10:	89 83       	std	Y+1, r24	; 0x01
	MTIMER2_CALLBACK=PtrToFun;
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	9a 81       	ldd	r25, Y+2	; 0x02
     c16:	90 93 9a 00 	sts	0x009A, r25
     c1a:	80 93 99 00 	sts	0x0099, r24
}
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	cf 91       	pop	r28
     c24:	df 91       	pop	r29
     c26:	08 95       	ret

00000c28 <__vector_4>:
           /*CTC*/
void __vector_4(void)   __attribute__((signal));
void __vector_4(void)
{
     c28:	1f 92       	push	r1
     c2a:	0f 92       	push	r0
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	0f 92       	push	r0
     c30:	11 24       	eor	r1, r1
     c32:	2f 93       	push	r18
     c34:	3f 93       	push	r19
     c36:	4f 93       	push	r20
     c38:	5f 93       	push	r21
     c3a:	6f 93       	push	r22
     c3c:	7f 93       	push	r23
     c3e:	8f 93       	push	r24
     c40:	9f 93       	push	r25
     c42:	af 93       	push	r26
     c44:	bf 93       	push	r27
     c46:	ef 93       	push	r30
     c48:	ff 93       	push	r31
     c4a:	df 93       	push	r29
     c4c:	cf 93       	push	r28
     c4e:	cd b7       	in	r28, 0x3d	; 61
     c50:	de b7       	in	r29, 0x3e	; 62
	MTIMER2_CALLBACK();
     c52:	e0 91 99 00 	lds	r30, 0x0099
     c56:	f0 91 9a 00 	lds	r31, 0x009A
     c5a:	09 95       	icall
}
     c5c:	cf 91       	pop	r28
     c5e:	df 91       	pop	r29
     c60:	ff 91       	pop	r31
     c62:	ef 91       	pop	r30
     c64:	bf 91       	pop	r27
     c66:	af 91       	pop	r26
     c68:	9f 91       	pop	r25
     c6a:	8f 91       	pop	r24
     c6c:	7f 91       	pop	r23
     c6e:	6f 91       	pop	r22
     c70:	5f 91       	pop	r21
     c72:	4f 91       	pop	r20
     c74:	3f 91       	pop	r19
     c76:	2f 91       	pop	r18
     c78:	0f 90       	pop	r0
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	0f 90       	pop	r0
     c7e:	1f 90       	pop	r1
     c80:	18 95       	reti

00000c82 <__vector_5>:
         /*overflow */
void __vector_5(void)   __attribute__((signal));
void __vector_5(void)
{
     c82:	1f 92       	push	r1
     c84:	0f 92       	push	r0
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	0f 92       	push	r0
     c8a:	11 24       	eor	r1, r1
     c8c:	2f 93       	push	r18
     c8e:	3f 93       	push	r19
     c90:	4f 93       	push	r20
     c92:	5f 93       	push	r21
     c94:	6f 93       	push	r22
     c96:	7f 93       	push	r23
     c98:	8f 93       	push	r24
     c9a:	9f 93       	push	r25
     c9c:	af 93       	push	r26
     c9e:	bf 93       	push	r27
     ca0:	ef 93       	push	r30
     ca2:	ff 93       	push	r31
     ca4:	df 93       	push	r29
     ca6:	cf 93       	push	r28
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
	MTIMER2_CALLBACK();
     cac:	e0 91 99 00 	lds	r30, 0x0099
     cb0:	f0 91 9a 00 	lds	r31, 0x009A
     cb4:	09 95       	icall
}
     cb6:	cf 91       	pop	r28
     cb8:	df 91       	pop	r29
     cba:	ff 91       	pop	r31
     cbc:	ef 91       	pop	r30
     cbe:	bf 91       	pop	r27
     cc0:	af 91       	pop	r26
     cc2:	9f 91       	pop	r25
     cc4:	8f 91       	pop	r24
     cc6:	7f 91       	pop	r23
     cc8:	6f 91       	pop	r22
     cca:	5f 91       	pop	r21
     ccc:	4f 91       	pop	r20
     cce:	3f 91       	pop	r19
     cd0:	2f 91       	pop	r18
     cd2:	0f 90       	pop	r0
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	0f 90       	pop	r0
     cd8:	1f 90       	pop	r1
     cda:	18 95       	reti

00000cdc <MTIMER1_VidInit>:


void (*MTIMER1_CALLBACK)(void);

void MTIMER1_VidInit(void)
{
     cdc:	df 93       	push	r29
     cde:	cf 93       	push	r28
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
	/*Compare Match Enable Interrupt*/
	SET_BIT(TIMSK,4);
	SET_BIT(TIMSK,3);

#elif TIMER1SETMODE == TIMER1_NORMALMODE
	CLR_BIT(TCCR1A,0);
     ce4:	af e4       	ldi	r26, 0x4F	; 79
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	ef e4       	ldi	r30, 0x4F	; 79
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	8e 7f       	andi	r24, 0xFE	; 254
     cf0:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,1);
     cf2:	af e4       	ldi	r26, 0x4F	; 79
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	ef e4       	ldi	r30, 0x4F	; 79
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	8d 7f       	andi	r24, 0xFD	; 253
     cfe:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,3);
     d00:	ae e4       	ldi	r26, 0x4E	; 78
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	ee e4       	ldi	r30, 0x4E	; 78
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	87 7f       	andi	r24, 0xF7	; 247
     d0c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,4);
     d0e:	ae e4       	ldi	r26, 0x4E	; 78
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	ee e4       	ldi	r30, 0x4E	; 78
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	8f 7e       	andi	r24, 0xEF	; 239
     d1a:	8c 93       	st	X, r24
	/*OVERFLOW  Enable Interrupt */
	SET_BIT(TIMSK,2);
     d1c:	a9 e5       	ldi	r26, 0x59	; 89
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e9 e5       	ldi	r30, 0x59	; 89
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	84 60       	ori	r24, 0x04	; 4
     d28:	8c 93       	st	X, r24
#else
#error "Timer 1 Options Is Not Valid."
#endif

/*********SET PRESCALER *********/
	TCCR1B&=0xF8;
     d2a:	ae e4       	ldi	r26, 0x4E	; 78
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	ee e4       	ldi	r30, 0x4E	; 78
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	88 7f       	andi	r24, 0xF8	; 248
     d36:	8c 93       	st	X, r24
	TCCR1B|=TIMER1_SETPRESCALER;
     d38:	ae e4       	ldi	r26, 0x4E	; 78
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	ee e4       	ldi	r30, 0x4E	; 78
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	83 60       	ori	r24, 0x03	; 3
     d44:	8c 93       	st	X, r24
}
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	08 95       	ret

00000d4c <MTIMER1_VidInit_ICU>:
void MTIMER1_VidInit_ICU(void)
{
     d4c:	df 93       	push	r29
     d4e:	cf 93       	push	r28
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,5);
     d54:	a9 e5       	ldi	r26, 0x59	; 89
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e9 e5       	ldi	r30, 0x59	; 89
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	80 62       	ori	r24, 0x20	; 32
     d60:	8c 93       	st	X, r24
	    /*Enable ICU Noise Canceler */
	SET_BIT(TCCR1B,7);
     d62:	ae e4       	ldi	r26, 0x4E	; 78
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	ee e4       	ldi	r30, 0x4E	; 78
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	80 68       	ori	r24, 0x80	; 128
     d6e:	8c 93       	st	X, r24
}
     d70:	cf 91       	pop	r28
     d72:	df 91       	pop	r29
     d74:	08 95       	ret

00000d76 <MTIMER1_VidICU_SelectEdge>:
void MTIMER1_VidICU_SelectEdge(uint8 copy_uint8SelectEgde)
{
     d76:	df 93       	push	r29
     d78:	cf 93       	push	r28
     d7a:	00 d0       	rcall	.+0      	; 0xd7c <MTIMER1_VidICU_SelectEdge+0x6>
     d7c:	0f 92       	push	r0
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
     d82:	89 83       	std	Y+1, r24	; 0x01
	switch (copy_uint8SelectEgde)
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	28 2f       	mov	r18, r24
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	3b 83       	std	Y+3, r19	; 0x03
     d8c:	2a 83       	std	Y+2, r18	; 0x02
     d8e:	8a 81       	ldd	r24, Y+2	; 0x02
     d90:	9b 81       	ldd	r25, Y+3	; 0x03
     d92:	00 97       	sbiw	r24, 0x00	; 0
     d94:	69 f0       	breq	.+26     	; 0xdb0 <MTIMER1_VidICU_SelectEdge+0x3a>
     d96:	2a 81       	ldd	r18, Y+2	; 0x02
     d98:	3b 81       	ldd	r19, Y+3	; 0x03
     d9a:	21 30       	cpi	r18, 0x01	; 1
     d9c:	31 05       	cpc	r19, r1
     d9e:	79 f4       	brne	.+30     	; 0xdbe <MTIMER1_VidICU_SelectEdge+0x48>
	{
	case ICU_RISING_EDGE:
	{
	     SET_BIT(TCCR1B,6);
     da0:	ae e4       	ldi	r26, 0x4E	; 78
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	ee e4       	ldi	r30, 0x4E	; 78
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	80 64       	ori	r24, 0x40	; 64
     dac:	8c 93       	st	X, r24
     dae:	07 c0       	rjmp	.+14     	; 0xdbe <MTIMER1_VidICU_SelectEdge+0x48>
	     break;
	}
	case ICU_FALLING_EDGE:
	{
		CLR_BIT(TCCR1B,6);
     db0:	ae e4       	ldi	r26, 0x4E	; 78
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	ee e4       	ldi	r30, 0x4E	; 78
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	8f 7b       	andi	r24, 0xBF	; 191
     dbc:	8c 93       	st	X, r24
		break;
	}

	}
}
     dbe:	0f 90       	pop	r0
     dc0:	0f 90       	pop	r0
     dc2:	0f 90       	pop	r0
     dc4:	cf 91       	pop	r28
     dc6:	df 91       	pop	r29
     dc8:	08 95       	ret

00000dca <MTIMER1_VidSetPreLoad>:
void MTIMER1_VidSetPreLoad(uint16 copy_uint16PreLoadvalue)
{
     dca:	df 93       	push	r29
     dcc:	cf 93       	push	r28
     dce:	00 d0       	rcall	.+0      	; 0xdd0 <MTIMER1_VidSetPreLoad+0x6>
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62
     dd4:	9a 83       	std	Y+2, r25	; 0x02
     dd6:	89 83       	std	Y+1, r24	; 0x01
	/*Normal mode data Register*/
	//uint16 TCNT1;
	TCNT1=copy_uint16PreLoadvalue;
     dd8:	ec e4       	ldi	r30, 0x4C	; 76
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
     dde:	9a 81       	ldd	r25, Y+2	; 0x02
     de0:	91 83       	std	Z+1, r25	; 0x01
     de2:	80 83       	st	Z, r24
	/*TCNT1=TCNT1H;
	TCNT1|=TCNT1L<<8;
	TCNT1=copy_uint8PreLoadvalue;*/
}
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	cf 91       	pop	r28
     dea:	df 91       	pop	r29
     dec:	08 95       	ret

00000dee <MTIMER1_VidSetCTCRegister_CHB>:
void MTIMER1_VidSetCTCRegister_CHB(uint16 copy_uint16CTCValue)
{
     dee:	df 93       	push	r29
     df0:	cf 93       	push	r28
     df2:	00 d0       	rcall	.+0      	; 0xdf4 <MTIMER1_VidSetCTCRegister_CHB+0x6>
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
     df8:	9a 83       	std	Y+2, r25	; 0x02
     dfa:	89 83       	std	Y+1, r24	; 0x01
	OCR1B=copy_uint16CTCValue;
     dfc:	e8 e4       	ldi	r30, 0x48	; 72
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	89 81       	ldd	r24, Y+1	; 0x01
     e02:	9a 81       	ldd	r25, Y+2	; 0x02
     e04:	91 83       	std	Z+1, r25	; 0x01
     e06:	80 83       	st	Z, r24
	/*OutPut Compare match B option*/
	/*OCR1B=OCR1BH;
	OCR1B|=OCR1BL<<8;
	OCR1B=copy_uint16CTCValue;*/
}
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	cf 91       	pop	r28
     e0e:	df 91       	pop	r29
     e10:	08 95       	ret

00000e12 <MTIMER1_VidSetCTCRegister_CHA>:
void MTIMER1_VidSetCTCRegister_CHA(uint16 copy_uint16CTCValue)
{
     e12:	df 93       	push	r29
     e14:	cf 93       	push	r28
     e16:	00 d0       	rcall	.+0      	; 0xe18 <MTIMER1_VidSetCTCRegister_CHA+0x6>
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	9a 83       	std	Y+2, r25	; 0x02
     e1e:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=copy_uint16CTCValue;
     e20:	ea e4       	ldi	r30, 0x4A	; 74
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	89 81       	ldd	r24, Y+1	; 0x01
     e26:	9a 81       	ldd	r25, Y+2	; 0x02
     e28:	91 83       	std	Z+1, r25	; 0x01
     e2a:	80 83       	st	Z, r24
	/*OutPut Compare match A option*/
	//OCR1A=copy_uint16CTCValue;
	/*OCR1A=OCR1AH;
		OCR1A|=OCR1AL<<8;
		OCR1A=copy_uint16CTCValue;*/
}
     e2c:	0f 90       	pop	r0
     e2e:	0f 90       	pop	r0
     e30:	cf 91       	pop	r28
     e32:	df 91       	pop	r29
     e34:	08 95       	ret

00000e36 <MTIMER1_VidSetCTCRegister_ICR1>:
void MTIMER1_VidSetCTCRegister_ICR1(uint16 copy_uint16CTCValue)
{
     e36:	df 93       	push	r29
     e38:	cf 93       	push	r28
     e3a:	00 d0       	rcall	.+0      	; 0xe3c <MTIMER1_VidSetCTCRegister_ICR1+0x6>
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
     e40:	9a 83       	std	Y+2, r25	; 0x02
     e42:	89 83       	std	Y+1, r24	; 0x01
	ICR1=copy_uint16CTCValue;
     e44:	e6 e4       	ldi	r30, 0x46	; 70
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	9a 81       	ldd	r25, Y+2	; 0x02
     e4c:	91 83       	std	Z+1, r25	; 0x01
     e4e:	80 83       	st	Z, r24
}
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	cf 91       	pop	r28
     e56:	df 91       	pop	r29
     e58:	08 95       	ret

00000e5a <MTIMER1_VidTimer1_OverFlow_SetCallBack>:
void MTIMER1_VidTimer1_OverFlow_SetCallBack(void (*PtrToFun)(void))
{
     e5a:	df 93       	push	r29
     e5c:	cf 93       	push	r28
     e5e:	00 d0       	rcall	.+0      	; 0xe60 <MTIMER1_VidTimer1_OverFlow_SetCallBack+0x6>
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
     e64:	9a 83       	std	Y+2, r25	; 0x02
     e66:	89 83       	std	Y+1, r24	; 0x01
	MTIMER1_CALLBACK=PtrToFun;
     e68:	89 81       	ldd	r24, Y+1	; 0x01
     e6a:	9a 81       	ldd	r25, Y+2	; 0x02
     e6c:	90 93 9c 00 	sts	0x009C, r25
     e70:	80 93 9b 00 	sts	0x009B, r24
}
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	cf 91       	pop	r28
     e7a:	df 91       	pop	r29
     e7c:	08 95       	ret

00000e7e <MTIMER1_VidTimer1_CTC_SetCallBack>:
void MTIMER1_VidTimer1_CTC_SetCallBack(void (*PtrToFun)(void))
{
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	00 d0       	rcall	.+0      	; 0xe84 <MTIMER1_VidTimer1_CTC_SetCallBack+0x6>
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
     e88:	9a 83       	std	Y+2, r25	; 0x02
     e8a:	89 83       	std	Y+1, r24	; 0x01
	MTIMER1_CALLBACK=PtrToFun;
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	9a 81       	ldd	r25, Y+2	; 0x02
     e90:	90 93 9c 00 	sts	0x009C, r25
     e94:	80 93 9b 00 	sts	0x009B, r24
}
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	cf 91       	pop	r28
     e9e:	df 91       	pop	r29
     ea0:	08 95       	ret

00000ea2 <MTIMER1_uint32Read_ICR1>:

uint32 MTIMER1_uint32Read_ICR1(void)
{
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
     eaa:	e6 e4       	ldi	r30, 0x46	; 70
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	91 81       	ldd	r25, Z+1	; 0x01
     eb2:	cc 01       	movw	r24, r24
     eb4:	a0 e0       	ldi	r26, 0x00	; 0
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
}
     eb8:	bc 01       	movw	r22, r24
     eba:	cd 01       	movw	r24, r26
     ebc:	cf 91       	pop	r28
     ebe:	df 91       	pop	r29
     ec0:	08 95       	ret

00000ec2 <MTIMER1_VidTimer1_ICU_SetCallBack>:
void MTIMER1_VidTimer1_ICU_SetCallBack(void(*PtrToFun)(void))
{
     ec2:	df 93       	push	r29
     ec4:	cf 93       	push	r28
     ec6:	00 d0       	rcall	.+0      	; 0xec8 <MTIMER1_VidTimer1_ICU_SetCallBack+0x6>
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
     ecc:	9a 83       	std	Y+2, r25	; 0x02
     ece:	89 83       	std	Y+1, r24	; 0x01
	MTIMER1_CALLBACK=PtrToFun;
     ed0:	89 81       	ldd	r24, Y+1	; 0x01
     ed2:	9a 81       	ldd	r25, Y+2	; 0x02
     ed4:	90 93 9c 00 	sts	0x009C, r25
     ed8:	80 93 9b 00 	sts	0x009B, r24
}
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	08 95       	ret

00000ee6 <__vector_7>:
     /*Compare A*/
void __vector_7(void)  __attribute__((signal));
void __vector_7(void)
{
     ee6:	1f 92       	push	r1
     ee8:	0f 92       	push	r0
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	0f 92       	push	r0
     eee:	11 24       	eor	r1, r1
     ef0:	2f 93       	push	r18
     ef2:	3f 93       	push	r19
     ef4:	4f 93       	push	r20
     ef6:	5f 93       	push	r21
     ef8:	6f 93       	push	r22
     efa:	7f 93       	push	r23
     efc:	8f 93       	push	r24
     efe:	9f 93       	push	r25
     f00:	af 93       	push	r26
     f02:	bf 93       	push	r27
     f04:	ef 93       	push	r30
     f06:	ff 93       	push	r31
     f08:	df 93       	push	r29
     f0a:	cf 93       	push	r28
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
	MTIMER1_CALLBACK();
     f10:	e0 91 9b 00 	lds	r30, 0x009B
     f14:	f0 91 9c 00 	lds	r31, 0x009C
     f18:	09 95       	icall
}
     f1a:	cf 91       	pop	r28
     f1c:	df 91       	pop	r29
     f1e:	ff 91       	pop	r31
     f20:	ef 91       	pop	r30
     f22:	bf 91       	pop	r27
     f24:	af 91       	pop	r26
     f26:	9f 91       	pop	r25
     f28:	8f 91       	pop	r24
     f2a:	7f 91       	pop	r23
     f2c:	6f 91       	pop	r22
     f2e:	5f 91       	pop	r21
     f30:	4f 91       	pop	r20
     f32:	3f 91       	pop	r19
     f34:	2f 91       	pop	r18
     f36:	0f 90       	pop	r0
     f38:	0f be       	out	0x3f, r0	; 63
     f3a:	0f 90       	pop	r0
     f3c:	1f 90       	pop	r1
     f3e:	18 95       	reti

00000f40 <__vector_8>:
   /*Compare B*/
void __vector_8(void)  __attribute__((signal));
void __vector_8(void)
{
     f40:	1f 92       	push	r1
     f42:	0f 92       	push	r0
     f44:	0f b6       	in	r0, 0x3f	; 63
     f46:	0f 92       	push	r0
     f48:	11 24       	eor	r1, r1
     f4a:	2f 93       	push	r18
     f4c:	3f 93       	push	r19
     f4e:	4f 93       	push	r20
     f50:	5f 93       	push	r21
     f52:	6f 93       	push	r22
     f54:	7f 93       	push	r23
     f56:	8f 93       	push	r24
     f58:	9f 93       	push	r25
     f5a:	af 93       	push	r26
     f5c:	bf 93       	push	r27
     f5e:	ef 93       	push	r30
     f60:	ff 93       	push	r31
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
	MTIMER1_CALLBACK();
     f6a:	e0 91 9b 00 	lds	r30, 0x009B
     f6e:	f0 91 9c 00 	lds	r31, 0x009C
     f72:	09 95       	icall
}
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	ff 91       	pop	r31
     f7a:	ef 91       	pop	r30
     f7c:	bf 91       	pop	r27
     f7e:	af 91       	pop	r26
     f80:	9f 91       	pop	r25
     f82:	8f 91       	pop	r24
     f84:	7f 91       	pop	r23
     f86:	6f 91       	pop	r22
     f88:	5f 91       	pop	r21
     f8a:	4f 91       	pop	r20
     f8c:	3f 91       	pop	r19
     f8e:	2f 91       	pop	r18
     f90:	0f 90       	pop	r0
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	0f 90       	pop	r0
     f96:	1f 90       	pop	r1
     f98:	18 95       	reti

00000f9a <__vector_9>:
   /*OverFlow */
void __vector_9(void)  __attribute__((signal));
void __vector_9(void)
{
     f9a:	1f 92       	push	r1
     f9c:	0f 92       	push	r0
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	0f 92       	push	r0
     fa2:	11 24       	eor	r1, r1
     fa4:	2f 93       	push	r18
     fa6:	3f 93       	push	r19
     fa8:	4f 93       	push	r20
     faa:	5f 93       	push	r21
     fac:	6f 93       	push	r22
     fae:	7f 93       	push	r23
     fb0:	8f 93       	push	r24
     fb2:	9f 93       	push	r25
     fb4:	af 93       	push	r26
     fb6:	bf 93       	push	r27
     fb8:	ef 93       	push	r30
     fba:	ff 93       	push	r31
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
	MTIMER1_CALLBACK();
     fc4:	e0 91 9b 00 	lds	r30, 0x009B
     fc8:	f0 91 9c 00 	lds	r31, 0x009C
     fcc:	09 95       	icall
}
     fce:	cf 91       	pop	r28
     fd0:	df 91       	pop	r29
     fd2:	ff 91       	pop	r31
     fd4:	ef 91       	pop	r30
     fd6:	bf 91       	pop	r27
     fd8:	af 91       	pop	r26
     fda:	9f 91       	pop	r25
     fdc:	8f 91       	pop	r24
     fde:	7f 91       	pop	r23
     fe0:	6f 91       	pop	r22
     fe2:	5f 91       	pop	r21
     fe4:	4f 91       	pop	r20
     fe6:	3f 91       	pop	r19
     fe8:	2f 91       	pop	r18
     fea:	0f 90       	pop	r0
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	0f 90       	pop	r0
     ff0:	1f 90       	pop	r1
     ff2:	18 95       	reti

00000ff4 <__vector_6>:
  /*ICU*/
void __vector_6(void)   __attribute__((signal));
void __vector_6(void)
{
     ff4:	1f 92       	push	r1
     ff6:	0f 92       	push	r0
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	0f 92       	push	r0
     ffc:	11 24       	eor	r1, r1
     ffe:	2f 93       	push	r18
    1000:	3f 93       	push	r19
    1002:	4f 93       	push	r20
    1004:	5f 93       	push	r21
    1006:	6f 93       	push	r22
    1008:	7f 93       	push	r23
    100a:	8f 93       	push	r24
    100c:	9f 93       	push	r25
    100e:	af 93       	push	r26
    1010:	bf 93       	push	r27
    1012:	ef 93       	push	r30
    1014:	ff 93       	push	r31
    1016:	df 93       	push	r29
    1018:	cf 93       	push	r28
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
	MTIMER1_CALLBACK();
    101e:	e0 91 9b 00 	lds	r30, 0x009B
    1022:	f0 91 9c 00 	lds	r31, 0x009C
    1026:	09 95       	icall
}
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	ff 91       	pop	r31
    102e:	ef 91       	pop	r30
    1030:	bf 91       	pop	r27
    1032:	af 91       	pop	r26
    1034:	9f 91       	pop	r25
    1036:	8f 91       	pop	r24
    1038:	7f 91       	pop	r23
    103a:	6f 91       	pop	r22
    103c:	5f 91       	pop	r21
    103e:	4f 91       	pop	r20
    1040:	3f 91       	pop	r19
    1042:	2f 91       	pop	r18
    1044:	0f 90       	pop	r0
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	0f 90       	pop	r0
    104a:	1f 90       	pop	r1
    104c:	18 95       	reti

0000104e <MTIMER0_VidInit>:
#include"MTIMER0_Private.h"
#include"MTIMER0_Config.h"

void (*MTIMER0_CALLBACK)(void);
void MTIMER0_VidInit(void)
{
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
	#else #error "OC0 PIN Is Not Valid.."
	#endif
	/*CTC Enable interrupt */
	SET_BIT(TIMSK,1);
#elif TIMER0_SETMODE == TIMER0_NORMALMODE
	CLR_BIT(TCCR0,3);
    1056:	a3 e5       	ldi	r26, 0x53	; 83
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e3 e5       	ldi	r30, 0x53	; 83
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	87 7f       	andi	r24, 0xF7	; 247
    1062:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,6);
    1064:	a3 e5       	ldi	r26, 0x53	; 83
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e3 e5       	ldi	r30, 0x53	; 83
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	8f 7b       	andi	r24, 0xBF	; 191
    1070:	8c 93       	st	X, r24
	/*OVERFLOW  Enable interrupt */
	SET_BIT(TIMSK,0);
    1072:	a9 e5       	ldi	r26, 0x59	; 89
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e9 e5       	ldi	r30, 0x59	; 89
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	81 60       	ori	r24, 0x01	; 1
    107e:	8c 93       	st	X, r24

#else
	#error"TIMER0 MODE Is Not Valid.."
#endif
	/*Set PreScaler*/
	TCCR0&=0xF8;
    1080:	a3 e5       	ldi	r26, 0x53	; 83
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e3 e5       	ldi	r30, 0x53	; 83
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	88 7f       	andi	r24, 0xF8	; 248
    108c:	8c 93       	st	X, r24
	TCCR0|=TIMER0_SETPRESCALER;
    108e:	a3 e5       	ldi	r26, 0x53	; 83
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e3 e5       	ldi	r30, 0x53	; 83
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	84 60       	ori	r24, 0x04	; 4
    109a:	8c 93       	st	X, r24
}
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	08 95       	ret

000010a2 <MTIMER0_uint32Read>:
uint8 MTIMER0_uint32Read(void)
{
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    10aa:	e2 e5       	ldi	r30, 0x52	; 82
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
}
    10b0:	cf 91       	pop	r28
    10b2:	df 91       	pop	r29
    10b4:	08 95       	ret

000010b6 <MTIMER0_VidSetPreLoad>:
void MTIMER0_VidSetPreLoad(uint8 copy_uint8PreLoad)
{
    10b6:	df 93       	push	r29
    10b8:	cf 93       	push	r28
    10ba:	0f 92       	push	r0
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
    10c0:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=copy_uint8PreLoad;
    10c2:	e2 e5       	ldi	r30, 0x52	; 82
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	80 83       	st	Z, r24
}
    10ca:	0f 90       	pop	r0
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	08 95       	ret

000010d2 <MTIMER0_VidSetCTCRegister>:
void MTIMER0_VidSetCTCRegister(uint8 copy_uint8CTCValue)
{
    10d2:	df 93       	push	r29
    10d4:	cf 93       	push	r28
    10d6:	0f 92       	push	r0
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	89 83       	std	Y+1, r24	; 0x01
	OCR0=copy_uint8CTCValue;
    10de:	ec e5       	ldi	r30, 0x5C	; 92
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	80 83       	st	Z, r24
}
    10e6:	0f 90       	pop	r0
    10e8:	cf 91       	pop	r28
    10ea:	df 91       	pop	r29
    10ec:	08 95       	ret

000010ee <MTIMER0_VidTimerOverFlow_SetCallBack>:
void MTIMER0_VidTimerOverFlow_SetCallBack(void (*PtrToFun)(void))
{
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	00 d0       	rcall	.+0      	; 0x10f4 <MTIMER0_VidTimerOverFlow_SetCallBack+0x6>
    10f4:	cd b7       	in	r28, 0x3d	; 61
    10f6:	de b7       	in	r29, 0x3e	; 62
    10f8:	9a 83       	std	Y+2, r25	; 0x02
    10fa:	89 83       	std	Y+1, r24	; 0x01
	MTIMER0_CALLBACK=PtrToFun;
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1100:	90 93 9e 00 	sts	0x009E, r25
    1104:	80 93 9d 00 	sts	0x009D, r24
}
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	08 95       	ret

00001112 <MTIMER0_VidTimerCTC_SetCallBack>:
void MTIMER0_VidTimerCTC_SetCallBack(void (*PtrToFun)(void))
{
    1112:	df 93       	push	r29
    1114:	cf 93       	push	r28
    1116:	00 d0       	rcall	.+0      	; 0x1118 <MTIMER0_VidTimerCTC_SetCallBack+0x6>
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	9a 83       	std	Y+2, r25	; 0x02
    111e:	89 83       	std	Y+1, r24	; 0x01
	MTIMER0_CALLBACK=PtrToFun;
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	9a 81       	ldd	r25, Y+2	; 0x02
    1124:	90 93 9e 00 	sts	0x009E, r25
    1128:	80 93 9d 00 	sts	0x009D, r24
}
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	cf 91       	pop	r28
    1132:	df 91       	pop	r29
    1134:	08 95       	ret

00001136 <__vector_10>:

/*CTC*/
void __vector_10(void)  __attribute__((signal));
void __vector_10(void)
{
    1136:	1f 92       	push	r1
    1138:	0f 92       	push	r0
    113a:	0f b6       	in	r0, 0x3f	; 63
    113c:	0f 92       	push	r0
    113e:	11 24       	eor	r1, r1
    1140:	2f 93       	push	r18
    1142:	3f 93       	push	r19
    1144:	4f 93       	push	r20
    1146:	5f 93       	push	r21
    1148:	6f 93       	push	r22
    114a:	7f 93       	push	r23
    114c:	8f 93       	push	r24
    114e:	9f 93       	push	r25
    1150:	af 93       	push	r26
    1152:	bf 93       	push	r27
    1154:	ef 93       	push	r30
    1156:	ff 93       	push	r31
    1158:	df 93       	push	r29
    115a:	cf 93       	push	r28
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62
	MTIMER0_CALLBACK();
    1160:	e0 91 9d 00 	lds	r30, 0x009D
    1164:	f0 91 9e 00 	lds	r31, 0x009E
    1168:	09 95       	icall
}
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	ff 91       	pop	r31
    1170:	ef 91       	pop	r30
    1172:	bf 91       	pop	r27
    1174:	af 91       	pop	r26
    1176:	9f 91       	pop	r25
    1178:	8f 91       	pop	r24
    117a:	7f 91       	pop	r23
    117c:	6f 91       	pop	r22
    117e:	5f 91       	pop	r21
    1180:	4f 91       	pop	r20
    1182:	3f 91       	pop	r19
    1184:	2f 91       	pop	r18
    1186:	0f 90       	pop	r0
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	0f 90       	pop	r0
    118c:	1f 90       	pop	r1
    118e:	18 95       	reti

00001190 <__vector_11>:
/*OVERFLOW*/
void __vector_11(void)  __attribute__((signal));
void __vector_11(void)
{
    1190:	1f 92       	push	r1
    1192:	0f 92       	push	r0
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	0f 92       	push	r0
    1198:	11 24       	eor	r1, r1
    119a:	2f 93       	push	r18
    119c:	3f 93       	push	r19
    119e:	4f 93       	push	r20
    11a0:	5f 93       	push	r21
    11a2:	6f 93       	push	r22
    11a4:	7f 93       	push	r23
    11a6:	8f 93       	push	r24
    11a8:	9f 93       	push	r25
    11aa:	af 93       	push	r26
    11ac:	bf 93       	push	r27
    11ae:	ef 93       	push	r30
    11b0:	ff 93       	push	r31
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
	MTIMER0_CALLBACK();
    11ba:	e0 91 9d 00 	lds	r30, 0x009D
    11be:	f0 91 9e 00 	lds	r31, 0x009E
    11c2:	09 95       	icall
}
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	ff 91       	pop	r31
    11ca:	ef 91       	pop	r30
    11cc:	bf 91       	pop	r27
    11ce:	af 91       	pop	r26
    11d0:	9f 91       	pop	r25
    11d2:	8f 91       	pop	r24
    11d4:	7f 91       	pop	r23
    11d6:	6f 91       	pop	r22
    11d8:	5f 91       	pop	r21
    11da:	4f 91       	pop	r20
    11dc:	3f 91       	pop	r19
    11de:	2f 91       	pop	r18
    11e0:	0f 90       	pop	r0
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	0f 90       	pop	r0
    11e6:	1f 90       	pop	r1
    11e8:	18 95       	reti

000011ea <MGIE_Enable>:

#include"../../LIB/LSTD_TYPES.h"
#include"../../LIB/LBIT_MATH.h"
#include"MGIE_Private.h"
void MGIE_Enable(void)
{
    11ea:	df 93       	push	r29
    11ec:	cf 93       	push	r28
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    11f2:	af e5       	ldi	r26, 0x5F	; 95
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	ef e5       	ldi	r30, 0x5F	; 95
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	80 68       	ori	r24, 0x80	; 128
    11fe:	8c 93       	st	X, r24
}
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <MGIE_Disable>:
void MGIE_Disable(void)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    120e:	af e5       	ldi	r26, 0x5F	; 95
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	ef e5       	ldi	r30, 0x5F	; 95
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	8f 77       	andi	r24, 0x7F	; 127
    121a:	8c 93       	st	X, r24
}
    121c:	cf 91       	pop	r28
    121e:	df 91       	pop	r29
    1220:	08 95       	ret

00001222 <MEXTI_VidInitEXTI0>:
#include "MEXTI_Config.h"

void (*CALLBACK)(void);

void MEXTI_VidInitEXTI0(void)
{
    1222:	df 93       	push	r29
    1224:	cf 93       	push	r28
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
	/*Select sense control*/
#if SET_SENCECONTROL_EXTI0==MEXTI_RISING_EDGE
	SET_BIT(MCUCR,1);
	SET_BIT(MCUCR,0);
#elif SET_SENCECONTROL_EXTI0==MEXTI_FALLING_EDGE
	SET_BIT(MCUCR,1);
    122a:	a5 e5       	ldi	r26, 0x55	; 85
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e5 e5       	ldi	r30, 0x55	; 85
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	82 60       	ori	r24, 0x02	; 2
    1236:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,0);
    1238:	a5 e5       	ldi	r26, 0x55	; 85
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	e5 e5       	ldi	r30, 0x55	; 85
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	8e 7f       	andi	r24, 0xFE	; 254
    1244:	8c 93       	st	X, r24
#else
#error "Sense Control option of EXTI0 is not valid"

#endif
	/*Enable EXTI 0*/
	SET_BIT(GICR,6);
    1246:	ab e5       	ldi	r26, 0x5B	; 91
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	eb e5       	ldi	r30, 0x5B	; 91
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	80 64       	ori	r24, 0x40	; 64
    1252:	8c 93       	st	X, r24

}
    1254:	cf 91       	pop	r28
    1256:	df 91       	pop	r29
    1258:	08 95       	ret

0000125a <MEXTI_VidInitEXTI1>:
void MEXTI_VidInitEXTI1(void)
{
    125a:	df 93       	push	r29
    125c:	cf 93       	push	r28
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
	/*Select Sense Control */
#if SET_SENCECONTROL_EXTI1==MEXTI_RISING_EDGE
	SET_BIT(MCUCR,3);
    1262:	a5 e5       	ldi	r26, 0x55	; 85
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	e5 e5       	ldi	r30, 0x55	; 85
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	88 60       	ori	r24, 0x08	; 8
    126e:	8c 93       	st	X, r24
	SET_BIT(MCUCR,2);
    1270:	a5 e5       	ldi	r26, 0x55	; 85
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	e5 e5       	ldi	r30, 0x55	; 85
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	84 60       	ori	r24, 0x04	; 4
    127c:	8c 93       	st	X, r24
#else
#error "Sense Control option of EXTI1 is not valid"

#endif
	/* Enable EXTI 1*/
	SET_BIT(GICR,7);
    127e:	ab e5       	ldi	r26, 0x5B	; 91
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	eb e5       	ldi	r30, 0x5B	; 91
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	80 68       	ori	r24, 0x80	; 128
    128a:	8c 93       	st	X, r24
}
    128c:	cf 91       	pop	r28
    128e:	df 91       	pop	r29
    1290:	08 95       	ret

00001292 <MEXTI_VidInitEXTI2>:
void MEXTI_VidInitEXTI2(void)
{
    1292:	df 93       	push	r29
    1294:	cf 93       	push	r28
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
	/*Select Sense Control */
	#if SET_SENCECONTROL_EXTI2==MEXTI_RISING_EDGE
		SET_BIT(MCUCSR,6);
	#elif SET_SENCECONTROL_EXTI2==MEXTI_FALLING_EDGE
		CLR_BIT(MCUCSR,6);
    129a:	a4 e5       	ldi	r26, 0x54	; 84
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	e4 e5       	ldi	r30, 0x54	; 84
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	8f 7b       	andi	r24, 0xBF	; 191
    12a6:	8c 93       	st	X, r24
	#else
	#error "Sense Control option of EXTI2 is not valid"

	#endif
		/* Enable EXTI 2*/
		SET_BIT(GICR,5);
    12a8:	ab e5       	ldi	r26, 0x5B	; 91
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	eb e5       	ldi	r30, 0x5B	; 91
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	80 62       	ori	r24, 0x20	; 32
    12b4:	8c 93       	st	X, r24

}
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <MEXTI_VidSenseControlSelect>:
void MEXTI_VidSenseControlSelect(uint8 copy_uint8EXTI_ID,uint8 copy_uint8EXTI_SenseControl)
{
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <MEXTI_VidSenseControlSelect+0x6>
    12c2:	00 d0       	rcall	.+0      	; 0x12c4 <MEXTI_VidSenseControlSelect+0x8>
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
    12c8:	89 83       	std	Y+1, r24	; 0x01
    12ca:	6a 83       	std	Y+2, r22	; 0x02
	switch (copy_uint8EXTI_ID)
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	3c 83       	std	Y+4, r19	; 0x04
    12d4:	2b 83       	std	Y+3, r18	; 0x03
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	9c 81       	ldd	r25, Y+4	; 0x04
    12da:	81 30       	cpi	r24, 0x01	; 1
    12dc:	91 05       	cpc	r25, r1
    12de:	09 f4       	brne	.+2      	; 0x12e2 <MEXTI_VidSenseControlSelect+0x26>
    12e0:	54 c0       	rjmp	.+168    	; 0x138a <MEXTI_VidSenseControlSelect+0xce>
    12e2:	2b 81       	ldd	r18, Y+3	; 0x03
    12e4:	3c 81       	ldd	r19, Y+4	; 0x04
    12e6:	22 30       	cpi	r18, 0x02	; 2
    12e8:	31 05       	cpc	r19, r1
    12ea:	09 f4       	brne	.+2      	; 0x12ee <MEXTI_VidSenseControlSelect+0x32>
    12ec:	96 c0       	rjmp	.+300    	; 0x141a <MEXTI_VidSenseControlSelect+0x15e>
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	9c 81       	ldd	r25, Y+4	; 0x04
    12f2:	00 97       	sbiw	r24, 0x00	; 0
    12f4:	09 f0       	breq	.+2      	; 0x12f8 <MEXTI_VidSenseControlSelect+0x3c>
    12f6:	a6 c0       	rjmp	.+332    	; 0x1444 <MEXTI_VidSenseControlSelect+0x188>
	{
	case EXTI0:
		if(copy_uint8EXTI_SenseControl==MEXTI_RISING_EDGE)
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	88 23       	and	r24, r24
    12fc:	79 f4       	brne	.+30     	; 0x131c <MEXTI_VidSenseControlSelect+0x60>
		{
			SET_BIT(MCUCR,1);
    12fe:	a5 e5       	ldi	r26, 0x55	; 85
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	e5 e5       	ldi	r30, 0x55	; 85
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	82 60       	ori	r24, 0x02	; 2
    130a:	8c 93       	st	X, r24
			SET_BIT(MCUCR,0);
    130c:	a5 e5       	ldi	r26, 0x55	; 85
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e5 e5       	ldi	r30, 0x55	; 85
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	81 60       	ori	r24, 0x01	; 1
    1318:	8c 93       	st	X, r24
    131a:	94 c0       	rjmp	.+296    	; 0x1444 <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_FALLING_EDGE)
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	81 30       	cpi	r24, 0x01	; 1
    1320:	79 f4       	brne	.+30     	; 0x1340 <MEXTI_VidSenseControlSelect+0x84>
		{
			SET_BIT(MCUCR,1);
    1322:	a5 e5       	ldi	r26, 0x55	; 85
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e5 e5       	ldi	r30, 0x55	; 85
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	82 60       	ori	r24, 0x02	; 2
    132e:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,0);
    1330:	a5 e5       	ldi	r26, 0x55	; 85
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e5 e5       	ldi	r30, 0x55	; 85
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	8e 7f       	andi	r24, 0xFE	; 254
    133c:	8c 93       	st	X, r24
    133e:	82 c0       	rjmp	.+260    	; 0x1444 <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_ANYLOGICALCHANGE)
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	82 30       	cpi	r24, 0x02	; 2
    1344:	79 f4       	brne	.+30     	; 0x1364 <MEXTI_VidSenseControlSelect+0xa8>
		{
			CLR_BIT(MCUCR,1);
    1346:	a5 e5       	ldi	r26, 0x55	; 85
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	e5 e5       	ldi	r30, 0x55	; 85
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	8d 7f       	andi	r24, 0xFD	; 253
    1352:	8c 93       	st	X, r24
			SET_BIT(MCUCR,0);
    1354:	a5 e5       	ldi	r26, 0x55	; 85
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	e5 e5       	ldi	r30, 0x55	; 85
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	81 60       	ori	r24, 0x01	; 1
    1360:	8c 93       	st	X, r24
    1362:	70 c0       	rjmp	.+224    	; 0x1444 <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_LOW_LEVEL)
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	83 30       	cpi	r24, 0x03	; 3
    1368:	09 f0       	breq	.+2      	; 0x136c <MEXTI_VidSenseControlSelect+0xb0>
    136a:	6c c0       	rjmp	.+216    	; 0x1444 <MEXTI_VidSenseControlSelect+0x188>
		{
			CLR_BIT(MCUCR,1);
    136c:	a5 e5       	ldi	r26, 0x55	; 85
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	e5 e5       	ldi	r30, 0x55	; 85
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	8d 7f       	andi	r24, 0xFD	; 253
    1378:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,0);
    137a:	a5 e5       	ldi	r26, 0x55	; 85
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	e5 e5       	ldi	r30, 0x55	; 85
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	8e 7f       	andi	r24, 0xFE	; 254
    1386:	8c 93       	st	X, r24
    1388:	5d c0       	rjmp	.+186    	; 0x1444 <MEXTI_VidSenseControlSelect+0x188>
			/*do nothing*/
		}
		break;

	case EXTI1:
		if(copy_uint8EXTI_SenseControl==MEXTI_RISING_EDGE)
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	88 23       	and	r24, r24
    138e:	79 f4       	brne	.+30     	; 0x13ae <MEXTI_VidSenseControlSelect+0xf2>
		{
			SET_BIT(MCUCR,3);
    1390:	a5 e5       	ldi	r26, 0x55	; 85
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e5 e5       	ldi	r30, 0x55	; 85
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	88 60       	ori	r24, 0x08	; 8
    139c:	8c 93       	st	X, r24
			SET_BIT(MCUCR,2);
    139e:	a5 e5       	ldi	r26, 0x55	; 85
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e5 e5       	ldi	r30, 0x55	; 85
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	84 60       	ori	r24, 0x04	; 4
    13aa:	8c 93       	st	X, r24
    13ac:	4b c0       	rjmp	.+150    	; 0x1444 <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_FALLING_EDGE)
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	79 f4       	brne	.+30     	; 0x13d2 <MEXTI_VidSenseControlSelect+0x116>
		{
			SET_BIT(MCUCR,3);
    13b4:	a5 e5       	ldi	r26, 0x55	; 85
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e5 e5       	ldi	r30, 0x55	; 85
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	88 60       	ori	r24, 0x08	; 8
    13c0:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,2);
    13c2:	a5 e5       	ldi	r26, 0x55	; 85
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e5 e5       	ldi	r30, 0x55	; 85
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	8b 7f       	andi	r24, 0xFB	; 251
    13ce:	8c 93       	st	X, r24
    13d0:	39 c0       	rjmp	.+114    	; 0x1444 <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_ANYLOGICALCHANGE)
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	82 30       	cpi	r24, 0x02	; 2
    13d6:	79 f4       	brne	.+30     	; 0x13f6 <MEXTI_VidSenseControlSelect+0x13a>
		{
			CLR_BIT(MCUCR,3);
    13d8:	a5 e5       	ldi	r26, 0x55	; 85
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	e5 e5       	ldi	r30, 0x55	; 85
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	87 7f       	andi	r24, 0xF7	; 247
    13e4:	8c 93       	st	X, r24
			SET_BIT(MCUCR,2);
    13e6:	a5 e5       	ldi	r26, 0x55	; 85
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e5 e5       	ldi	r30, 0x55	; 85
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	84 60       	ori	r24, 0x04	; 4
    13f2:	8c 93       	st	X, r24
    13f4:	27 c0       	rjmp	.+78     	; 0x1444 <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_LOW_LEVEL)
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	83 30       	cpi	r24, 0x03	; 3
    13fa:	21 f5       	brne	.+72     	; 0x1444 <MEXTI_VidSenseControlSelect+0x188>
		{
			CLR_BIT(MCUCR,3);
    13fc:	a5 e5       	ldi	r26, 0x55	; 85
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	e5 e5       	ldi	r30, 0x55	; 85
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	87 7f       	andi	r24, 0xF7	; 247
    1408:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,2);
    140a:	a5 e5       	ldi	r26, 0x55	; 85
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	e5 e5       	ldi	r30, 0x55	; 85
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	8b 7f       	andi	r24, 0xFB	; 251
    1416:	8c 93       	st	X, r24
    1418:	15 c0       	rjmp	.+42     	; 0x1444 <MEXTI_VidSenseControlSelect+0x188>
			/*do nothing*/
		}
		break;

	case EXTI2:
		if(copy_uint8EXTI_SenseControl==MEXTI_RISING_EDGE)
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	88 23       	and	r24, r24
    141e:	41 f4       	brne	.+16     	; 0x1430 <MEXTI_VidSenseControlSelect+0x174>
		{
			SET_BIT(MCUCSR,6);
    1420:	a4 e5       	ldi	r26, 0x54	; 84
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e4 e5       	ldi	r30, 0x54	; 84
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	80 64       	ori	r24, 0x40	; 64
    142c:	8c 93       	st	X, r24
    142e:	0a c0       	rjmp	.+20     	; 0x1444 <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_FALLING_EDGE)
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	81 30       	cpi	r24, 0x01	; 1
    1434:	39 f4       	brne	.+14     	; 0x1444 <MEXTI_VidSenseControlSelect+0x188>
		{
			CLR_BIT(MCUCSR,6);		}
    1436:	a4 e5       	ldi	r26, 0x54	; 84
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	e4 e5       	ldi	r30, 0x54	; 84
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	8f 7b       	andi	r24, 0xBF	; 191
    1442:	8c 93       	st	X, r24
			/*do nothing*/
		}
		break;
	}

}
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <MEXTI0_VidSetCallBack>:
void MEXTI0_VidSetCallBack(void (*PtrToFun)(void))
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	00 d0       	rcall	.+0      	; 0x1458 <MEXTI0_VidSetCallBack+0x6>
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
    145c:	9a 83       	std	Y+2, r25	; 0x02
    145e:	89 83       	std	Y+1, r24	; 0x01
	CALLBACK=PtrToFun;
    1460:	89 81       	ldd	r24, Y+1	; 0x01
    1462:	9a 81       	ldd	r25, Y+2	; 0x02
    1464:	90 93 a0 00 	sts	0x00A0, r25
    1468:	80 93 9f 00 	sts	0x009F, r24
}
    146c:	0f 90       	pop	r0
    146e:	0f 90       	pop	r0
    1470:	cf 91       	pop	r28
    1472:	df 91       	pop	r29
    1474:	08 95       	ret

00001476 <MEXTI1_VidSetCallBack>:
void MEXTI1_VidSetCallBack(void (*PtrToFun)(void))
{
    1476:	df 93       	push	r29
    1478:	cf 93       	push	r28
    147a:	00 d0       	rcall	.+0      	; 0x147c <MEXTI1_VidSetCallBack+0x6>
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    1480:	9a 83       	std	Y+2, r25	; 0x02
    1482:	89 83       	std	Y+1, r24	; 0x01
	CALLBACK=PtrToFun;
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	9a 81       	ldd	r25, Y+2	; 0x02
    1488:	90 93 a0 00 	sts	0x00A0, r25
    148c:	80 93 9f 00 	sts	0x009F, r24
}
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	cf 91       	pop	r28
    1496:	df 91       	pop	r29
    1498:	08 95       	ret

0000149a <MEXTI2_VidSetCallBack>:
void MEXTI2_VidSetCallBack(void (*PtrToFun)(void))
{
    149a:	df 93       	push	r29
    149c:	cf 93       	push	r28
    149e:	00 d0       	rcall	.+0      	; 0x14a0 <MEXTI2_VidSetCallBack+0x6>
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	9a 83       	std	Y+2, r25	; 0x02
    14a6:	89 83       	std	Y+1, r24	; 0x01
	CALLBACK=PtrToFun;
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	9a 81       	ldd	r25, Y+2	; 0x02
    14ac:	90 93 a0 00 	sts	0x00A0, r25
    14b0:	80 93 9f 00 	sts	0x009F, r24
}
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	cf 91       	pop	r28
    14ba:	df 91       	pop	r29
    14bc:	08 95       	ret

000014be <__vector_1>:
/*EXTI0*/
void __vector_1(void)   __attribute__((signal));
void __vector_1(void)
{
    14be:	1f 92       	push	r1
    14c0:	0f 92       	push	r0
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	0f 92       	push	r0
    14c6:	11 24       	eor	r1, r1
    14c8:	2f 93       	push	r18
    14ca:	3f 93       	push	r19
    14cc:	4f 93       	push	r20
    14ce:	5f 93       	push	r21
    14d0:	6f 93       	push	r22
    14d2:	7f 93       	push	r23
    14d4:	8f 93       	push	r24
    14d6:	9f 93       	push	r25
    14d8:	af 93       	push	r26
    14da:	bf 93       	push	r27
    14dc:	ef 93       	push	r30
    14de:	ff 93       	push	r31
    14e0:	df 93       	push	r29
    14e2:	cf 93       	push	r28
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
	CALLBACK();
    14e8:	e0 91 9f 00 	lds	r30, 0x009F
    14ec:	f0 91 a0 00 	lds	r31, 0x00A0
    14f0:	09 95       	icall
}
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	ff 91       	pop	r31
    14f8:	ef 91       	pop	r30
    14fa:	bf 91       	pop	r27
    14fc:	af 91       	pop	r26
    14fe:	9f 91       	pop	r25
    1500:	8f 91       	pop	r24
    1502:	7f 91       	pop	r23
    1504:	6f 91       	pop	r22
    1506:	5f 91       	pop	r21
    1508:	4f 91       	pop	r20
    150a:	3f 91       	pop	r19
    150c:	2f 91       	pop	r18
    150e:	0f 90       	pop	r0
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	0f 90       	pop	r0
    1514:	1f 90       	pop	r1
    1516:	18 95       	reti

00001518 <__vector_2>:
/*EXTI 1 */
void __vector_2(void)   __attribute__((signal));
void __vector_2(void)
{
    1518:	1f 92       	push	r1
    151a:	0f 92       	push	r0
    151c:	0f b6       	in	r0, 0x3f	; 63
    151e:	0f 92       	push	r0
    1520:	11 24       	eor	r1, r1
    1522:	2f 93       	push	r18
    1524:	3f 93       	push	r19
    1526:	4f 93       	push	r20
    1528:	5f 93       	push	r21
    152a:	6f 93       	push	r22
    152c:	7f 93       	push	r23
    152e:	8f 93       	push	r24
    1530:	9f 93       	push	r25
    1532:	af 93       	push	r26
    1534:	bf 93       	push	r27
    1536:	ef 93       	push	r30
    1538:	ff 93       	push	r31
    153a:	df 93       	push	r29
    153c:	cf 93       	push	r28
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
	CALLBACK();
    1542:	e0 91 9f 00 	lds	r30, 0x009F
    1546:	f0 91 a0 00 	lds	r31, 0x00A0
    154a:	09 95       	icall
}
    154c:	cf 91       	pop	r28
    154e:	df 91       	pop	r29
    1550:	ff 91       	pop	r31
    1552:	ef 91       	pop	r30
    1554:	bf 91       	pop	r27
    1556:	af 91       	pop	r26
    1558:	9f 91       	pop	r25
    155a:	8f 91       	pop	r24
    155c:	7f 91       	pop	r23
    155e:	6f 91       	pop	r22
    1560:	5f 91       	pop	r21
    1562:	4f 91       	pop	r20
    1564:	3f 91       	pop	r19
    1566:	2f 91       	pop	r18
    1568:	0f 90       	pop	r0
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	0f 90       	pop	r0
    156e:	1f 90       	pop	r1
    1570:	18 95       	reti

00001572 <__vector_3>:
/*EXTI2*/
void __vector_3(void)   __attribute__((signal));
void __vector_3(void)
{
    1572:	1f 92       	push	r1
    1574:	0f 92       	push	r0
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	0f 92       	push	r0
    157a:	11 24       	eor	r1, r1
    157c:	2f 93       	push	r18
    157e:	3f 93       	push	r19
    1580:	4f 93       	push	r20
    1582:	5f 93       	push	r21
    1584:	6f 93       	push	r22
    1586:	7f 93       	push	r23
    1588:	8f 93       	push	r24
    158a:	9f 93       	push	r25
    158c:	af 93       	push	r26
    158e:	bf 93       	push	r27
    1590:	ef 93       	push	r30
    1592:	ff 93       	push	r31
    1594:	df 93       	push	r29
    1596:	cf 93       	push	r28
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
	CALLBACK();
    159c:	e0 91 9f 00 	lds	r30, 0x009F
    15a0:	f0 91 a0 00 	lds	r31, 0x00A0
    15a4:	09 95       	icall
}
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	ff 91       	pop	r31
    15ac:	ef 91       	pop	r30
    15ae:	bf 91       	pop	r27
    15b0:	af 91       	pop	r26
    15b2:	9f 91       	pop	r25
    15b4:	8f 91       	pop	r24
    15b6:	7f 91       	pop	r23
    15b8:	6f 91       	pop	r22
    15ba:	5f 91       	pop	r21
    15bc:	4f 91       	pop	r20
    15be:	3f 91       	pop	r19
    15c0:	2f 91       	pop	r18
    15c2:	0f 90       	pop	r0
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	0f 90       	pop	r0
    15c8:	1f 90       	pop	r1
    15ca:	18 95       	reti

000015cc <MDIO_Errorstate_SetPinDirection>:

/********* Set pin direction************/

ErrorState MDIO_Errorstate_SetPinDirection (uint8 copy_uint8PortID , uint8 copy_uint8PinNumber,uint8 copy_uint8PinDirection)

{
    15cc:	df 93       	push	r29
    15ce:	cf 93       	push	r28
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    15d4:	28 97       	sbiw	r28, 0x08	; 8
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	f8 94       	cli
    15da:	de bf       	out	0x3e, r29	; 62
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	cd bf       	out	0x3d, r28	; 61
    15e0:	8a 83       	std	Y+2, r24	; 0x02
    15e2:	6b 83       	std	Y+3, r22	; 0x03
    15e4:	4c 83       	std	Y+4, r20	; 0x04
	ErrorState loc_Errorstate_Error_state = OK;
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	89 83       	std	Y+1, r24	; 0x01

	if (copy_uint8PinNumber<8)
    15ea:	8b 81       	ldd	r24, Y+3	; 0x03
    15ec:	88 30       	cpi	r24, 0x08	; 8
    15ee:	08 f0       	brcs	.+2      	; 0x15f2 <MDIO_Errorstate_SetPinDirection+0x26>
    15f0:	f1 c0       	rjmp	.+482    	; 0x17d4 <MDIO_Errorstate_SetPinDirection+0x208>
	{
		if(copy_uint8PinDirection==PIN_OUTPUT)
    15f2:	8c 81       	ldd	r24, Y+4	; 0x04
    15f4:	81 30       	cpi	r24, 0x01	; 1
    15f6:	09 f0       	breq	.+2      	; 0x15fa <MDIO_Errorstate_SetPinDirection+0x2e>
    15f8:	71 c0       	rjmp	.+226    	; 0x16dc <MDIO_Errorstate_SetPinDirection+0x110>
		{
			switch(copy_uint8PortID)
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	38 87       	std	Y+8, r19	; 0x08
    1602:	2f 83       	std	Y+7, r18	; 0x07
    1604:	8f 81       	ldd	r24, Y+7	; 0x07
    1606:	98 85       	ldd	r25, Y+8	; 0x08
    1608:	81 30       	cpi	r24, 0x01	; 1
    160a:	91 05       	cpc	r25, r1
    160c:	49 f1       	breq	.+82     	; 0x1660 <MDIO_Errorstate_SetPinDirection+0x94>
    160e:	2f 81       	ldd	r18, Y+7	; 0x07
    1610:	38 85       	ldd	r19, Y+8	; 0x08
    1612:	22 30       	cpi	r18, 0x02	; 2
    1614:	31 05       	cpc	r19, r1
    1616:	2c f4       	brge	.+10     	; 0x1622 <MDIO_Errorstate_SetPinDirection+0x56>
    1618:	8f 81       	ldd	r24, Y+7	; 0x07
    161a:	98 85       	ldd	r25, Y+8	; 0x08
    161c:	00 97       	sbiw	r24, 0x00	; 0
    161e:	61 f0       	breq	.+24     	; 0x1638 <MDIO_Errorstate_SetPinDirection+0x6c>
    1620:	5b c0       	rjmp	.+182    	; 0x16d8 <MDIO_Errorstate_SetPinDirection+0x10c>
    1622:	2f 81       	ldd	r18, Y+7	; 0x07
    1624:	38 85       	ldd	r19, Y+8	; 0x08
    1626:	22 30       	cpi	r18, 0x02	; 2
    1628:	31 05       	cpc	r19, r1
    162a:	71 f1       	breq	.+92     	; 0x1688 <MDIO_Errorstate_SetPinDirection+0xbc>
    162c:	8f 81       	ldd	r24, Y+7	; 0x07
    162e:	98 85       	ldd	r25, Y+8	; 0x08
    1630:	83 30       	cpi	r24, 0x03	; 3
    1632:	91 05       	cpc	r25, r1
    1634:	e9 f1       	breq	.+122    	; 0x16b0 <MDIO_Errorstate_SetPinDirection+0xe4>
    1636:	50 c0       	rjmp	.+160    	; 0x16d8 <MDIO_Errorstate_SetPinDirection+0x10c>
			{
			case MDIO_PORTA:
				SET_BIT(DDRA,copy_uint8PinNumber);
    1638:	aa e3       	ldi	r26, 0x3A	; 58
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	ea e3       	ldi	r30, 0x3A	; 58
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	48 2f       	mov	r20, r24
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	02 2e       	mov	r0, r18
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <MDIO_Errorstate_SetPinDirection+0x8a>
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	0a 94       	dec	r0
    1658:	e2 f7       	brpl	.-8      	; 0x1652 <MDIO_Errorstate_SetPinDirection+0x86>
    165a:	84 2b       	or	r24, r20
    165c:	8c 93       	st	X, r24
    165e:	bb c0       	rjmp	.+374    	; 0x17d6 <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			case MDIO_PORTB:
				SET_BIT(DDRB,copy_uint8PinNumber);
    1660:	a7 e3       	ldi	r26, 0x37	; 55
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	e7 e3       	ldi	r30, 0x37	; 55
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	48 2f       	mov	r20, r24
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	28 2f       	mov	r18, r24
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	02 2e       	mov	r0, r18
    1678:	02 c0       	rjmp	.+4      	; 0x167e <MDIO_Errorstate_SetPinDirection+0xb2>
    167a:	88 0f       	add	r24, r24
    167c:	99 1f       	adc	r25, r25
    167e:	0a 94       	dec	r0
    1680:	e2 f7       	brpl	.-8      	; 0x167a <MDIO_Errorstate_SetPinDirection+0xae>
    1682:	84 2b       	or	r24, r20
    1684:	8c 93       	st	X, r24
    1686:	a7 c0       	rjmp	.+334    	; 0x17d6 <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			case MDIO_PORTC:
				SET_BIT(DDRC,copy_uint8PinNumber);
    1688:	a4 e3       	ldi	r26, 0x34	; 52
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	e4 e3       	ldi	r30, 0x34	; 52
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	48 2f       	mov	r20, r24
    1694:	8b 81       	ldd	r24, Y+3	; 0x03
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	02 2e       	mov	r0, r18
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <MDIO_Errorstate_SetPinDirection+0xda>
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	0a 94       	dec	r0
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <MDIO_Errorstate_SetPinDirection+0xd6>
    16aa:	84 2b       	or	r24, r20
    16ac:	8c 93       	st	X, r24
    16ae:	93 c0       	rjmp	.+294    	; 0x17d6 <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			case MDIO_PORTD:
				SET_BIT(DDRD,copy_uint8PinNumber);
    16b0:	a1 e3       	ldi	r26, 0x31	; 49
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	e1 e3       	ldi	r30, 0x31	; 49
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	48 2f       	mov	r20, r24
    16bc:	8b 81       	ldd	r24, Y+3	; 0x03
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	02 2e       	mov	r0, r18
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <MDIO_Errorstate_SetPinDirection+0x102>
    16ca:	88 0f       	add	r24, r24
    16cc:	99 1f       	adc	r25, r25
    16ce:	0a 94       	dec	r0
    16d0:	e2 f7       	brpl	.-8      	; 0x16ca <MDIO_Errorstate_SetPinDirection+0xfe>
    16d2:	84 2b       	or	r24, r20
    16d4:	8c 93       	st	X, r24
    16d6:	7f c0       	rjmp	.+254    	; 0x17d6 <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			default :
				loc_Errorstate_Error_state=NOK;
    16d8:	19 82       	std	Y+1, r1	; 0x01
    16da:	7d c0       	rjmp	.+250    	; 0x17d6 <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			}
		}

		else if(copy_uint8PinDirection==PIN_INPUT)
    16dc:	8c 81       	ldd	r24, Y+4	; 0x04
    16de:	88 23       	and	r24, r24
    16e0:	09 f0       	breq	.+2      	; 0x16e4 <MDIO_Errorstate_SetPinDirection+0x118>
    16e2:	76 c0       	rjmp	.+236    	; 0x17d0 <MDIO_Errorstate_SetPinDirection+0x204>
		{
			switch(copy_uint8PortID)
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	3e 83       	std	Y+6, r19	; 0x06
    16ec:	2d 83       	std	Y+5, r18	; 0x05
    16ee:	8d 81       	ldd	r24, Y+5	; 0x05
    16f0:	9e 81       	ldd	r25, Y+6	; 0x06
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	91 05       	cpc	r25, r1
    16f6:	59 f1       	breq	.+86     	; 0x174e <MDIO_Errorstate_SetPinDirection+0x182>
    16f8:	2d 81       	ldd	r18, Y+5	; 0x05
    16fa:	3e 81       	ldd	r19, Y+6	; 0x06
    16fc:	22 30       	cpi	r18, 0x02	; 2
    16fe:	31 05       	cpc	r19, r1
    1700:	2c f4       	brge	.+10     	; 0x170c <MDIO_Errorstate_SetPinDirection+0x140>
    1702:	8d 81       	ldd	r24, Y+5	; 0x05
    1704:	9e 81       	ldd	r25, Y+6	; 0x06
    1706:	00 97       	sbiw	r24, 0x00	; 0
    1708:	69 f0       	breq	.+26     	; 0x1724 <MDIO_Errorstate_SetPinDirection+0x158>
    170a:	60 c0       	rjmp	.+192    	; 0x17cc <MDIO_Errorstate_SetPinDirection+0x200>
    170c:	2d 81       	ldd	r18, Y+5	; 0x05
    170e:	3e 81       	ldd	r19, Y+6	; 0x06
    1710:	22 30       	cpi	r18, 0x02	; 2
    1712:	31 05       	cpc	r19, r1
    1714:	89 f1       	breq	.+98     	; 0x1778 <MDIO_Errorstate_SetPinDirection+0x1ac>
    1716:	8d 81       	ldd	r24, Y+5	; 0x05
    1718:	9e 81       	ldd	r25, Y+6	; 0x06
    171a:	83 30       	cpi	r24, 0x03	; 3
    171c:	91 05       	cpc	r25, r1
    171e:	09 f4       	brne	.+2      	; 0x1722 <MDIO_Errorstate_SetPinDirection+0x156>
    1720:	40 c0       	rjmp	.+128    	; 0x17a2 <MDIO_Errorstate_SetPinDirection+0x1d6>
    1722:	54 c0       	rjmp	.+168    	; 0x17cc <MDIO_Errorstate_SetPinDirection+0x200>
			{
			case MDIO_PORTA:
				CLR_BIT(DDRA,copy_uint8PinNumber);
    1724:	aa e3       	ldi	r26, 0x3A	; 58
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	ea e3       	ldi	r30, 0x3A	; 58
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	48 2f       	mov	r20, r24
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	02 2e       	mov	r0, r18
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <MDIO_Errorstate_SetPinDirection+0x176>
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	0a 94       	dec	r0
    1744:	e2 f7       	brpl	.-8      	; 0x173e <MDIO_Errorstate_SetPinDirection+0x172>
    1746:	80 95       	com	r24
    1748:	84 23       	and	r24, r20
    174a:	8c 93       	st	X, r24
    174c:	44 c0       	rjmp	.+136    	; 0x17d6 <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			case MDIO_PORTB:
				CLR_BIT(DDRB,copy_uint8PinNumber);
    174e:	a7 e3       	ldi	r26, 0x37	; 55
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	e7 e3       	ldi	r30, 0x37	; 55
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	48 2f       	mov	r20, r24
    175a:	8b 81       	ldd	r24, Y+3	; 0x03
    175c:	28 2f       	mov	r18, r24
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	02 2e       	mov	r0, r18
    1766:	02 c0       	rjmp	.+4      	; 0x176c <MDIO_Errorstate_SetPinDirection+0x1a0>
    1768:	88 0f       	add	r24, r24
    176a:	99 1f       	adc	r25, r25
    176c:	0a 94       	dec	r0
    176e:	e2 f7       	brpl	.-8      	; 0x1768 <MDIO_Errorstate_SetPinDirection+0x19c>
    1770:	80 95       	com	r24
    1772:	84 23       	and	r24, r20
    1774:	8c 93       	st	X, r24
    1776:	2f c0       	rjmp	.+94     	; 0x17d6 <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			case MDIO_PORTC:
				CLR_BIT(DDRC,copy_uint8PinNumber);
    1778:	a4 e3       	ldi	r26, 0x34	; 52
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e4 e3       	ldi	r30, 0x34	; 52
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	48 2f       	mov	r20, r24
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	02 2e       	mov	r0, r18
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <MDIO_Errorstate_SetPinDirection+0x1ca>
    1792:	88 0f       	add	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	0a 94       	dec	r0
    1798:	e2 f7       	brpl	.-8      	; 0x1792 <MDIO_Errorstate_SetPinDirection+0x1c6>
    179a:	80 95       	com	r24
    179c:	84 23       	and	r24, r20
    179e:	8c 93       	st	X, r24
    17a0:	1a c0       	rjmp	.+52     	; 0x17d6 <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			case MDIO_PORTD:
				CLR_BIT(DDRD,copy_uint8PinNumber);
    17a2:	a1 e3       	ldi	r26, 0x31	; 49
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e1 e3       	ldi	r30, 0x31	; 49
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	48 2f       	mov	r20, r24
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	02 2e       	mov	r0, r18
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <MDIO_Errorstate_SetPinDirection+0x1f4>
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	0a 94       	dec	r0
    17c2:	e2 f7       	brpl	.-8      	; 0x17bc <MDIO_Errorstate_SetPinDirection+0x1f0>
    17c4:	80 95       	com	r24
    17c6:	84 23       	and	r24, r20
    17c8:	8c 93       	st	X, r24
    17ca:	05 c0       	rjmp	.+10     	; 0x17d6 <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			default :
				loc_Errorstate_Error_state=NOK;
    17cc:	19 82       	std	Y+1, r1	; 0x01
    17ce:	03 c0       	rjmp	.+6      	; 0x17d6 <MDIO_Errorstate_SetPinDirection+0x20a>
			}
		}
		else
		{
			loc_Errorstate_Error_state=NOK;
    17d0:	19 82       	std	Y+1, r1	; 0x01
    17d2:	01 c0       	rjmp	.+2      	; 0x17d6 <MDIO_Errorstate_SetPinDirection+0x20a>
		}
	}
	else
	{
		loc_Errorstate_Error_state=NOK;
    17d4:	19 82       	std	Y+1, r1	; 0x01
	}
	return loc_Errorstate_Error_state ;
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    17d8:	28 96       	adiw	r28, 0x08	; 8
    17da:	0f b6       	in	r0, 0x3f	; 63
    17dc:	f8 94       	cli
    17de:	de bf       	out	0x3e, r29	; 62
    17e0:	0f be       	out	0x3f, r0	; 63
    17e2:	cd bf       	out	0x3d, r28	; 61
    17e4:	cf 91       	pop	r28
    17e6:	df 91       	pop	r29
    17e8:	08 95       	ret

000017ea <MDIO_Errorstate_SetPinValue>:

/********* Set pin value************/
ErrorState MDIO_Errorstate_SetPinValue (uint8 copy_uint8PortID , uint8 copy_uint8PinNumber,uint8 copy_uint8PinValue)
{
    17ea:	df 93       	push	r29
    17ec:	cf 93       	push	r28
    17ee:	cd b7       	in	r28, 0x3d	; 61
    17f0:	de b7       	in	r29, 0x3e	; 62
    17f2:	28 97       	sbiw	r28, 0x08	; 8
    17f4:	0f b6       	in	r0, 0x3f	; 63
    17f6:	f8 94       	cli
    17f8:	de bf       	out	0x3e, r29	; 62
    17fa:	0f be       	out	0x3f, r0	; 63
    17fc:	cd bf       	out	0x3d, r28	; 61
    17fe:	8a 83       	std	Y+2, r24	; 0x02
    1800:	6b 83       	std	Y+3, r22	; 0x03
    1802:	4c 83       	std	Y+4, r20	; 0x04
	{
		ErrorState loc_Errorstate_Error_state = OK;
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	89 83       	std	Y+1, r24	; 0x01

		if (copy_uint8PinNumber<8)
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	88 30       	cpi	r24, 0x08	; 8
    180c:	08 f0       	brcs	.+2      	; 0x1810 <MDIO_Errorstate_SetPinValue+0x26>
    180e:	f1 c0       	rjmp	.+482    	; 0x19f2 <MDIO_Errorstate_SetPinValue+0x208>
		{
			if(copy_uint8PinValue==PIN_HIGH)
    1810:	8c 81       	ldd	r24, Y+4	; 0x04
    1812:	81 30       	cpi	r24, 0x01	; 1
    1814:	09 f0       	breq	.+2      	; 0x1818 <MDIO_Errorstate_SetPinValue+0x2e>
    1816:	71 c0       	rjmp	.+226    	; 0x18fa <MDIO_Errorstate_SetPinValue+0x110>
			{
				switch(copy_uint8PortID)
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
    181a:	28 2f       	mov	r18, r24
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	38 87       	std	Y+8, r19	; 0x08
    1820:	2f 83       	std	Y+7, r18	; 0x07
    1822:	8f 81       	ldd	r24, Y+7	; 0x07
    1824:	98 85       	ldd	r25, Y+8	; 0x08
    1826:	81 30       	cpi	r24, 0x01	; 1
    1828:	91 05       	cpc	r25, r1
    182a:	49 f1       	breq	.+82     	; 0x187e <MDIO_Errorstate_SetPinValue+0x94>
    182c:	2f 81       	ldd	r18, Y+7	; 0x07
    182e:	38 85       	ldd	r19, Y+8	; 0x08
    1830:	22 30       	cpi	r18, 0x02	; 2
    1832:	31 05       	cpc	r19, r1
    1834:	2c f4       	brge	.+10     	; 0x1840 <MDIO_Errorstate_SetPinValue+0x56>
    1836:	8f 81       	ldd	r24, Y+7	; 0x07
    1838:	98 85       	ldd	r25, Y+8	; 0x08
    183a:	00 97       	sbiw	r24, 0x00	; 0
    183c:	61 f0       	breq	.+24     	; 0x1856 <MDIO_Errorstate_SetPinValue+0x6c>
    183e:	5b c0       	rjmp	.+182    	; 0x18f6 <MDIO_Errorstate_SetPinValue+0x10c>
    1840:	2f 81       	ldd	r18, Y+7	; 0x07
    1842:	38 85       	ldd	r19, Y+8	; 0x08
    1844:	22 30       	cpi	r18, 0x02	; 2
    1846:	31 05       	cpc	r19, r1
    1848:	71 f1       	breq	.+92     	; 0x18a6 <MDIO_Errorstate_SetPinValue+0xbc>
    184a:	8f 81       	ldd	r24, Y+7	; 0x07
    184c:	98 85       	ldd	r25, Y+8	; 0x08
    184e:	83 30       	cpi	r24, 0x03	; 3
    1850:	91 05       	cpc	r25, r1
    1852:	e9 f1       	breq	.+122    	; 0x18ce <MDIO_Errorstate_SetPinValue+0xe4>
    1854:	50 c0       	rjmp	.+160    	; 0x18f6 <MDIO_Errorstate_SetPinValue+0x10c>
				{
				case MDIO_PORTA:
					SET_BIT(PORTA,copy_uint8PinNumber);
    1856:	ab e3       	ldi	r26, 0x3B	; 59
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	eb e3       	ldi	r30, 0x3B	; 59
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	48 2f       	mov	r20, r24
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	28 2f       	mov	r18, r24
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	02 2e       	mov	r0, r18
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <MDIO_Errorstate_SetPinValue+0x8a>
    1870:	88 0f       	add	r24, r24
    1872:	99 1f       	adc	r25, r25
    1874:	0a 94       	dec	r0
    1876:	e2 f7       	brpl	.-8      	; 0x1870 <MDIO_Errorstate_SetPinValue+0x86>
    1878:	84 2b       	or	r24, r20
    187a:	8c 93       	st	X, r24
    187c:	bb c0       	rjmp	.+374    	; 0x19f4 <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				case MDIO_PORTB:
					SET_BIT(PORTB,copy_uint8PinNumber);
    187e:	a8 e3       	ldi	r26, 0x38	; 56
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	e8 e3       	ldi	r30, 0x38	; 56
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	48 2f       	mov	r20, r24
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	28 2f       	mov	r18, r24
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	02 2e       	mov	r0, r18
    1896:	02 c0       	rjmp	.+4      	; 0x189c <MDIO_Errorstate_SetPinValue+0xb2>
    1898:	88 0f       	add	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	0a 94       	dec	r0
    189e:	e2 f7       	brpl	.-8      	; 0x1898 <MDIO_Errorstate_SetPinValue+0xae>
    18a0:	84 2b       	or	r24, r20
    18a2:	8c 93       	st	X, r24
    18a4:	a7 c0       	rjmp	.+334    	; 0x19f4 <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				case MDIO_PORTC:
					SET_BIT(PORTC,copy_uint8PinNumber);
    18a6:	a5 e3       	ldi	r26, 0x35	; 53
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	e5 e3       	ldi	r30, 0x35	; 53
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	48 2f       	mov	r20, r24
    18b2:	8b 81       	ldd	r24, Y+3	; 0x03
    18b4:	28 2f       	mov	r18, r24
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	02 2e       	mov	r0, r18
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <MDIO_Errorstate_SetPinValue+0xda>
    18c0:	88 0f       	add	r24, r24
    18c2:	99 1f       	adc	r25, r25
    18c4:	0a 94       	dec	r0
    18c6:	e2 f7       	brpl	.-8      	; 0x18c0 <MDIO_Errorstate_SetPinValue+0xd6>
    18c8:	84 2b       	or	r24, r20
    18ca:	8c 93       	st	X, r24
    18cc:	93 c0       	rjmp	.+294    	; 0x19f4 <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				case MDIO_PORTD:
					SET_BIT(PORTD,copy_uint8PinNumber);
    18ce:	a2 e3       	ldi	r26, 0x32	; 50
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	e2 e3       	ldi	r30, 0x32	; 50
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	48 2f       	mov	r20, r24
    18da:	8b 81       	ldd	r24, Y+3	; 0x03
    18dc:	28 2f       	mov	r18, r24
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	02 2e       	mov	r0, r18
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <MDIO_Errorstate_SetPinValue+0x102>
    18e8:	88 0f       	add	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	0a 94       	dec	r0
    18ee:	e2 f7       	brpl	.-8      	; 0x18e8 <MDIO_Errorstate_SetPinValue+0xfe>
    18f0:	84 2b       	or	r24, r20
    18f2:	8c 93       	st	X, r24
    18f4:	7f c0       	rjmp	.+254    	; 0x19f4 <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				default :
					loc_Errorstate_Error_state=NOK;
    18f6:	19 82       	std	Y+1, r1	; 0x01
    18f8:	7d c0       	rjmp	.+250    	; 0x19f4 <MDIO_Errorstate_SetPinValue+0x20a>

					break;
				}
			}

			else if(copy_uint8PinValue==PIN_LOW)
    18fa:	8c 81       	ldd	r24, Y+4	; 0x04
    18fc:	88 23       	and	r24, r24
    18fe:	09 f0       	breq	.+2      	; 0x1902 <MDIO_Errorstate_SetPinValue+0x118>
    1900:	76 c0       	rjmp	.+236    	; 0x19ee <MDIO_Errorstate_SetPinValue+0x204>
			{
				switch(copy_uint8PortID)
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	28 2f       	mov	r18, r24
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	3e 83       	std	Y+6, r19	; 0x06
    190a:	2d 83       	std	Y+5, r18	; 0x05
    190c:	8d 81       	ldd	r24, Y+5	; 0x05
    190e:	9e 81       	ldd	r25, Y+6	; 0x06
    1910:	81 30       	cpi	r24, 0x01	; 1
    1912:	91 05       	cpc	r25, r1
    1914:	59 f1       	breq	.+86     	; 0x196c <MDIO_Errorstate_SetPinValue+0x182>
    1916:	2d 81       	ldd	r18, Y+5	; 0x05
    1918:	3e 81       	ldd	r19, Y+6	; 0x06
    191a:	22 30       	cpi	r18, 0x02	; 2
    191c:	31 05       	cpc	r19, r1
    191e:	2c f4       	brge	.+10     	; 0x192a <MDIO_Errorstate_SetPinValue+0x140>
    1920:	8d 81       	ldd	r24, Y+5	; 0x05
    1922:	9e 81       	ldd	r25, Y+6	; 0x06
    1924:	00 97       	sbiw	r24, 0x00	; 0
    1926:	69 f0       	breq	.+26     	; 0x1942 <MDIO_Errorstate_SetPinValue+0x158>
    1928:	60 c0       	rjmp	.+192    	; 0x19ea <MDIO_Errorstate_SetPinValue+0x200>
    192a:	2d 81       	ldd	r18, Y+5	; 0x05
    192c:	3e 81       	ldd	r19, Y+6	; 0x06
    192e:	22 30       	cpi	r18, 0x02	; 2
    1930:	31 05       	cpc	r19, r1
    1932:	89 f1       	breq	.+98     	; 0x1996 <MDIO_Errorstate_SetPinValue+0x1ac>
    1934:	8d 81       	ldd	r24, Y+5	; 0x05
    1936:	9e 81       	ldd	r25, Y+6	; 0x06
    1938:	83 30       	cpi	r24, 0x03	; 3
    193a:	91 05       	cpc	r25, r1
    193c:	09 f4       	brne	.+2      	; 0x1940 <MDIO_Errorstate_SetPinValue+0x156>
    193e:	40 c0       	rjmp	.+128    	; 0x19c0 <MDIO_Errorstate_SetPinValue+0x1d6>
    1940:	54 c0       	rjmp	.+168    	; 0x19ea <MDIO_Errorstate_SetPinValue+0x200>
				{
				case MDIO_PORTA:
					CLR_BIT(PORTA,copy_uint8PinNumber);
    1942:	ab e3       	ldi	r26, 0x3B	; 59
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	eb e3       	ldi	r30, 0x3B	; 59
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	48 2f       	mov	r20, r24
    194e:	8b 81       	ldd	r24, Y+3	; 0x03
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	02 2e       	mov	r0, r18
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <MDIO_Errorstate_SetPinValue+0x176>
    195c:	88 0f       	add	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	0a 94       	dec	r0
    1962:	e2 f7       	brpl	.-8      	; 0x195c <MDIO_Errorstate_SetPinValue+0x172>
    1964:	80 95       	com	r24
    1966:	84 23       	and	r24, r20
    1968:	8c 93       	st	X, r24
    196a:	44 c0       	rjmp	.+136    	; 0x19f4 <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				case MDIO_PORTB:
					CLR_BIT(PORTB,copy_uint8PinNumber);
    196c:	a8 e3       	ldi	r26, 0x38	; 56
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e8 e3       	ldi	r30, 0x38	; 56
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	48 2f       	mov	r20, r24
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	28 2f       	mov	r18, r24
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	02 2e       	mov	r0, r18
    1984:	02 c0       	rjmp	.+4      	; 0x198a <MDIO_Errorstate_SetPinValue+0x1a0>
    1986:	88 0f       	add	r24, r24
    1988:	99 1f       	adc	r25, r25
    198a:	0a 94       	dec	r0
    198c:	e2 f7       	brpl	.-8      	; 0x1986 <MDIO_Errorstate_SetPinValue+0x19c>
    198e:	80 95       	com	r24
    1990:	84 23       	and	r24, r20
    1992:	8c 93       	st	X, r24
    1994:	2f c0       	rjmp	.+94     	; 0x19f4 <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				case MDIO_PORTC:
					CLR_BIT(PORTC,copy_uint8PinNumber);
    1996:	a5 e3       	ldi	r26, 0x35	; 53
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	e5 e3       	ldi	r30, 0x35	; 53
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	48 2f       	mov	r20, r24
    19a2:	8b 81       	ldd	r24, Y+3	; 0x03
    19a4:	28 2f       	mov	r18, r24
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	02 2e       	mov	r0, r18
    19ae:	02 c0       	rjmp	.+4      	; 0x19b4 <MDIO_Errorstate_SetPinValue+0x1ca>
    19b0:	88 0f       	add	r24, r24
    19b2:	99 1f       	adc	r25, r25
    19b4:	0a 94       	dec	r0
    19b6:	e2 f7       	brpl	.-8      	; 0x19b0 <MDIO_Errorstate_SetPinValue+0x1c6>
    19b8:	80 95       	com	r24
    19ba:	84 23       	and	r24, r20
    19bc:	8c 93       	st	X, r24
    19be:	1a c0       	rjmp	.+52     	; 0x19f4 <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				case MDIO_PORTD:
					CLR_BIT(PORTD,copy_uint8PinNumber);
    19c0:	a2 e3       	ldi	r26, 0x32	; 50
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	e2 e3       	ldi	r30, 0x32	; 50
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	48 2f       	mov	r20, r24
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	28 2f       	mov	r18, r24
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	02 2e       	mov	r0, r18
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <MDIO_Errorstate_SetPinValue+0x1f4>
    19da:	88 0f       	add	r24, r24
    19dc:	99 1f       	adc	r25, r25
    19de:	0a 94       	dec	r0
    19e0:	e2 f7       	brpl	.-8      	; 0x19da <MDIO_Errorstate_SetPinValue+0x1f0>
    19e2:	80 95       	com	r24
    19e4:	84 23       	and	r24, r20
    19e6:	8c 93       	st	X, r24
    19e8:	05 c0       	rjmp	.+10     	; 0x19f4 <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				default :
					loc_Errorstate_Error_state=NOK;
    19ea:	19 82       	std	Y+1, r1	; 0x01
    19ec:	03 c0       	rjmp	.+6      	; 0x19f4 <MDIO_Errorstate_SetPinValue+0x20a>
				}
			}
			else
			{
				loc_Errorstate_Error_state=NOK;
    19ee:	19 82       	std	Y+1, r1	; 0x01
    19f0:	01 c0       	rjmp	.+2      	; 0x19f4 <MDIO_Errorstate_SetPinValue+0x20a>
			}
		}
		else
		{
			loc_Errorstate_Error_state=NOK;
    19f2:	19 82       	std	Y+1, r1	; 0x01
		}
		return loc_Errorstate_Error_state ;
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    19f6:	28 96       	adiw	r28, 0x08	; 8
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	f8 94       	cli
    19fc:	de bf       	out	0x3e, r29	; 62
    19fe:	0f be       	out	0x3f, r0	; 63
    1a00:	cd bf       	out	0x3d, r28	; 61
    1a02:	cf 91       	pop	r28
    1a04:	df 91       	pop	r29
    1a06:	08 95       	ret

00001a08 <MDIO_Errorstate_GetPinValue>:


/********* get pin value************/
ErrorState MDIO_Errorstate_GetPinValue (uint8 copy_uint8PortID , uint8 copy_uint8PinNumber,uint8 *puint8PinValue)
{
    1a08:	df 93       	push	r29
    1a0a:	cf 93       	push	r28
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	27 97       	sbiw	r28, 0x07	; 7
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	f8 94       	cli
    1a16:	de bf       	out	0x3e, r29	; 62
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	cd bf       	out	0x3d, r28	; 61
    1a1c:	8a 83       	std	Y+2, r24	; 0x02
    1a1e:	6b 83       	std	Y+3, r22	; 0x03
    1a20:	5d 83       	std	Y+5, r21	; 0x05
    1a22:	4c 83       	std	Y+4, r20	; 0x04
	ErrorState loc_Errorstate_Error_state = OK;
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	89 83       	std	Y+1, r24	; 0x01
	if (copy_uint8PinNumber<8)
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	88 30       	cpi	r24, 0x08	; 8
    1a2c:	08 f0       	brcs	.+2      	; 0x1a30 <MDIO_Errorstate_GetPinValue+0x28>
    1a2e:	73 c0       	rjmp	.+230    	; 0x1b16 <MDIO_Errorstate_GetPinValue+0x10e>
	{
		switch(copy_uint8PortID)
    1a30:	8a 81       	ldd	r24, Y+2	; 0x02
    1a32:	28 2f       	mov	r18, r24
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	3f 83       	std	Y+7, r19	; 0x07
    1a38:	2e 83       	std	Y+6, r18	; 0x06
    1a3a:	4e 81       	ldd	r20, Y+6	; 0x06
    1a3c:	5f 81       	ldd	r21, Y+7	; 0x07
    1a3e:	41 30       	cpi	r20, 0x01	; 1
    1a40:	51 05       	cpc	r21, r1
    1a42:	59 f1       	breq	.+86     	; 0x1a9a <MDIO_Errorstate_GetPinValue+0x92>
    1a44:	8e 81       	ldd	r24, Y+6	; 0x06
    1a46:	9f 81       	ldd	r25, Y+7	; 0x07
    1a48:	82 30       	cpi	r24, 0x02	; 2
    1a4a:	91 05       	cpc	r25, r1
    1a4c:	34 f4       	brge	.+12     	; 0x1a5a <MDIO_Errorstate_GetPinValue+0x52>
    1a4e:	2e 81       	ldd	r18, Y+6	; 0x06
    1a50:	3f 81       	ldd	r19, Y+7	; 0x07
    1a52:	21 15       	cp	r18, r1
    1a54:	31 05       	cpc	r19, r1
    1a56:	69 f0       	breq	.+26     	; 0x1a72 <MDIO_Errorstate_GetPinValue+0x6a>
    1a58:	5c c0       	rjmp	.+184    	; 0x1b12 <MDIO_Errorstate_GetPinValue+0x10a>
    1a5a:	4e 81       	ldd	r20, Y+6	; 0x06
    1a5c:	5f 81       	ldd	r21, Y+7	; 0x07
    1a5e:	42 30       	cpi	r20, 0x02	; 2
    1a60:	51 05       	cpc	r21, r1
    1a62:	79 f1       	breq	.+94     	; 0x1ac2 <MDIO_Errorstate_GetPinValue+0xba>
    1a64:	8e 81       	ldd	r24, Y+6	; 0x06
    1a66:	9f 81       	ldd	r25, Y+7	; 0x07
    1a68:	83 30       	cpi	r24, 0x03	; 3
    1a6a:	91 05       	cpc	r25, r1
    1a6c:	09 f4       	brne	.+2      	; 0x1a70 <MDIO_Errorstate_GetPinValue+0x68>
    1a6e:	3d c0       	rjmp	.+122    	; 0x1aea <MDIO_Errorstate_GetPinValue+0xe2>
    1a70:	50 c0       	rjmp	.+160    	; 0x1b12 <MDIO_Errorstate_GetPinValue+0x10a>
		{
		case MDIO_PORTA:
			*puint8PinValue= GET_BIT(PINA,copy_uint8PinNumber);
    1a72:	e9 e3       	ldi	r30, 0x39	; 57
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	28 2f       	mov	r18, r24
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7e:	88 2f       	mov	r24, r24
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	a9 01       	movw	r20, r18
    1a84:	02 c0       	rjmp	.+4      	; 0x1a8a <MDIO_Errorstate_GetPinValue+0x82>
    1a86:	55 95       	asr	r21
    1a88:	47 95       	ror	r20
    1a8a:	8a 95       	dec	r24
    1a8c:	e2 f7       	brpl	.-8      	; 0x1a86 <MDIO_Errorstate_GetPinValue+0x7e>
    1a8e:	ca 01       	movw	r24, r20
    1a90:	81 70       	andi	r24, 0x01	; 1
    1a92:	ec 81       	ldd	r30, Y+4	; 0x04
    1a94:	fd 81       	ldd	r31, Y+5	; 0x05
    1a96:	80 83       	st	Z, r24
    1a98:	3f c0       	rjmp	.+126    	; 0x1b18 <MDIO_Errorstate_GetPinValue+0x110>
			break;
		case MDIO_PORTB:
			*puint8PinValue=GET_BIT(PINB,copy_uint8PinNumber);
    1a9a:	e6 e3       	ldi	r30, 0x36	; 54
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	88 2f       	mov	r24, r24
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	a9 01       	movw	r20, r18
    1aac:	02 c0       	rjmp	.+4      	; 0x1ab2 <MDIO_Errorstate_GetPinValue+0xaa>
    1aae:	55 95       	asr	r21
    1ab0:	47 95       	ror	r20
    1ab2:	8a 95       	dec	r24
    1ab4:	e2 f7       	brpl	.-8      	; 0x1aae <MDIO_Errorstate_GetPinValue+0xa6>
    1ab6:	ca 01       	movw	r24, r20
    1ab8:	81 70       	andi	r24, 0x01	; 1
    1aba:	ec 81       	ldd	r30, Y+4	; 0x04
    1abc:	fd 81       	ldd	r31, Y+5	; 0x05
    1abe:	80 83       	st	Z, r24
    1ac0:	2b c0       	rjmp	.+86     	; 0x1b18 <MDIO_Errorstate_GetPinValue+0x110>
			break;
		case MDIO_PORTC:
			*puint8PinValue=GET_BIT(PINC,copy_uint8PinNumber);
    1ac2:	e3 e3       	ldi	r30, 0x33	; 51
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	28 2f       	mov	r18, r24
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ace:	88 2f       	mov	r24, r24
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	a9 01       	movw	r20, r18
    1ad4:	02 c0       	rjmp	.+4      	; 0x1ada <MDIO_Errorstate_GetPinValue+0xd2>
    1ad6:	55 95       	asr	r21
    1ad8:	47 95       	ror	r20
    1ada:	8a 95       	dec	r24
    1adc:	e2 f7       	brpl	.-8      	; 0x1ad6 <MDIO_Errorstate_GetPinValue+0xce>
    1ade:	ca 01       	movw	r24, r20
    1ae0:	81 70       	andi	r24, 0x01	; 1
    1ae2:	ec 81       	ldd	r30, Y+4	; 0x04
    1ae4:	fd 81       	ldd	r31, Y+5	; 0x05
    1ae6:	80 83       	st	Z, r24
    1ae8:	17 c0       	rjmp	.+46     	; 0x1b18 <MDIO_Errorstate_GetPinValue+0x110>
			break;
		case MDIO_PORTD:
			*puint8PinValue=GET_BIT(PIND,copy_uint8PinNumber);
    1aea:	e0 e3       	ldi	r30, 0x30	; 48
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	28 2f       	mov	r18, r24
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	88 2f       	mov	r24, r24
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	a9 01       	movw	r20, r18
    1afc:	02 c0       	rjmp	.+4      	; 0x1b02 <MDIO_Errorstate_GetPinValue+0xfa>
    1afe:	55 95       	asr	r21
    1b00:	47 95       	ror	r20
    1b02:	8a 95       	dec	r24
    1b04:	e2 f7       	brpl	.-8      	; 0x1afe <MDIO_Errorstate_GetPinValue+0xf6>
    1b06:	ca 01       	movw	r24, r20
    1b08:	81 70       	andi	r24, 0x01	; 1
    1b0a:	ec 81       	ldd	r30, Y+4	; 0x04
    1b0c:	fd 81       	ldd	r31, Y+5	; 0x05
    1b0e:	80 83       	st	Z, r24
    1b10:	03 c0       	rjmp	.+6      	; 0x1b18 <MDIO_Errorstate_GetPinValue+0x110>
			break;
		default :
			loc_Errorstate_Error_state=NOK;
    1b12:	19 82       	std	Y+1, r1	; 0x01
    1b14:	01 c0       	rjmp	.+2      	; 0x1b18 <MDIO_Errorstate_GetPinValue+0x110>

		}
	}
	else
	{
		loc_Errorstate_Error_state=NOK;
    1b16:	19 82       	std	Y+1, r1	; 0x01
	}
	return loc_Errorstate_Error_state;
    1b18:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b1a:	27 96       	adiw	r28, 0x07	; 7
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	f8 94       	cli
    1b20:	de bf       	out	0x3e, r29	; 62
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	cd bf       	out	0x3d, r28	; 61
    1b26:	cf 91       	pop	r28
    1b28:	df 91       	pop	r29
    1b2a:	08 95       	ret

00001b2c <MDIO_Errorstate_SetPortDirection>:

/********* set port direction & value************/
ErrorState MDIO_Errorstate_SetPortDirection (uint8 copy_uint8PortID , uint8 copy_uint8PortDirection)
{
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	00 d0       	rcall	.+0      	; 0x1b32 <MDIO_Errorstate_SetPortDirection+0x6>
    1b32:	00 d0       	rcall	.+0      	; 0x1b34 <MDIO_Errorstate_SetPortDirection+0x8>
    1b34:	0f 92       	push	r0
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
    1b3a:	8a 83       	std	Y+2, r24	; 0x02
    1b3c:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState loc_Errorstate_Error_state = OK;
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	89 83       	std	Y+1, r24	; 0x01

	if((copy_uint8PortDirection== PORT_OUTPUT) ||(copy_uint8PortDirection==PORT_INPUT))
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	8f 3f       	cpi	r24, 0xFF	; 255
    1b46:	19 f0       	breq	.+6      	; 0x1b4e <MDIO_Errorstate_SetPortDirection+0x22>
    1b48:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4a:	88 23       	and	r24, r24
    1b4c:	a9 f5       	brne	.+106    	; 0x1bb8 <MDIO_Errorstate_SetPortDirection+0x8c>
	{
		switch(copy_uint8PortID)
    1b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b50:	28 2f       	mov	r18, r24
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	3d 83       	std	Y+5, r19	; 0x05
    1b56:	2c 83       	std	Y+4, r18	; 0x04
    1b58:	8c 81       	ldd	r24, Y+4	; 0x04
    1b5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b5c:	81 30       	cpi	r24, 0x01	; 1
    1b5e:	91 05       	cpc	r25, r1
    1b60:	d1 f0       	breq	.+52     	; 0x1b96 <MDIO_Errorstate_SetPortDirection+0x6a>
    1b62:	2c 81       	ldd	r18, Y+4	; 0x04
    1b64:	3d 81       	ldd	r19, Y+5	; 0x05
    1b66:	22 30       	cpi	r18, 0x02	; 2
    1b68:	31 05       	cpc	r19, r1
    1b6a:	2c f4       	brge	.+10     	; 0x1b76 <MDIO_Errorstate_SetPortDirection+0x4a>
    1b6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b70:	00 97       	sbiw	r24, 0x00	; 0
    1b72:	61 f0       	breq	.+24     	; 0x1b8c <MDIO_Errorstate_SetPortDirection+0x60>
    1b74:	1f c0       	rjmp	.+62     	; 0x1bb4 <MDIO_Errorstate_SetPortDirection+0x88>
    1b76:	2c 81       	ldd	r18, Y+4	; 0x04
    1b78:	3d 81       	ldd	r19, Y+5	; 0x05
    1b7a:	22 30       	cpi	r18, 0x02	; 2
    1b7c:	31 05       	cpc	r19, r1
    1b7e:	81 f0       	breq	.+32     	; 0x1ba0 <MDIO_Errorstate_SetPortDirection+0x74>
    1b80:	8c 81       	ldd	r24, Y+4	; 0x04
    1b82:	9d 81       	ldd	r25, Y+5	; 0x05
    1b84:	83 30       	cpi	r24, 0x03	; 3
    1b86:	91 05       	cpc	r25, r1
    1b88:	81 f0       	breq	.+32     	; 0x1baa <MDIO_Errorstate_SetPortDirection+0x7e>
    1b8a:	14 c0       	rjmp	.+40     	; 0x1bb4 <MDIO_Errorstate_SetPortDirection+0x88>
		{
		case MDIO_PORTA:
			DDRA=copy_uint8PortDirection;
    1b8c:	ea e3       	ldi	r30, 0x3A	; 58
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	8b 81       	ldd	r24, Y+3	; 0x03
    1b92:	80 83       	st	Z, r24
    1b94:	12 c0       	rjmp	.+36     	; 0x1bba <MDIO_Errorstate_SetPortDirection+0x8e>

			break;
		case MDIO_PORTB:
			DDRB=copy_uint8PortDirection;
    1b96:	e7 e3       	ldi	r30, 0x37	; 55
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9c:	80 83       	st	Z, r24
    1b9e:	0d c0       	rjmp	.+26     	; 0x1bba <MDIO_Errorstate_SetPortDirection+0x8e>
			break;
		case MDIO_PORTC:
			DDRC=copy_uint8PortDirection;
    1ba0:	e4 e3       	ldi	r30, 0x34	; 52
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	80 83       	st	Z, r24
    1ba8:	08 c0       	rjmp	.+16     	; 0x1bba <MDIO_Errorstate_SetPortDirection+0x8e>
			break;
		case MDIO_PORTD:
			DDRD=copy_uint8PortDirection;
    1baa:	e1 e3       	ldi	r30, 0x31	; 49
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb0:	80 83       	st	Z, r24
    1bb2:	03 c0       	rjmp	.+6      	; 0x1bba <MDIO_Errorstate_SetPortDirection+0x8e>
			break;
		default :
			loc_Errorstate_Error_state=NOK;
    1bb4:	19 82       	std	Y+1, r1	; 0x01
    1bb6:	01 c0       	rjmp	.+2      	; 0x1bba <MDIO_Errorstate_SetPortDirection+0x8e>
			break;
		}
	}
	else
	{
		loc_Errorstate_Error_state=NOK;
    1bb8:	19 82       	std	Y+1, r1	; 0x01
	}
	return loc_Errorstate_Error_state;
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bbc:	0f 90       	pop	r0
    1bbe:	0f 90       	pop	r0
    1bc0:	0f 90       	pop	r0
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	cf 91       	pop	r28
    1bc8:	df 91       	pop	r29
    1bca:	08 95       	ret

00001bcc <MDIO_Errorstate_SetPortValue>:

/*************** set port value ***********/
ErrorState MDIO_Errorstate_SetPortValue (uint8 copy_uint8PortID ,uint8 copy_uint8PortValue)
{
    1bcc:	df 93       	push	r29
    1bce:	cf 93       	push	r28
    1bd0:	00 d0       	rcall	.+0      	; 0x1bd2 <MDIO_Errorstate_SetPortValue+0x6>
    1bd2:	00 d0       	rcall	.+0      	; 0x1bd4 <MDIO_Errorstate_SetPortValue+0x8>
    1bd4:	0f 92       	push	r0
    1bd6:	cd b7       	in	r28, 0x3d	; 61
    1bd8:	de b7       	in	r29, 0x3e	; 62
    1bda:	8a 83       	std	Y+2, r24	; 0x02
    1bdc:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState loc_Errorstate_Error_state = OK;
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	89 83       	std	Y+1, r24	; 0x01

	if(copy_uint8PortValue<=PORT_HIGH)
	{
		switch(copy_uint8PortID)
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
    1be4:	28 2f       	mov	r18, r24
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	3d 83       	std	Y+5, r19	; 0x05
    1bea:	2c 83       	std	Y+4, r18	; 0x04
    1bec:	8c 81       	ldd	r24, Y+4	; 0x04
    1bee:	9d 81       	ldd	r25, Y+5	; 0x05
    1bf0:	81 30       	cpi	r24, 0x01	; 1
    1bf2:	91 05       	cpc	r25, r1
    1bf4:	d1 f0       	breq	.+52     	; 0x1c2a <MDIO_Errorstate_SetPortValue+0x5e>
    1bf6:	2c 81       	ldd	r18, Y+4	; 0x04
    1bf8:	3d 81       	ldd	r19, Y+5	; 0x05
    1bfa:	22 30       	cpi	r18, 0x02	; 2
    1bfc:	31 05       	cpc	r19, r1
    1bfe:	2c f4       	brge	.+10     	; 0x1c0a <MDIO_Errorstate_SetPortValue+0x3e>
    1c00:	8c 81       	ldd	r24, Y+4	; 0x04
    1c02:	9d 81       	ldd	r25, Y+5	; 0x05
    1c04:	00 97       	sbiw	r24, 0x00	; 0
    1c06:	61 f0       	breq	.+24     	; 0x1c20 <MDIO_Errorstate_SetPortValue+0x54>
    1c08:	1f c0       	rjmp	.+62     	; 0x1c48 <MDIO_Errorstate_SetPortValue+0x7c>
    1c0a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c0c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c0e:	22 30       	cpi	r18, 0x02	; 2
    1c10:	31 05       	cpc	r19, r1
    1c12:	81 f0       	breq	.+32     	; 0x1c34 <MDIO_Errorstate_SetPortValue+0x68>
    1c14:	8c 81       	ldd	r24, Y+4	; 0x04
    1c16:	9d 81       	ldd	r25, Y+5	; 0x05
    1c18:	83 30       	cpi	r24, 0x03	; 3
    1c1a:	91 05       	cpc	r25, r1
    1c1c:	81 f0       	breq	.+32     	; 0x1c3e <MDIO_Errorstate_SetPortValue+0x72>
    1c1e:	14 c0       	rjmp	.+40     	; 0x1c48 <MDIO_Errorstate_SetPortValue+0x7c>
		{
		case MDIO_PORTA:
			DDRA=copy_uint8PortValue;
    1c20:	ea e3       	ldi	r30, 0x3A	; 58
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	8b 81       	ldd	r24, Y+3	; 0x03
    1c26:	80 83       	st	Z, r24
    1c28:	10 c0       	rjmp	.+32     	; 0x1c4a <MDIO_Errorstate_SetPortValue+0x7e>

			break;
		case MDIO_PORTB:
			PORTB=copy_uint8PortValue;
    1c2a:	e8 e3       	ldi	r30, 0x38	; 56
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c30:	80 83       	st	Z, r24
    1c32:	0b c0       	rjmp	.+22     	; 0x1c4a <MDIO_Errorstate_SetPortValue+0x7e>
			break;
		case MDIO_PORTC:
			PORTC=copy_uint8PortValue;
    1c34:	e5 e3       	ldi	r30, 0x35	; 53
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	80 83       	st	Z, r24
    1c3c:	06 c0       	rjmp	.+12     	; 0x1c4a <MDIO_Errorstate_SetPortValue+0x7e>
			break;
		case MDIO_PORTD:
			PORTD=copy_uint8PortValue;
    1c3e:	e2 e3       	ldi	r30, 0x32	; 50
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	8b 81       	ldd	r24, Y+3	; 0x03
    1c44:	80 83       	st	Z, r24
    1c46:	01 c0       	rjmp	.+2      	; 0x1c4a <MDIO_Errorstate_SetPortValue+0x7e>
			break;
		default :
			loc_Errorstate_Error_state=NOK;
    1c48:	19 82       	std	Y+1, r1	; 0x01
	}
		else
		{
			loc_Errorstate_Error_state=NOK;
		}
		return loc_Errorstate_Error_state;
    1c4a:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	cf 91       	pop	r28
    1c58:	df 91       	pop	r29
    1c5a:	08 95       	ret

00001c5c <MDIO_Errorstate_Set4MostBits>:

ErrorState MDIO_Errorstate_Set4MostBits (uint8 copy_uint8PortID ,uint8 copy_uint8PortValue)
{
    1c5c:	df 93       	push	r29
    1c5e:	cf 93       	push	r28
    1c60:	00 d0       	rcall	.+0      	; 0x1c62 <MDIO_Errorstate_Set4MostBits+0x6>
    1c62:	00 d0       	rcall	.+0      	; 0x1c64 <MDIO_Errorstate_Set4MostBits+0x8>
    1c64:	0f 92       	push	r0
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
    1c6a:	8a 83       	std	Y+2, r24	; 0x02
    1c6c:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState Loc_Errorstate_Error_state = OK;
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_uint8PortID)
    1c72:	8a 81       	ldd	r24, Y+2	; 0x02
    1c74:	28 2f       	mov	r18, r24
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	3d 83       	std	Y+5, r19	; 0x05
    1c7a:	2c 83       	std	Y+4, r18	; 0x04
    1c7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c80:	81 30       	cpi	r24, 0x01	; 1
    1c82:	91 05       	cpc	r25, r1
    1c84:	29 f1       	breq	.+74     	; 0x1cd0 <MDIO_Errorstate_Set4MostBits+0x74>
    1c86:	2c 81       	ldd	r18, Y+4	; 0x04
    1c88:	3d 81       	ldd	r19, Y+5	; 0x05
    1c8a:	22 30       	cpi	r18, 0x02	; 2
    1c8c:	31 05       	cpc	r19, r1
    1c8e:	2c f4       	brge	.+10     	; 0x1c9a <MDIO_Errorstate_Set4MostBits+0x3e>
    1c90:	8c 81       	ldd	r24, Y+4	; 0x04
    1c92:	9d 81       	ldd	r25, Y+5	; 0x05
    1c94:	00 97       	sbiw	r24, 0x00	; 0
    1c96:	61 f0       	breq	.+24     	; 0x1cb0 <MDIO_Errorstate_Set4MostBits+0x54>
    1c98:	4b c0       	rjmp	.+150    	; 0x1d30 <MDIO_Errorstate_Set4MostBits+0xd4>
    1c9a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c9c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c9e:	22 30       	cpi	r18, 0x02	; 2
    1ca0:	31 05       	cpc	r19, r1
    1ca2:	31 f1       	breq	.+76     	; 0x1cf0 <MDIO_Errorstate_Set4MostBits+0x94>
    1ca4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca8:	83 30       	cpi	r24, 0x03	; 3
    1caa:	91 05       	cpc	r25, r1
    1cac:	89 f1       	breq	.+98     	; 0x1d10 <MDIO_Errorstate_Set4MostBits+0xb4>
    1cae:	40 c0       	rjmp	.+128    	; 0x1d30 <MDIO_Errorstate_Set4MostBits+0xd4>
			{
			case MDIO_PORTA:
				PORTA&=0x0F;
    1cb0:	ab e3       	ldi	r26, 0x3B	; 59
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	eb e3       	ldi	r30, 0x3B	; 59
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	8f 70       	andi	r24, 0x0F	; 15
    1cbc:	8c 93       	st	X, r24
				PORTA|=copy_uint8PortValue;
    1cbe:	ab e3       	ldi	r26, 0x3B	; 59
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	eb e3       	ldi	r30, 0x3B	; 59
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	90 81       	ld	r25, Z
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	89 2b       	or	r24, r25
    1ccc:	8c 93       	st	X, r24
    1cce:	31 c0       	rjmp	.+98     	; 0x1d32 <MDIO_Errorstate_Set4MostBits+0xd6>
				break;
			case MDIO_PORTB:
				PORTB&=0x0F;
    1cd0:	a8 e3       	ldi	r26, 0x38	; 56
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	e8 e3       	ldi	r30, 0x38	; 56
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	8f 70       	andi	r24, 0x0F	; 15
    1cdc:	8c 93       	st	X, r24
				PORTB|=copy_uint8PortValue;
    1cde:	a8 e3       	ldi	r26, 0x38	; 56
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	e8 e3       	ldi	r30, 0x38	; 56
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	90 81       	ld	r25, Z
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	89 2b       	or	r24, r25
    1cec:	8c 93       	st	X, r24
    1cee:	21 c0       	rjmp	.+66     	; 0x1d32 <MDIO_Errorstate_Set4MostBits+0xd6>
				break;
			case MDIO_PORTC:
				PORTC&=0x0F;
    1cf0:	a5 e3       	ldi	r26, 0x35	; 53
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	e5 e3       	ldi	r30, 0x35	; 53
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	8f 70       	andi	r24, 0x0F	; 15
    1cfc:	8c 93       	st	X, r24
				PORTC|=copy_uint8PortValue;
    1cfe:	a5 e3       	ldi	r26, 0x35	; 53
    1d00:	b0 e0       	ldi	r27, 0x00	; 0
    1d02:	e5 e3       	ldi	r30, 0x35	; 53
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	90 81       	ld	r25, Z
    1d08:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0a:	89 2b       	or	r24, r25
    1d0c:	8c 93       	st	X, r24
    1d0e:	11 c0       	rjmp	.+34     	; 0x1d32 <MDIO_Errorstate_Set4MostBits+0xd6>
				break;
			case MDIO_PORTD:
				PORTD&=0x0F;
    1d10:	a2 e3       	ldi	r26, 0x32	; 50
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	e2 e3       	ldi	r30, 0x32	; 50
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	8f 70       	andi	r24, 0x0F	; 15
    1d1c:	8c 93       	st	X, r24
				PORTD|=copy_uint8PortValue;
    1d1e:	a2 e3       	ldi	r26, 0x32	; 50
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	e2 e3       	ldi	r30, 0x32	; 50
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	90 81       	ld	r25, Z
    1d28:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2a:	89 2b       	or	r24, r25
    1d2c:	8c 93       	st	X, r24
    1d2e:	01 c0       	rjmp	.+2      	; 0x1d32 <MDIO_Errorstate_Set4MostBits+0xd6>
				break;
			default :
				Loc_Errorstate_Error_state=NOK;
    1d30:	19 82       	std	Y+1, r1	; 0x01
				break;
			}
	return Loc_Errorstate_Error_state;
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
    1d3a:	0f 90       	pop	r0
    1d3c:	0f 90       	pop	r0
    1d3e:	cf 91       	pop	r28
    1d40:	df 91       	pop	r29
    1d42:	08 95       	ret

00001d44 <MADC_VidSingleConversion_Init>:
#include"MADC_Config.h"

void (*MADC_CALLBACK)(void);

void MADC_VidSingleConversion_Init(void)
{
    1d44:	df 93       	push	r29
    1d46:	cf 93       	push	r28
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
	/* 1-Select Reference Volt*/
#if MADC_SET_REFERENCVOLT == MADC_Vref_AVCC
	SET_BIT(ADMUX,6);
    1d4c:	a7 e2       	ldi	r26, 0x27	; 39
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	e7 e2       	ldi	r30, 0x27	; 39
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	80 81       	ld	r24, Z
    1d56:	80 64       	ori	r24, 0x40	; 64
    1d58:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,7);
    1d5a:	a7 e2       	ldi	r26, 0x27	; 39
    1d5c:	b0 e0       	ldi	r27, 0x00	; 0
    1d5e:	e7 e2       	ldi	r30, 0x27	; 39
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	8f 77       	andi	r24, 0x7F	; 127
    1d66:	8c 93       	st	X, r24
#else
#error"Reference Volt Option Is Not Valid.."
#endif
	/* 2-Select Left Or Right Adjustment Result*/
#if MADC_SET_ADJUSTRESULT==MADC_RIGHT_ADJUST
	CLR_BIT(ADMUX,5);
    1d68:	a7 e2       	ldi	r26, 0x27	; 39
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	e7 e2       	ldi	r30, 0x27	; 39
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	8f 7d       	andi	r24, 0xDF	; 223
    1d74:	8c 93       	st	X, r24
	SET_BIT(ADMUX,5);
#else
	#error"Adjustment Result Is Not Valid.. "
#endif
	/*  3-Select ADC PreScaler*/
	ADCSRA&=0xF8;
    1d76:	a6 e2       	ldi	r26, 0x26	; 38
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	e6 e2       	ldi	r30, 0x26	; 38
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	88 7f       	andi	r24, 0xF8	; 248
    1d82:	8c 93       	st	X, r24
	ADCSRA|=ADC_SET_PRESCALER;
    1d84:	a6 e2       	ldi	r26, 0x26	; 38
    1d86:	b0 e0       	ldi	r27, 0x00	; 0
    1d88:	e6 e2       	ldi	r30, 0x26	; 38
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	87 60       	ori	r24, 0x07	; 7
    1d90:	8c 93       	st	X, r24
	 /* 4-Enable ADC peripheral*/
	SET_BIT(ADCSRA,7);
    1d92:	a6 e2       	ldi	r26, 0x26	; 38
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	e6 e2       	ldi	r30, 0x26	; 38
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	80 68       	ori	r24, 0x80	; 128
    1d9e:	8c 93       	st	X, r24
}
    1da0:	cf 91       	pop	r28
    1da2:	df 91       	pop	r29
    1da4:	08 95       	ret

00001da6 <MADC_VidAutoTrigger_Init>:

void MADC_VidAutoTrigger_Init(void)
{
    1da6:	df 93       	push	r29
    1da8:	cf 93       	push	r28
    1daa:	cd b7       	in	r28, 0x3d	; 61
    1dac:	de b7       	in	r29, 0x3e	; 62
	/*1-Auto trigger Enable*/
	SET_BIT(ADCSRA,5);
    1dae:	a6 e2       	ldi	r26, 0x26	; 38
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	e6 e2       	ldi	r30, 0x26	; 38
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	80 62       	ori	r24, 0x20	; 32
    1dba:	8c 93       	st	X, r24
	 /*2-ADC_Auto_Trigger_Source*/
#if MADC_SET_AUTO_TRIGGER_SOURCE ==MADC_FREERUNNING

	 SFIOR&=0x1F;
    1dbc:	a0 e5       	ldi	r26, 0x50	; 80
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	e0 e5       	ldi	r30, 0x50	; 80
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	8f 71       	andi	r24, 0x1F	; 31
    1dc8:	8c 93       	st	X, r24
	SFIOR|=MADC_FREERUNNING;
    1dca:	a0 e5       	ldi	r26, 0x50	; 80
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	e0 e5       	ldi	r30, 0x50	; 80
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	8c 93       	st	X, r24
#else
#error "Auto Trigger Source Is Not Valid.."
#endif
}
    1dd6:	cf 91       	pop	r28
    1dd8:	df 91       	pop	r29
    1dda:	08 95       	ret

00001ddc <MADC_VidInterrupt_Enable>:

void MADC_VidInterrupt_Enable(void)
{
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
 /* 1-Set ADC Interrupt Enable */
	SET_BIT(ADCSRA,3);
    1de4:	a6 e2       	ldi	r26, 0x26	; 38
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	e6 e2       	ldi	r30, 0x26	; 38
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	88 60       	ori	r24, 0x08	; 8
    1df0:	8c 93       	st	X, r24
}
    1df2:	cf 91       	pop	r28
    1df4:	df 91       	pop	r29
    1df6:	08 95       	ret

00001df8 <MADC_VidADCStartSingleConversion>:

void MADC_VidADCStartSingleConversion(uint8 copy_uint8Channel)
{
    1df8:	df 93       	push	r29
    1dfa:	cf 93       	push	r28
    1dfc:	0f 92       	push	r0
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	89 83       	std	Y+1, r24	; 0x01
	/*1-Select Analog Channels
	 * single Ended or Differential */
#if MADC_SET_ANALOGCHANNEL ==  MADC_SINGLEENDED_CHANNEL
	ADMUX&=0xE0;
    1e04:	a7 e2       	ldi	r26, 0x27	; 39
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	e7 e2       	ldi	r30, 0x27	; 39
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	80 7e       	andi	r24, 0xE0	; 224
    1e10:	8c 93       	st	X, r24
	ADMUX|=copy_uint8Channel;
    1e12:	a7 e2       	ldi	r26, 0x27	; 39
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	e7 e2       	ldi	r30, 0x27	; 39
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	90 81       	ld	r25, Z
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
    1e1e:	89 2b       	or	r24, r25
    1e20:	8c 93       	st	X, r24
#else
#error "Analog Channel Is Not Valid.."
#endif
	/* 2-Start Conversion*/
	SET_BIT(ADCSRA,6);
    1e22:	a6 e2       	ldi	r26, 0x26	; 38
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	e6 e2       	ldi	r30, 0x26	; 38
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	80 64       	ori	r24, 0x40	; 64
    1e2e:	8c 93       	st	X, r24
	/*wait until flag is set to 1*/
	while(GET_BIT(ADCSRA,4)==0);
    1e30:	e6 e2       	ldi	r30, 0x26	; 38
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	82 95       	swap	r24
    1e38:	8f 70       	andi	r24, 0x0F	; 15
    1e3a:	88 2f       	mov	r24, r24
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	81 70       	andi	r24, 0x01	; 1
    1e40:	90 70       	andi	r25, 0x00	; 0
    1e42:	00 97       	sbiw	r24, 0x00	; 0
    1e44:	a9 f3       	breq	.-22     	; 0x1e30 <MADC_VidADCStartSingleConversion+0x38>
}
    1e46:	0f 90       	pop	r0
    1e48:	cf 91       	pop	r28
    1e4a:	df 91       	pop	r29
    1e4c:	08 95       	ret

00001e4e <MADC_VidADCStartSingleConversion_With_Interrupt>:
void MADC_VidADCStartSingleConversion_With_Interrupt(uint8 copy_uint8Channel)
{
    1e4e:	df 93       	push	r29
    1e50:	cf 93       	push	r28
    1e52:	0f 92       	push	r0
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62
    1e58:	89 83       	std	Y+1, r24	; 0x01
#if MADC_SET_ANALOGCHANNEL == MADC_SINGLEENDED_CHANNEL
	ADMUX&=0xE0;
    1e5a:	a7 e2       	ldi	r26, 0x27	; 39
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	e7 e2       	ldi	r30, 0x27	; 39
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	80 7e       	andi	r24, 0xE0	; 224
    1e66:	8c 93       	st	X, r24
	ADMUX|=copy_uint8Channel;
    1e68:	a7 e2       	ldi	r26, 0x27	; 39
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	e7 e2       	ldi	r30, 0x27	; 39
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	90 81       	ld	r25, Z
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
    1e74:	89 2b       	or	r24, r25
    1e76:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,6);
    1e78:	a6 e2       	ldi	r26, 0x26	; 38
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	e6 e2       	ldi	r30, 0x26	; 38
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	80 81       	ld	r24, Z
    1e82:	80 64       	ori	r24, 0x40	; 64
    1e84:	8c 93       	st	X, r24
#else
	#error "Analog Channel Is Not Valid .."
#endif
}
    1e86:	0f 90       	pop	r0
    1e88:	cf 91       	pop	r28
    1e8a:	df 91       	pop	r29
    1e8c:	08 95       	ret

00001e8e <MADC_uint16Read>:

uint16 MADC_uint16Read(void)
{
    1e8e:	df 93       	push	r29
    1e90:	cf 93       	push	r28
    1e92:	00 d0       	rcall	.+0      	; 0x1e94 <MADC_uint16Read+0x6>
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
	uint16 ADC;
	/*1- right adjust*/
#if MADC_SET_ADJUSTRESULT==MADC_RIGHT_ADJUST
	ADC=ADCL;
    1e98:	e4 e2       	ldi	r30, 0x24	; 36
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	80 81       	ld	r24, Z
    1e9e:	88 2f       	mov	r24, r24
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	9a 83       	std	Y+2, r25	; 0x02
    1ea4:	89 83       	std	Y+1, r24	; 0x01
	ADC|=ADCH<<8;
    1ea6:	e5 e2       	ldi	r30, 0x25	; 37
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	88 2f       	mov	r24, r24
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	98 2f       	mov	r25, r24
    1eb2:	88 27       	eor	r24, r24
    1eb4:	9c 01       	movw	r18, r24
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eba:	82 2b       	or	r24, r18
    1ebc:	93 2b       	or	r25, r19
    1ebe:	9a 83       	std	Y+2, r25	; 0x02
    1ec0:	89 83       	std	Y+1, r24	; 0x01
#elif ADC_SET_ADJUSTRESULT==MADC_LEFT_ADJUST
	ADC=ADCH;
 #else
	#error"ADC Read Is Not Valid .."
#endif
	return ADC;
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	9a 81       	ldd	r25, Y+2	; 0x02

}
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	cf 91       	pop	r28
    1ecc:	df 91       	pop	r29
    1ece:	08 95       	ret

00001ed0 <MADC_SetCallBack>:
void MADC_SetCallBack(void(*PtrToFun)(void))
{
    1ed0:	df 93       	push	r29
    1ed2:	cf 93       	push	r28
    1ed4:	00 d0       	rcall	.+0      	; 0x1ed6 <MADC_SetCallBack+0x6>
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
    1eda:	9a 83       	std	Y+2, r25	; 0x02
    1edc:	89 83       	std	Y+1, r24	; 0x01
	MADC_CALLBACK=PtrToFun;
    1ede:	89 81       	ldd	r24, Y+1	; 0x01
    1ee0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee2:	90 93 a2 00 	sts	0x00A2, r25
    1ee6:	80 93 a1 00 	sts	0x00A1, r24
}
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	cf 91       	pop	r28
    1ef0:	df 91       	pop	r29
    1ef2:	08 95       	ret

00001ef4 <__vector_16>:
void __vector_16(void)  __attribute__((signal));
void __vector_16(void)
{
    1ef4:	1f 92       	push	r1
    1ef6:	0f 92       	push	r0
    1ef8:	0f b6       	in	r0, 0x3f	; 63
    1efa:	0f 92       	push	r0
    1efc:	11 24       	eor	r1, r1
    1efe:	2f 93       	push	r18
    1f00:	3f 93       	push	r19
    1f02:	4f 93       	push	r20
    1f04:	5f 93       	push	r21
    1f06:	6f 93       	push	r22
    1f08:	7f 93       	push	r23
    1f0a:	8f 93       	push	r24
    1f0c:	9f 93       	push	r25
    1f0e:	af 93       	push	r26
    1f10:	bf 93       	push	r27
    1f12:	ef 93       	push	r30
    1f14:	ff 93       	push	r31
    1f16:	df 93       	push	r29
    1f18:	cf 93       	push	r28
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62
	MADC_CALLBACK();
    1f1e:	e0 91 a1 00 	lds	r30, 0x00A1
    1f22:	f0 91 a2 00 	lds	r31, 0x00A2
    1f26:	09 95       	icall
}
    1f28:	cf 91       	pop	r28
    1f2a:	df 91       	pop	r29
    1f2c:	ff 91       	pop	r31
    1f2e:	ef 91       	pop	r30
    1f30:	bf 91       	pop	r27
    1f32:	af 91       	pop	r26
    1f34:	9f 91       	pop	r25
    1f36:	8f 91       	pop	r24
    1f38:	7f 91       	pop	r23
    1f3a:	6f 91       	pop	r22
    1f3c:	5f 91       	pop	r21
    1f3e:	4f 91       	pop	r20
    1f40:	3f 91       	pop	r19
    1f42:	2f 91       	pop	r18
    1f44:	0f 90       	pop	r0
    1f46:	0f be       	out	0x3f, r0	; 63
    1f48:	0f 90       	pop	r0
    1f4a:	1f 90       	pop	r1
    1f4c:	18 95       	reti

00001f4e <HStepper_Init>:
#include "../HSTEPPER/HStepper_Config.h"
#include "../HSTEPPER/HStepper_Interface.h"
#define F_CPU 16000000UL
#include<util/delay.h>
void HStepper_Init(void)
{
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62
	MDIO_Errorstate_SetPinDirection(STEPPER_PORT,STEPPER_COIL1,PIN_OUTPUT);
    1f56:	82 e0       	ldi	r24, 0x02	; 2
    1f58:	63 e0       	ldi	r22, 0x03	; 3
    1f5a:	41 e0       	ldi	r20, 0x01	; 1
    1f5c:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(STEPPER_PORT,STEPPER_COIL2,PIN_OUTPUT);
    1f60:	82 e0       	ldi	r24, 0x02	; 2
    1f62:	64 e0       	ldi	r22, 0x04	; 4
    1f64:	41 e0       	ldi	r20, 0x01	; 1
    1f66:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(STEPPER_PORT,STEPPER_COIL3,PIN_OUTPUT);
    1f6a:	82 e0       	ldi	r24, 0x02	; 2
    1f6c:	65 e0       	ldi	r22, 0x05	; 5
    1f6e:	41 e0       	ldi	r20, 0x01	; 1
    1f70:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(STEPPER_PORT,STEPPER_COIL4,PIN_OUTPUT);
    1f74:	82 e0       	ldi	r24, 0x02	; 2
    1f76:	66 e0       	ldi	r22, 0x06	; 6
    1f78:	41 e0       	ldi	r20, 0x01	; 1
    1f7a:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <MDIO_Errorstate_SetPinDirection>
}
    1f7e:	cf 91       	pop	r28
    1f80:	df 91       	pop	r29
    1f82:	08 95       	ret

00001f84 <HStepper_SetStepsDirection>:
void HStepper_SetStepsDirection(uint16 copy_uint16Steps,uint8 copy_uint8Direction)
{
    1f84:	0f 93       	push	r16
    1f86:	1f 93       	push	r17
    1f88:	df 93       	push	r29
    1f8a:	cf 93       	push	r28
    1f8c:	cd b7       	in	r28, 0x3d	; 61
    1f8e:	de b7       	in	r29, 0x3e	; 62
    1f90:	c9 57       	subi	r28, 0x79	; 121
    1f92:	d0 40       	sbci	r29, 0x00	; 0
    1f94:	0f b6       	in	r0, 0x3f	; 63
    1f96:	f8 94       	cli
    1f98:	de bf       	out	0x3e, r29	; 62
    1f9a:	0f be       	out	0x3f, r0	; 63
    1f9c:	cd bf       	out	0x3d, r28	; 61
    1f9e:	fe 01       	movw	r30, r28
    1fa0:	eb 58       	subi	r30, 0x8B	; 139
    1fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa4:	91 83       	std	Z+1, r25	; 0x01
    1fa6:	80 83       	st	Z, r24
    1fa8:	fe 01       	movw	r30, r28
    1faa:	e9 58       	subi	r30, 0x89	; 137
    1fac:	ff 4f       	sbci	r31, 0xFF	; 255
    1fae:	60 83       	st	Z, r22
	switch(copy_uint8Direction)
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	e9 58       	subi	r30, 0x89	; 137
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	80 81       	ld	r24, Z
    1fb8:	28 2f       	mov	r18, r24
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	ea 96       	adiw	r28, 0x3a	; 58
    1fbe:	3f af       	std	Y+63, r19	; 0x3f
    1fc0:	2e af       	std	Y+62, r18	; 0x3e
    1fc2:	ea 97       	sbiw	r28, 0x3a	; 58
    1fc4:	ea 96       	adiw	r28, 0x3a	; 58
    1fc6:	8e ad       	ldd	r24, Y+62	; 0x3e
    1fc8:	9f ad       	ldd	r25, Y+63	; 0x3f
    1fca:	ea 97       	sbiw	r28, 0x3a	; 58
    1fcc:	00 97       	sbiw	r24, 0x00	; 0
    1fce:	49 f0       	breq	.+18     	; 0x1fe2 <HStepper_SetStepsDirection+0x5e>
    1fd0:	ea 96       	adiw	r28, 0x3a	; 58
    1fd2:	ee ad       	ldd	r30, Y+62	; 0x3e
    1fd4:	ff ad       	ldd	r31, Y+63	; 0x3f
    1fd6:	ea 97       	sbiw	r28, 0x3a	; 58
    1fd8:	e1 30       	cpi	r30, 0x01	; 1
    1fda:	f1 05       	cpc	r31, r1
    1fdc:	09 f4       	brne	.+2      	; 0x1fe0 <HStepper_SetStepsDirection+0x5c>
    1fde:	10 c3       	rjmp	.+1568   	; 0x2600 <HStepper_SetStepsDirection+0x67c>
    1fe0:	47 c5       	rjmp	.+2702   	; 0x2a70 <HStepper_SetStepsDirection+0xaec>
		{
	                         /*clock wise */
		     case CW:
			for(uint16 i=0 ;i<copy_uint16Steps;i++)
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	ed 58       	subi	r30, 0x8D	; 141
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	11 82       	std	Z+1, r1	; 0x01
    1fea:	10 82       	st	Z, r1
    1fec:	f9 c2       	rjmp	.+1522   	; 0x25e0 <HStepper_SetStepsDirection+0x65c>
					{
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_LOW);
    1fee:	82 e0       	ldi	r24, 0x02	; 2
    1ff0:	63 e0       	ldi	r22, 0x03	; 3
    1ff2:	40 e0       	ldi	r20, 0x00	; 0
    1ff4:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_HIGH);
    1ff8:	82 e0       	ldi	r24, 0x02	; 2
    1ffa:	64 e0       	ldi	r22, 0x04	; 4
    1ffc:	41 e0       	ldi	r20, 0x01	; 1
    1ffe:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_HIGH);
    2002:	82 e0       	ldi	r24, 0x02	; 2
    2004:	65 e0       	ldi	r22, 0x05	; 5
    2006:	41 e0       	ldi	r20, 0x01	; 1
    2008:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_HIGH);
    200c:	82 e0       	ldi	r24, 0x02	; 2
    200e:	66 e0       	ldi	r22, 0x06	; 6
    2010:	41 e0       	ldi	r20, 0x01	; 1
    2012:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
    2016:	fe 01       	movw	r30, r28
    2018:	e3 59       	subi	r30, 0x93	; 147
    201a:	ff 4f       	sbci	r31, 0xFF	; 255
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	a0 ee       	ldi	r26, 0xE0	; 224
    2022:	b0 e4       	ldi	r27, 0x40	; 64
    2024:	80 83       	st	Z, r24
    2026:	91 83       	std	Z+1, r25	; 0x01
    2028:	a2 83       	std	Z+2, r26	; 0x02
    202a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    202c:	8e 01       	movw	r16, r28
    202e:	07 59       	subi	r16, 0x97	; 151
    2030:	1f 4f       	sbci	r17, 0xFF	; 255
    2032:	fe 01       	movw	r30, r28
    2034:	e3 59       	subi	r30, 0x93	; 147
    2036:	ff 4f       	sbci	r31, 0xFF	; 255
    2038:	60 81       	ld	r22, Z
    203a:	71 81       	ldd	r23, Z+1	; 0x01
    203c:	82 81       	ldd	r24, Z+2	; 0x02
    203e:	93 81       	ldd	r25, Z+3	; 0x03
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	4a e7       	ldi	r20, 0x7A	; 122
    2046:	55 e4       	ldi	r21, 0x45	; 69
    2048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	f8 01       	movw	r30, r16
    2052:	80 83       	st	Z, r24
    2054:	91 83       	std	Z+1, r25	; 0x01
    2056:	a2 83       	std	Z+2, r26	; 0x02
    2058:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    205a:	fe 01       	movw	r30, r28
    205c:	e7 59       	subi	r30, 0x97	; 151
    205e:	ff 4f       	sbci	r31, 0xFF	; 255
    2060:	60 81       	ld	r22, Z
    2062:	71 81       	ldd	r23, Z+1	; 0x01
    2064:	82 81       	ldd	r24, Z+2	; 0x02
    2066:	93 81       	ldd	r25, Z+3	; 0x03
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	40 e8       	ldi	r20, 0x80	; 128
    206e:	5f e3       	ldi	r21, 0x3F	; 63
    2070:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2074:	88 23       	and	r24, r24
    2076:	44 f4       	brge	.+16     	; 0x2088 <HStepper_SetStepsDirection+0x104>
		__ticks = 1;
    2078:	fe 01       	movw	r30, r28
    207a:	e9 59       	subi	r30, 0x99	; 153
    207c:	ff 4f       	sbci	r31, 0xFF	; 255
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	91 83       	std	Z+1, r25	; 0x01
    2084:	80 83       	st	Z, r24
    2086:	64 c0       	rjmp	.+200    	; 0x2150 <HStepper_SetStepsDirection+0x1cc>
	else if (__tmp > 65535)
    2088:	fe 01       	movw	r30, r28
    208a:	e7 59       	subi	r30, 0x97	; 151
    208c:	ff 4f       	sbci	r31, 0xFF	; 255
    208e:	60 81       	ld	r22, Z
    2090:	71 81       	ldd	r23, Z+1	; 0x01
    2092:	82 81       	ldd	r24, Z+2	; 0x02
    2094:	93 81       	ldd	r25, Z+3	; 0x03
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	3f ef       	ldi	r19, 0xFF	; 255
    209a:	4f e7       	ldi	r20, 0x7F	; 127
    209c:	57 e4       	ldi	r21, 0x47	; 71
    209e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20a2:	18 16       	cp	r1, r24
    20a4:	0c f0       	brlt	.+2      	; 0x20a8 <HStepper_SetStepsDirection+0x124>
    20a6:	43 c0       	rjmp	.+134    	; 0x212e <HStepper_SetStepsDirection+0x1aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a8:	fe 01       	movw	r30, r28
    20aa:	e3 59       	subi	r30, 0x93	; 147
    20ac:	ff 4f       	sbci	r31, 0xFF	; 255
    20ae:	60 81       	ld	r22, Z
    20b0:	71 81       	ldd	r23, Z+1	; 0x01
    20b2:	82 81       	ldd	r24, Z+2	; 0x02
    20b4:	93 81       	ldd	r25, Z+3	; 0x03
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	40 e2       	ldi	r20, 0x20	; 32
    20bc:	51 e4       	ldi	r21, 0x41	; 65
    20be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	8e 01       	movw	r16, r28
    20c8:	09 59       	subi	r16, 0x99	; 153
    20ca:	1f 4f       	sbci	r17, 0xFF	; 255
    20cc:	bc 01       	movw	r22, r24
    20ce:	cd 01       	movw	r24, r26
    20d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	f8 01       	movw	r30, r16
    20da:	91 83       	std	Z+1, r25	; 0x01
    20dc:	80 83       	st	Z, r24
    20de:	1f c0       	rjmp	.+62     	; 0x211e <HStepper_SetStepsDirection+0x19a>
    20e0:	fe 01       	movw	r30, r28
    20e2:	eb 59       	subi	r30, 0x9B	; 155
    20e4:	ff 4f       	sbci	r31, 0xFF	; 255
    20e6:	80 e9       	ldi	r24, 0x90	; 144
    20e8:	91 e0       	ldi	r25, 0x01	; 1
    20ea:	91 83       	std	Z+1, r25	; 0x01
    20ec:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20ee:	fe 01       	movw	r30, r28
    20f0:	eb 59       	subi	r30, 0x9B	; 155
    20f2:	ff 4f       	sbci	r31, 0xFF	; 255
    20f4:	80 81       	ld	r24, Z
    20f6:	91 81       	ldd	r25, Z+1	; 0x01
    20f8:	01 97       	sbiw	r24, 0x01	; 1
    20fa:	f1 f7       	brne	.-4      	; 0x20f8 <HStepper_SetStepsDirection+0x174>
    20fc:	fe 01       	movw	r30, r28
    20fe:	eb 59       	subi	r30, 0x9B	; 155
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	91 83       	std	Z+1, r25	; 0x01
    2104:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2106:	de 01       	movw	r26, r28
    2108:	a9 59       	subi	r26, 0x99	; 153
    210a:	bf 4f       	sbci	r27, 0xFF	; 255
    210c:	fe 01       	movw	r30, r28
    210e:	e9 59       	subi	r30, 0x99	; 153
    2110:	ff 4f       	sbci	r31, 0xFF	; 255
    2112:	80 81       	ld	r24, Z
    2114:	91 81       	ldd	r25, Z+1	; 0x01
    2116:	01 97       	sbiw	r24, 0x01	; 1
    2118:	11 96       	adiw	r26, 0x01	; 1
    211a:	9c 93       	st	X, r25
    211c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211e:	fe 01       	movw	r30, r28
    2120:	e9 59       	subi	r30, 0x99	; 153
    2122:	ff 4f       	sbci	r31, 0xFF	; 255
    2124:	80 81       	ld	r24, Z
    2126:	91 81       	ldd	r25, Z+1	; 0x01
    2128:	00 97       	sbiw	r24, 0x00	; 0
    212a:	d1 f6       	brne	.-76     	; 0x20e0 <HStepper_SetStepsDirection+0x15c>
    212c:	27 c0       	rjmp	.+78     	; 0x217c <HStepper_SetStepsDirection+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    212e:	8e 01       	movw	r16, r28
    2130:	09 59       	subi	r16, 0x99	; 153
    2132:	1f 4f       	sbci	r17, 0xFF	; 255
    2134:	fe 01       	movw	r30, r28
    2136:	e7 59       	subi	r30, 0x97	; 151
    2138:	ff 4f       	sbci	r31, 0xFF	; 255
    213a:	60 81       	ld	r22, Z
    213c:	71 81       	ldd	r23, Z+1	; 0x01
    213e:	82 81       	ldd	r24, Z+2	; 0x02
    2140:	93 81       	ldd	r25, Z+3	; 0x03
    2142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	f8 01       	movw	r30, r16
    214c:	91 83       	std	Z+1, r25	; 0x01
    214e:	80 83       	st	Z, r24
    2150:	de 01       	movw	r26, r28
    2152:	ad 59       	subi	r26, 0x9D	; 157
    2154:	bf 4f       	sbci	r27, 0xFF	; 255
    2156:	fe 01       	movw	r30, r28
    2158:	e9 59       	subi	r30, 0x99	; 153
    215a:	ff 4f       	sbci	r31, 0xFF	; 255
    215c:	80 81       	ld	r24, Z
    215e:	91 81       	ldd	r25, Z+1	; 0x01
    2160:	8d 93       	st	X+, r24
    2162:	9c 93       	st	X, r25
    2164:	fe 01       	movw	r30, r28
    2166:	ed 59       	subi	r30, 0x9D	; 157
    2168:	ff 4f       	sbci	r31, 0xFF	; 255
    216a:	80 81       	ld	r24, Z
    216c:	91 81       	ldd	r25, Z+1	; 0x01
    216e:	01 97       	sbiw	r24, 0x01	; 1
    2170:	f1 f7       	brne	.-4      	; 0x216e <HStepper_SetStepsDirection+0x1ea>
    2172:	fe 01       	movw	r30, r28
    2174:	ed 59       	subi	r30, 0x9D	; 157
    2176:	ff 4f       	sbci	r31, 0xFF	; 255
    2178:	91 83       	std	Z+1, r25	; 0x01
    217a:	80 83       	st	Z, r24
					_delay_ms(MAX_SPEED_DELAY);

					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_HIGH);
    217c:	82 e0       	ldi	r24, 0x02	; 2
    217e:	63 e0       	ldi	r22, 0x03	; 3
    2180:	41 e0       	ldi	r20, 0x01	; 1
    2182:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_LOW);
    2186:	82 e0       	ldi	r24, 0x02	; 2
    2188:	64 e0       	ldi	r22, 0x04	; 4
    218a:	40 e0       	ldi	r20, 0x00	; 0
    218c:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_HIGH);
    2190:	82 e0       	ldi	r24, 0x02	; 2
    2192:	65 e0       	ldi	r22, 0x05	; 5
    2194:	41 e0       	ldi	r20, 0x01	; 1
    2196:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_HIGH);
    219a:	82 e0       	ldi	r24, 0x02	; 2
    219c:	66 e0       	ldi	r22, 0x06	; 6
    219e:	41 e0       	ldi	r20, 0x01	; 1
    21a0:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
    21a4:	fe 01       	movw	r30, r28
    21a6:	e1 5a       	subi	r30, 0xA1	; 161
    21a8:	ff 4f       	sbci	r31, 0xFF	; 255
    21aa:	80 e0       	ldi	r24, 0x00	; 0
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	a0 ee       	ldi	r26, 0xE0	; 224
    21b0:	b0 e4       	ldi	r27, 0x40	; 64
    21b2:	80 83       	st	Z, r24
    21b4:	91 83       	std	Z+1, r25	; 0x01
    21b6:	a2 83       	std	Z+2, r26	; 0x02
    21b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ba:	8e 01       	movw	r16, r28
    21bc:	05 5a       	subi	r16, 0xA5	; 165
    21be:	1f 4f       	sbci	r17, 0xFF	; 255
    21c0:	fe 01       	movw	r30, r28
    21c2:	e1 5a       	subi	r30, 0xA1	; 161
    21c4:	ff 4f       	sbci	r31, 0xFF	; 255
    21c6:	60 81       	ld	r22, Z
    21c8:	71 81       	ldd	r23, Z+1	; 0x01
    21ca:	82 81       	ldd	r24, Z+2	; 0x02
    21cc:	93 81       	ldd	r25, Z+3	; 0x03
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	4a e7       	ldi	r20, 0x7A	; 122
    21d4:	55 e4       	ldi	r21, 0x45	; 69
    21d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	f8 01       	movw	r30, r16
    21e0:	80 83       	st	Z, r24
    21e2:	91 83       	std	Z+1, r25	; 0x01
    21e4:	a2 83       	std	Z+2, r26	; 0x02
    21e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21e8:	fe 01       	movw	r30, r28
    21ea:	e5 5a       	subi	r30, 0xA5	; 165
    21ec:	ff 4f       	sbci	r31, 0xFF	; 255
    21ee:	60 81       	ld	r22, Z
    21f0:	71 81       	ldd	r23, Z+1	; 0x01
    21f2:	82 81       	ldd	r24, Z+2	; 0x02
    21f4:	93 81       	ldd	r25, Z+3	; 0x03
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	40 e8       	ldi	r20, 0x80	; 128
    21fc:	5f e3       	ldi	r21, 0x3F	; 63
    21fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2202:	88 23       	and	r24, r24
    2204:	44 f4       	brge	.+16     	; 0x2216 <HStepper_SetStepsDirection+0x292>
		__ticks = 1;
    2206:	fe 01       	movw	r30, r28
    2208:	e7 5a       	subi	r30, 0xA7	; 167
    220a:	ff 4f       	sbci	r31, 0xFF	; 255
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	91 83       	std	Z+1, r25	; 0x01
    2212:	80 83       	st	Z, r24
    2214:	64 c0       	rjmp	.+200    	; 0x22de <HStepper_SetStepsDirection+0x35a>
	else if (__tmp > 65535)
    2216:	fe 01       	movw	r30, r28
    2218:	e5 5a       	subi	r30, 0xA5	; 165
    221a:	ff 4f       	sbci	r31, 0xFF	; 255
    221c:	60 81       	ld	r22, Z
    221e:	71 81       	ldd	r23, Z+1	; 0x01
    2220:	82 81       	ldd	r24, Z+2	; 0x02
    2222:	93 81       	ldd	r25, Z+3	; 0x03
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	3f ef       	ldi	r19, 0xFF	; 255
    2228:	4f e7       	ldi	r20, 0x7F	; 127
    222a:	57 e4       	ldi	r21, 0x47	; 71
    222c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2230:	18 16       	cp	r1, r24
    2232:	0c f0       	brlt	.+2      	; 0x2236 <HStepper_SetStepsDirection+0x2b2>
    2234:	43 c0       	rjmp	.+134    	; 0x22bc <HStepper_SetStepsDirection+0x338>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2236:	fe 01       	movw	r30, r28
    2238:	e1 5a       	subi	r30, 0xA1	; 161
    223a:	ff 4f       	sbci	r31, 0xFF	; 255
    223c:	60 81       	ld	r22, Z
    223e:	71 81       	ldd	r23, Z+1	; 0x01
    2240:	82 81       	ldd	r24, Z+2	; 0x02
    2242:	93 81       	ldd	r25, Z+3	; 0x03
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	40 e2       	ldi	r20, 0x20	; 32
    224a:	51 e4       	ldi	r21, 0x41	; 65
    224c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	8e 01       	movw	r16, r28
    2256:	07 5a       	subi	r16, 0xA7	; 167
    2258:	1f 4f       	sbci	r17, 0xFF	; 255
    225a:	bc 01       	movw	r22, r24
    225c:	cd 01       	movw	r24, r26
    225e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	f8 01       	movw	r30, r16
    2268:	91 83       	std	Z+1, r25	; 0x01
    226a:	80 83       	st	Z, r24
    226c:	1f c0       	rjmp	.+62     	; 0x22ac <HStepper_SetStepsDirection+0x328>
    226e:	fe 01       	movw	r30, r28
    2270:	e9 5a       	subi	r30, 0xA9	; 169
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	80 e9       	ldi	r24, 0x90	; 144
    2276:	91 e0       	ldi	r25, 0x01	; 1
    2278:	91 83       	std	Z+1, r25	; 0x01
    227a:	80 83       	st	Z, r24
    227c:	fe 01       	movw	r30, r28
    227e:	e9 5a       	subi	r30, 0xA9	; 169
    2280:	ff 4f       	sbci	r31, 0xFF	; 255
    2282:	80 81       	ld	r24, Z
    2284:	91 81       	ldd	r25, Z+1	; 0x01
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	f1 f7       	brne	.-4      	; 0x2286 <HStepper_SetStepsDirection+0x302>
    228a:	fe 01       	movw	r30, r28
    228c:	e9 5a       	subi	r30, 0xA9	; 169
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	91 83       	std	Z+1, r25	; 0x01
    2292:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2294:	de 01       	movw	r26, r28
    2296:	a7 5a       	subi	r26, 0xA7	; 167
    2298:	bf 4f       	sbci	r27, 0xFF	; 255
    229a:	fe 01       	movw	r30, r28
    229c:	e7 5a       	subi	r30, 0xA7	; 167
    229e:	ff 4f       	sbci	r31, 0xFF	; 255
    22a0:	80 81       	ld	r24, Z
    22a2:	91 81       	ldd	r25, Z+1	; 0x01
    22a4:	01 97       	sbiw	r24, 0x01	; 1
    22a6:	11 96       	adiw	r26, 0x01	; 1
    22a8:	9c 93       	st	X, r25
    22aa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ac:	fe 01       	movw	r30, r28
    22ae:	e7 5a       	subi	r30, 0xA7	; 167
    22b0:	ff 4f       	sbci	r31, 0xFF	; 255
    22b2:	80 81       	ld	r24, Z
    22b4:	91 81       	ldd	r25, Z+1	; 0x01
    22b6:	00 97       	sbiw	r24, 0x00	; 0
    22b8:	d1 f6       	brne	.-76     	; 0x226e <HStepper_SetStepsDirection+0x2ea>
    22ba:	27 c0       	rjmp	.+78     	; 0x230a <HStepper_SetStepsDirection+0x386>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22bc:	8e 01       	movw	r16, r28
    22be:	07 5a       	subi	r16, 0xA7	; 167
    22c0:	1f 4f       	sbci	r17, 0xFF	; 255
    22c2:	fe 01       	movw	r30, r28
    22c4:	e5 5a       	subi	r30, 0xA5	; 165
    22c6:	ff 4f       	sbci	r31, 0xFF	; 255
    22c8:	60 81       	ld	r22, Z
    22ca:	71 81       	ldd	r23, Z+1	; 0x01
    22cc:	82 81       	ldd	r24, Z+2	; 0x02
    22ce:	93 81       	ldd	r25, Z+3	; 0x03
    22d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	f8 01       	movw	r30, r16
    22da:	91 83       	std	Z+1, r25	; 0x01
    22dc:	80 83       	st	Z, r24
    22de:	de 01       	movw	r26, r28
    22e0:	ab 5a       	subi	r26, 0xAB	; 171
    22e2:	bf 4f       	sbci	r27, 0xFF	; 255
    22e4:	fe 01       	movw	r30, r28
    22e6:	e7 5a       	subi	r30, 0xA7	; 167
    22e8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ea:	80 81       	ld	r24, Z
    22ec:	91 81       	ldd	r25, Z+1	; 0x01
    22ee:	8d 93       	st	X+, r24
    22f0:	9c 93       	st	X, r25
    22f2:	fe 01       	movw	r30, r28
    22f4:	eb 5a       	subi	r30, 0xAB	; 171
    22f6:	ff 4f       	sbci	r31, 0xFF	; 255
    22f8:	80 81       	ld	r24, Z
    22fa:	91 81       	ldd	r25, Z+1	; 0x01
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	f1 f7       	brne	.-4      	; 0x22fc <HStepper_SetStepsDirection+0x378>
    2300:	fe 01       	movw	r30, r28
    2302:	eb 5a       	subi	r30, 0xAB	; 171
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	91 83       	std	Z+1, r25	; 0x01
    2308:	80 83       	st	Z, r24
					_delay_ms(MAX_SPEED_DELAY);

					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_HIGH);
    230a:	82 e0       	ldi	r24, 0x02	; 2
    230c:	63 e0       	ldi	r22, 0x03	; 3
    230e:	41 e0       	ldi	r20, 0x01	; 1
    2310:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_HIGH);
    2314:	82 e0       	ldi	r24, 0x02	; 2
    2316:	64 e0       	ldi	r22, 0x04	; 4
    2318:	41 e0       	ldi	r20, 0x01	; 1
    231a:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_LOW);
    231e:	82 e0       	ldi	r24, 0x02	; 2
    2320:	65 e0       	ldi	r22, 0x05	; 5
    2322:	40 e0       	ldi	r20, 0x00	; 0
    2324:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_HIGH);
    2328:	82 e0       	ldi	r24, 0x02	; 2
    232a:	66 e0       	ldi	r22, 0x06	; 6
    232c:	41 e0       	ldi	r20, 0x01	; 1
    232e:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
    2332:	fe 01       	movw	r30, r28
    2334:	ef 5a       	subi	r30, 0xAF	; 175
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	a0 ee       	ldi	r26, 0xE0	; 224
    233e:	b0 e4       	ldi	r27, 0x40	; 64
    2340:	80 83       	st	Z, r24
    2342:	91 83       	std	Z+1, r25	; 0x01
    2344:	a2 83       	std	Z+2, r26	; 0x02
    2346:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2348:	8e 01       	movw	r16, r28
    234a:	03 5b       	subi	r16, 0xB3	; 179
    234c:	1f 4f       	sbci	r17, 0xFF	; 255
    234e:	fe 01       	movw	r30, r28
    2350:	ef 5a       	subi	r30, 0xAF	; 175
    2352:	ff 4f       	sbci	r31, 0xFF	; 255
    2354:	60 81       	ld	r22, Z
    2356:	71 81       	ldd	r23, Z+1	; 0x01
    2358:	82 81       	ldd	r24, Z+2	; 0x02
    235a:	93 81       	ldd	r25, Z+3	; 0x03
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	4a e7       	ldi	r20, 0x7A	; 122
    2362:	55 e4       	ldi	r21, 0x45	; 69
    2364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	f8 01       	movw	r30, r16
    236e:	80 83       	st	Z, r24
    2370:	91 83       	std	Z+1, r25	; 0x01
    2372:	a2 83       	std	Z+2, r26	; 0x02
    2374:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2376:	fe 01       	movw	r30, r28
    2378:	e3 5b       	subi	r30, 0xB3	; 179
    237a:	ff 4f       	sbci	r31, 0xFF	; 255
    237c:	60 81       	ld	r22, Z
    237e:	71 81       	ldd	r23, Z+1	; 0x01
    2380:	82 81       	ldd	r24, Z+2	; 0x02
    2382:	93 81       	ldd	r25, Z+3	; 0x03
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	40 e8       	ldi	r20, 0x80	; 128
    238a:	5f e3       	ldi	r21, 0x3F	; 63
    238c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2390:	88 23       	and	r24, r24
    2392:	44 f4       	brge	.+16     	; 0x23a4 <HStepper_SetStepsDirection+0x420>
		__ticks = 1;
    2394:	fe 01       	movw	r30, r28
    2396:	e5 5b       	subi	r30, 0xB5	; 181
    2398:	ff 4f       	sbci	r31, 0xFF	; 255
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	91 83       	std	Z+1, r25	; 0x01
    23a0:	80 83       	st	Z, r24
    23a2:	64 c0       	rjmp	.+200    	; 0x246c <HStepper_SetStepsDirection+0x4e8>
	else if (__tmp > 65535)
    23a4:	fe 01       	movw	r30, r28
    23a6:	e3 5b       	subi	r30, 0xB3	; 179
    23a8:	ff 4f       	sbci	r31, 0xFF	; 255
    23aa:	60 81       	ld	r22, Z
    23ac:	71 81       	ldd	r23, Z+1	; 0x01
    23ae:	82 81       	ldd	r24, Z+2	; 0x02
    23b0:	93 81       	ldd	r25, Z+3	; 0x03
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	3f ef       	ldi	r19, 0xFF	; 255
    23b6:	4f e7       	ldi	r20, 0x7F	; 127
    23b8:	57 e4       	ldi	r21, 0x47	; 71
    23ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23be:	18 16       	cp	r1, r24
    23c0:	0c f0       	brlt	.+2      	; 0x23c4 <HStepper_SetStepsDirection+0x440>
    23c2:	43 c0       	rjmp	.+134    	; 0x244a <HStepper_SetStepsDirection+0x4c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c4:	fe 01       	movw	r30, r28
    23c6:	ef 5a       	subi	r30, 0xAF	; 175
    23c8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ca:	60 81       	ld	r22, Z
    23cc:	71 81       	ldd	r23, Z+1	; 0x01
    23ce:	82 81       	ldd	r24, Z+2	; 0x02
    23d0:	93 81       	ldd	r25, Z+3	; 0x03
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	40 e2       	ldi	r20, 0x20	; 32
    23d8:	51 e4       	ldi	r21, 0x41	; 65
    23da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	8e 01       	movw	r16, r28
    23e4:	05 5b       	subi	r16, 0xB5	; 181
    23e6:	1f 4f       	sbci	r17, 0xFF	; 255
    23e8:	bc 01       	movw	r22, r24
    23ea:	cd 01       	movw	r24, r26
    23ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f0:	dc 01       	movw	r26, r24
    23f2:	cb 01       	movw	r24, r22
    23f4:	f8 01       	movw	r30, r16
    23f6:	91 83       	std	Z+1, r25	; 0x01
    23f8:	80 83       	st	Z, r24
    23fa:	1f c0       	rjmp	.+62     	; 0x243a <HStepper_SetStepsDirection+0x4b6>
    23fc:	fe 01       	movw	r30, r28
    23fe:	e7 5b       	subi	r30, 0xB7	; 183
    2400:	ff 4f       	sbci	r31, 0xFF	; 255
    2402:	80 e9       	ldi	r24, 0x90	; 144
    2404:	91 e0       	ldi	r25, 0x01	; 1
    2406:	91 83       	std	Z+1, r25	; 0x01
    2408:	80 83       	st	Z, r24
    240a:	fe 01       	movw	r30, r28
    240c:	e7 5b       	subi	r30, 0xB7	; 183
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	80 81       	ld	r24, Z
    2412:	91 81       	ldd	r25, Z+1	; 0x01
    2414:	01 97       	sbiw	r24, 0x01	; 1
    2416:	f1 f7       	brne	.-4      	; 0x2414 <HStepper_SetStepsDirection+0x490>
    2418:	fe 01       	movw	r30, r28
    241a:	e7 5b       	subi	r30, 0xB7	; 183
    241c:	ff 4f       	sbci	r31, 0xFF	; 255
    241e:	91 83       	std	Z+1, r25	; 0x01
    2420:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2422:	de 01       	movw	r26, r28
    2424:	a5 5b       	subi	r26, 0xB5	; 181
    2426:	bf 4f       	sbci	r27, 0xFF	; 255
    2428:	fe 01       	movw	r30, r28
    242a:	e5 5b       	subi	r30, 0xB5	; 181
    242c:	ff 4f       	sbci	r31, 0xFF	; 255
    242e:	80 81       	ld	r24, Z
    2430:	91 81       	ldd	r25, Z+1	; 0x01
    2432:	01 97       	sbiw	r24, 0x01	; 1
    2434:	11 96       	adiw	r26, 0x01	; 1
    2436:	9c 93       	st	X, r25
    2438:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    243a:	fe 01       	movw	r30, r28
    243c:	e5 5b       	subi	r30, 0xB5	; 181
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	80 81       	ld	r24, Z
    2442:	91 81       	ldd	r25, Z+1	; 0x01
    2444:	00 97       	sbiw	r24, 0x00	; 0
    2446:	d1 f6       	brne	.-76     	; 0x23fc <HStepper_SetStepsDirection+0x478>
    2448:	27 c0       	rjmp	.+78     	; 0x2498 <HStepper_SetStepsDirection+0x514>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    244a:	8e 01       	movw	r16, r28
    244c:	05 5b       	subi	r16, 0xB5	; 181
    244e:	1f 4f       	sbci	r17, 0xFF	; 255
    2450:	fe 01       	movw	r30, r28
    2452:	e3 5b       	subi	r30, 0xB3	; 179
    2454:	ff 4f       	sbci	r31, 0xFF	; 255
    2456:	60 81       	ld	r22, Z
    2458:	71 81       	ldd	r23, Z+1	; 0x01
    245a:	82 81       	ldd	r24, Z+2	; 0x02
    245c:	93 81       	ldd	r25, Z+3	; 0x03
    245e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	f8 01       	movw	r30, r16
    2468:	91 83       	std	Z+1, r25	; 0x01
    246a:	80 83       	st	Z, r24
    246c:	de 01       	movw	r26, r28
    246e:	a9 5b       	subi	r26, 0xB9	; 185
    2470:	bf 4f       	sbci	r27, 0xFF	; 255
    2472:	fe 01       	movw	r30, r28
    2474:	e5 5b       	subi	r30, 0xB5	; 181
    2476:	ff 4f       	sbci	r31, 0xFF	; 255
    2478:	80 81       	ld	r24, Z
    247a:	91 81       	ldd	r25, Z+1	; 0x01
    247c:	8d 93       	st	X+, r24
    247e:	9c 93       	st	X, r25
    2480:	fe 01       	movw	r30, r28
    2482:	e9 5b       	subi	r30, 0xB9	; 185
    2484:	ff 4f       	sbci	r31, 0xFF	; 255
    2486:	80 81       	ld	r24, Z
    2488:	91 81       	ldd	r25, Z+1	; 0x01
    248a:	01 97       	sbiw	r24, 0x01	; 1
    248c:	f1 f7       	brne	.-4      	; 0x248a <HStepper_SetStepsDirection+0x506>
    248e:	fe 01       	movw	r30, r28
    2490:	e9 5b       	subi	r30, 0xB9	; 185
    2492:	ff 4f       	sbci	r31, 0xFF	; 255
    2494:	91 83       	std	Z+1, r25	; 0x01
    2496:	80 83       	st	Z, r24
					_delay_ms(MAX_SPEED_DELAY);

					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_HIGH);
    2498:	82 e0       	ldi	r24, 0x02	; 2
    249a:	63 e0       	ldi	r22, 0x03	; 3
    249c:	41 e0       	ldi	r20, 0x01	; 1
    249e:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_HIGH);
    24a2:	82 e0       	ldi	r24, 0x02	; 2
    24a4:	64 e0       	ldi	r22, 0x04	; 4
    24a6:	41 e0       	ldi	r20, 0x01	; 1
    24a8:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_HIGH);
    24ac:	82 e0       	ldi	r24, 0x02	; 2
    24ae:	65 e0       	ldi	r22, 0x05	; 5
    24b0:	41 e0       	ldi	r20, 0x01	; 1
    24b2:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_LOW);
    24b6:	82 e0       	ldi	r24, 0x02	; 2
    24b8:	66 e0       	ldi	r22, 0x06	; 6
    24ba:	40 e0       	ldi	r20, 0x00	; 0
    24bc:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
    24c0:	fe 01       	movw	r30, r28
    24c2:	ed 5b       	subi	r30, 0xBD	; 189
    24c4:	ff 4f       	sbci	r31, 0xFF	; 255
    24c6:	80 e0       	ldi	r24, 0x00	; 0
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	a0 ee       	ldi	r26, 0xE0	; 224
    24cc:	b0 e4       	ldi	r27, 0x40	; 64
    24ce:	80 83       	st	Z, r24
    24d0:	91 83       	std	Z+1, r25	; 0x01
    24d2:	a2 83       	std	Z+2, r26	; 0x02
    24d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d6:	8e 01       	movw	r16, r28
    24d8:	01 5c       	subi	r16, 0xC1	; 193
    24da:	1f 4f       	sbci	r17, 0xFF	; 255
    24dc:	fe 01       	movw	r30, r28
    24de:	ed 5b       	subi	r30, 0xBD	; 189
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	60 81       	ld	r22, Z
    24e4:	71 81       	ldd	r23, Z+1	; 0x01
    24e6:	82 81       	ldd	r24, Z+2	; 0x02
    24e8:	93 81       	ldd	r25, Z+3	; 0x03
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	4a e7       	ldi	r20, 0x7A	; 122
    24f0:	55 e4       	ldi	r21, 0x45	; 69
    24f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	f8 01       	movw	r30, r16
    24fc:	80 83       	st	Z, r24
    24fe:	91 83       	std	Z+1, r25	; 0x01
    2500:	a2 83       	std	Z+2, r26	; 0x02
    2502:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2504:	fe 01       	movw	r30, r28
    2506:	ff 96       	adiw	r30, 0x3f	; 63
    2508:	60 81       	ld	r22, Z
    250a:	71 81       	ldd	r23, Z+1	; 0x01
    250c:	82 81       	ldd	r24, Z+2	; 0x02
    250e:	93 81       	ldd	r25, Z+3	; 0x03
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	40 e8       	ldi	r20, 0x80	; 128
    2516:	5f e3       	ldi	r21, 0x3F	; 63
    2518:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    251c:	88 23       	and	r24, r24
    251e:	2c f4       	brge	.+10     	; 0x252a <HStepper_SetStepsDirection+0x5a6>
		__ticks = 1;
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	9e af       	std	Y+62, r25	; 0x3e
    2526:	8d af       	std	Y+61, r24	; 0x3d
    2528:	46 c0       	rjmp	.+140    	; 0x25b6 <HStepper_SetStepsDirection+0x632>
	else if (__tmp > 65535)
    252a:	fe 01       	movw	r30, r28
    252c:	ff 96       	adiw	r30, 0x3f	; 63
    252e:	60 81       	ld	r22, Z
    2530:	71 81       	ldd	r23, Z+1	; 0x01
    2532:	82 81       	ldd	r24, Z+2	; 0x02
    2534:	93 81       	ldd	r25, Z+3	; 0x03
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	3f ef       	ldi	r19, 0xFF	; 255
    253a:	4f e7       	ldi	r20, 0x7F	; 127
    253c:	57 e4       	ldi	r21, 0x47	; 71
    253e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2542:	18 16       	cp	r1, r24
    2544:	64 f5       	brge	.+88     	; 0x259e <HStepper_SetStepsDirection+0x61a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2546:	fe 01       	movw	r30, r28
    2548:	ed 5b       	subi	r30, 0xBD	; 189
    254a:	ff 4f       	sbci	r31, 0xFF	; 255
    254c:	60 81       	ld	r22, Z
    254e:	71 81       	ldd	r23, Z+1	; 0x01
    2550:	82 81       	ldd	r24, Z+2	; 0x02
    2552:	93 81       	ldd	r25, Z+3	; 0x03
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	40 e2       	ldi	r20, 0x20	; 32
    255a:	51 e4       	ldi	r21, 0x41	; 65
    255c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	bc 01       	movw	r22, r24
    2566:	cd 01       	movw	r24, r26
    2568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	9e af       	std	Y+62, r25	; 0x3e
    2572:	8d af       	std	Y+61, r24	; 0x3d
    2574:	0f c0       	rjmp	.+30     	; 0x2594 <HStepper_SetStepsDirection+0x610>
    2576:	80 e9       	ldi	r24, 0x90	; 144
    2578:	91 e0       	ldi	r25, 0x01	; 1
    257a:	9c af       	std	Y+60, r25	; 0x3c
    257c:	8b af       	std	Y+59, r24	; 0x3b
    257e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2580:	9c ad       	ldd	r25, Y+60	; 0x3c
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	f1 f7       	brne	.-4      	; 0x2582 <HStepper_SetStepsDirection+0x5fe>
    2586:	9c af       	std	Y+60, r25	; 0x3c
    2588:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    258a:	8d ad       	ldd	r24, Y+61	; 0x3d
    258c:	9e ad       	ldd	r25, Y+62	; 0x3e
    258e:	01 97       	sbiw	r24, 0x01	; 1
    2590:	9e af       	std	Y+62, r25	; 0x3e
    2592:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2594:	8d ad       	ldd	r24, Y+61	; 0x3d
    2596:	9e ad       	ldd	r25, Y+62	; 0x3e
    2598:	00 97       	sbiw	r24, 0x00	; 0
    259a:	69 f7       	brne	.-38     	; 0x2576 <HStepper_SetStepsDirection+0x5f2>
    259c:	16 c0       	rjmp	.+44     	; 0x25ca <HStepper_SetStepsDirection+0x646>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    259e:	fe 01       	movw	r30, r28
    25a0:	ff 96       	adiw	r30, 0x3f	; 63
    25a2:	60 81       	ld	r22, Z
    25a4:	71 81       	ldd	r23, Z+1	; 0x01
    25a6:	82 81       	ldd	r24, Z+2	; 0x02
    25a8:	93 81       	ldd	r25, Z+3	; 0x03
    25aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	9e af       	std	Y+62, r25	; 0x3e
    25b4:	8d af       	std	Y+61, r24	; 0x3d
    25b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    25b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    25ba:	9a af       	std	Y+58, r25	; 0x3a
    25bc:	89 af       	std	Y+57, r24	; 0x39
    25be:	89 ad       	ldd	r24, Y+57	; 0x39
    25c0:	9a ad       	ldd	r25, Y+58	; 0x3a
    25c2:	01 97       	sbiw	r24, 0x01	; 1
    25c4:	f1 f7       	brne	.-4      	; 0x25c2 <HStepper_SetStepsDirection+0x63e>
    25c6:	9a af       	std	Y+58, r25	; 0x3a
    25c8:	89 af       	std	Y+57, r24	; 0x39
{
	switch(copy_uint8Direction)
		{
	                         /*clock wise */
		     case CW:
			for(uint16 i=0 ;i<copy_uint16Steps;i++)
    25ca:	de 01       	movw	r26, r28
    25cc:	ad 58       	subi	r26, 0x8D	; 141
    25ce:	bf 4f       	sbci	r27, 0xFF	; 255
    25d0:	fe 01       	movw	r30, r28
    25d2:	ed 58       	subi	r30, 0x8D	; 141
    25d4:	ff 4f       	sbci	r31, 0xFF	; 255
    25d6:	80 81       	ld	r24, Z
    25d8:	91 81       	ldd	r25, Z+1	; 0x01
    25da:	01 96       	adiw	r24, 0x01	; 1
    25dc:	8d 93       	st	X+, r24
    25de:	9c 93       	st	X, r25
    25e0:	fe 01       	movw	r30, r28
    25e2:	ed 58       	subi	r30, 0x8D	; 141
    25e4:	ff 4f       	sbci	r31, 0xFF	; 255
    25e6:	de 01       	movw	r26, r28
    25e8:	ab 58       	subi	r26, 0x8B	; 139
    25ea:	bf 4f       	sbci	r27, 0xFF	; 255
    25ec:	20 81       	ld	r18, Z
    25ee:	31 81       	ldd	r19, Z+1	; 0x01
    25f0:	8d 91       	ld	r24, X+
    25f2:	9c 91       	ld	r25, X
    25f4:	11 97       	sbiw	r26, 0x01	; 1
    25f6:	28 17       	cp	r18, r24
    25f8:	39 07       	cpc	r19, r25
    25fa:	08 f4       	brcc	.+2      	; 0x25fe <HStepper_SetStepsDirection+0x67a>
    25fc:	f8 cc       	rjmp	.-1552   	; 0x1fee <HStepper_SetStepsDirection+0x6a>
    25fe:	38 c2       	rjmp	.+1136   	; 0x2a70 <HStepper_SetStepsDirection+0xaec>
					}
			break;

                                        /* counter clock wise*/
		case CCW :
			for(uint16 i=0 ;i<copy_uint16Steps;i++)
    2600:	fe 01       	movw	r30, r28
    2602:	ef 58       	subi	r30, 0x8F	; 143
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	11 82       	std	Z+1, r1	; 0x01
    2608:	10 82       	st	Z, r1
    260a:	23 c2       	rjmp	.+1094   	; 0x2a52 <HStepper_SetStepsDirection+0xace>
			{
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_HIGH);
    260c:	82 e0       	ldi	r24, 0x02	; 2
    260e:	63 e0       	ldi	r22, 0x03	; 3
    2610:	41 e0       	ldi	r20, 0x01	; 1
    2612:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_HIGH);
    2616:	82 e0       	ldi	r24, 0x02	; 2
    2618:	64 e0       	ldi	r22, 0x04	; 4
    261a:	41 e0       	ldi	r20, 0x01	; 1
    261c:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_HIGH);
    2620:	82 e0       	ldi	r24, 0x02	; 2
    2622:	65 e0       	ldi	r22, 0x05	; 5
    2624:	41 e0       	ldi	r20, 0x01	; 1
    2626:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_LOW);
    262a:	82 e0       	ldi	r24, 0x02	; 2
    262c:	66 e0       	ldi	r22, 0x06	; 6
    262e:	40 e0       	ldi	r20, 0x00	; 0
    2630:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	a0 ee       	ldi	r26, 0xE0	; 224
    263a:	b0 e4       	ldi	r27, 0x40	; 64
    263c:	8d ab       	std	Y+53, r24	; 0x35
    263e:	9e ab       	std	Y+54, r25	; 0x36
    2640:	af ab       	std	Y+55, r26	; 0x37
    2642:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2644:	6d a9       	ldd	r22, Y+53	; 0x35
    2646:	7e a9       	ldd	r23, Y+54	; 0x36
    2648:	8f a9       	ldd	r24, Y+55	; 0x37
    264a:	98 ad       	ldd	r25, Y+56	; 0x38
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	4a e7       	ldi	r20, 0x7A	; 122
    2652:	55 e4       	ldi	r21, 0x45	; 69
    2654:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2658:	dc 01       	movw	r26, r24
    265a:	cb 01       	movw	r24, r22
    265c:	89 ab       	std	Y+49, r24	; 0x31
    265e:	9a ab       	std	Y+50, r25	; 0x32
    2660:	ab ab       	std	Y+51, r26	; 0x33
    2662:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2664:	69 a9       	ldd	r22, Y+49	; 0x31
    2666:	7a a9       	ldd	r23, Y+50	; 0x32
    2668:	8b a9       	ldd	r24, Y+51	; 0x33
    266a:	9c a9       	ldd	r25, Y+52	; 0x34
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	40 e8       	ldi	r20, 0x80	; 128
    2672:	5f e3       	ldi	r21, 0x3F	; 63
    2674:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2678:	88 23       	and	r24, r24
    267a:	2c f4       	brge	.+10     	; 0x2686 <HStepper_SetStepsDirection+0x702>
		__ticks = 1;
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	98 ab       	std	Y+48, r25	; 0x30
    2682:	8f a7       	std	Y+47, r24	; 0x2f
    2684:	3f c0       	rjmp	.+126    	; 0x2704 <HStepper_SetStepsDirection+0x780>
	else if (__tmp > 65535)
    2686:	69 a9       	ldd	r22, Y+49	; 0x31
    2688:	7a a9       	ldd	r23, Y+50	; 0x32
    268a:	8b a9       	ldd	r24, Y+51	; 0x33
    268c:	9c a9       	ldd	r25, Y+52	; 0x34
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	3f ef       	ldi	r19, 0xFF	; 255
    2692:	4f e7       	ldi	r20, 0x7F	; 127
    2694:	57 e4       	ldi	r21, 0x47	; 71
    2696:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    269a:	18 16       	cp	r1, r24
    269c:	4c f5       	brge	.+82     	; 0x26f0 <HStepper_SetStepsDirection+0x76c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    269e:	6d a9       	ldd	r22, Y+53	; 0x35
    26a0:	7e a9       	ldd	r23, Y+54	; 0x36
    26a2:	8f a9       	ldd	r24, Y+55	; 0x37
    26a4:	98 ad       	ldd	r25, Y+56	; 0x38
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	40 e2       	ldi	r20, 0x20	; 32
    26ac:	51 e4       	ldi	r21, 0x41	; 65
    26ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b2:	dc 01       	movw	r26, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	bc 01       	movw	r22, r24
    26b8:	cd 01       	movw	r24, r26
    26ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26be:	dc 01       	movw	r26, r24
    26c0:	cb 01       	movw	r24, r22
    26c2:	98 ab       	std	Y+48, r25	; 0x30
    26c4:	8f a7       	std	Y+47, r24	; 0x2f
    26c6:	0f c0       	rjmp	.+30     	; 0x26e6 <HStepper_SetStepsDirection+0x762>
    26c8:	80 e9       	ldi	r24, 0x90	; 144
    26ca:	91 e0       	ldi	r25, 0x01	; 1
    26cc:	9e a7       	std	Y+46, r25	; 0x2e
    26ce:	8d a7       	std	Y+45, r24	; 0x2d
    26d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    26d2:	9e a5       	ldd	r25, Y+46	; 0x2e
    26d4:	01 97       	sbiw	r24, 0x01	; 1
    26d6:	f1 f7       	brne	.-4      	; 0x26d4 <HStepper_SetStepsDirection+0x750>
    26d8:	9e a7       	std	Y+46, r25	; 0x2e
    26da:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    26de:	98 a9       	ldd	r25, Y+48	; 0x30
    26e0:	01 97       	sbiw	r24, 0x01	; 1
    26e2:	98 ab       	std	Y+48, r25	; 0x30
    26e4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    26e8:	98 a9       	ldd	r25, Y+48	; 0x30
    26ea:	00 97       	sbiw	r24, 0x00	; 0
    26ec:	69 f7       	brne	.-38     	; 0x26c8 <HStepper_SetStepsDirection+0x744>
    26ee:	14 c0       	rjmp	.+40     	; 0x2718 <HStepper_SetStepsDirection+0x794>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f0:	69 a9       	ldd	r22, Y+49	; 0x31
    26f2:	7a a9       	ldd	r23, Y+50	; 0x32
    26f4:	8b a9       	ldd	r24, Y+51	; 0x33
    26f6:	9c a9       	ldd	r25, Y+52	; 0x34
    26f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22
    2700:	98 ab       	std	Y+48, r25	; 0x30
    2702:	8f a7       	std	Y+47, r24	; 0x2f
    2704:	8f a5       	ldd	r24, Y+47	; 0x2f
    2706:	98 a9       	ldd	r25, Y+48	; 0x30
    2708:	9c a7       	std	Y+44, r25	; 0x2c
    270a:	8b a7       	std	Y+43, r24	; 0x2b
    270c:	8b a5       	ldd	r24, Y+43	; 0x2b
    270e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2710:	01 97       	sbiw	r24, 0x01	; 1
    2712:	f1 f7       	brne	.-4      	; 0x2710 <HStepper_SetStepsDirection+0x78c>
    2714:	9c a7       	std	Y+44, r25	; 0x2c
    2716:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(MAX_SPEED_DELAY);

				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_HIGH);
    2718:	82 e0       	ldi	r24, 0x02	; 2
    271a:	63 e0       	ldi	r22, 0x03	; 3
    271c:	41 e0       	ldi	r20, 0x01	; 1
    271e:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_HIGH);
    2722:	82 e0       	ldi	r24, 0x02	; 2
    2724:	64 e0       	ldi	r22, 0x04	; 4
    2726:	41 e0       	ldi	r20, 0x01	; 1
    2728:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_LOW);
    272c:	82 e0       	ldi	r24, 0x02	; 2
    272e:	65 e0       	ldi	r22, 0x05	; 5
    2730:	40 e0       	ldi	r20, 0x00	; 0
    2732:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_HIGH);
    2736:	82 e0       	ldi	r24, 0x02	; 2
    2738:	66 e0       	ldi	r22, 0x06	; 6
    273a:	41 e0       	ldi	r20, 0x01	; 1
    273c:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
    2740:	80 e0       	ldi	r24, 0x00	; 0
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	a0 ee       	ldi	r26, 0xE0	; 224
    2746:	b0 e4       	ldi	r27, 0x40	; 64
    2748:	8f a3       	std	Y+39, r24	; 0x27
    274a:	98 a7       	std	Y+40, r25	; 0x28
    274c:	a9 a7       	std	Y+41, r26	; 0x29
    274e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2750:	6f a1       	ldd	r22, Y+39	; 0x27
    2752:	78 a5       	ldd	r23, Y+40	; 0x28
    2754:	89 a5       	ldd	r24, Y+41	; 0x29
    2756:	9a a5       	ldd	r25, Y+42	; 0x2a
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	4a e7       	ldi	r20, 0x7A	; 122
    275e:	55 e4       	ldi	r21, 0x45	; 69
    2760:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	8b a3       	std	Y+35, r24	; 0x23
    276a:	9c a3       	std	Y+36, r25	; 0x24
    276c:	ad a3       	std	Y+37, r26	; 0x25
    276e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2770:	6b a1       	ldd	r22, Y+35	; 0x23
    2772:	7c a1       	ldd	r23, Y+36	; 0x24
    2774:	8d a1       	ldd	r24, Y+37	; 0x25
    2776:	9e a1       	ldd	r25, Y+38	; 0x26
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	40 e8       	ldi	r20, 0x80	; 128
    277e:	5f e3       	ldi	r21, 0x3F	; 63
    2780:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2784:	88 23       	and	r24, r24
    2786:	2c f4       	brge	.+10     	; 0x2792 <HStepper_SetStepsDirection+0x80e>
		__ticks = 1;
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	9a a3       	std	Y+34, r25	; 0x22
    278e:	89 a3       	std	Y+33, r24	; 0x21
    2790:	3f c0       	rjmp	.+126    	; 0x2810 <HStepper_SetStepsDirection+0x88c>
	else if (__tmp > 65535)
    2792:	6b a1       	ldd	r22, Y+35	; 0x23
    2794:	7c a1       	ldd	r23, Y+36	; 0x24
    2796:	8d a1       	ldd	r24, Y+37	; 0x25
    2798:	9e a1       	ldd	r25, Y+38	; 0x26
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	3f ef       	ldi	r19, 0xFF	; 255
    279e:	4f e7       	ldi	r20, 0x7F	; 127
    27a0:	57 e4       	ldi	r21, 0x47	; 71
    27a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27a6:	18 16       	cp	r1, r24
    27a8:	4c f5       	brge	.+82     	; 0x27fc <HStepper_SetStepsDirection+0x878>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27aa:	6f a1       	ldd	r22, Y+39	; 0x27
    27ac:	78 a5       	ldd	r23, Y+40	; 0x28
    27ae:	89 a5       	ldd	r24, Y+41	; 0x29
    27b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	40 e2       	ldi	r20, 0x20	; 32
    27b8:	51 e4       	ldi	r21, 0x41	; 65
    27ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	bc 01       	movw	r22, r24
    27c4:	cd 01       	movw	r24, r26
    27c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	9a a3       	std	Y+34, r25	; 0x22
    27d0:	89 a3       	std	Y+33, r24	; 0x21
    27d2:	0f c0       	rjmp	.+30     	; 0x27f2 <HStepper_SetStepsDirection+0x86e>
    27d4:	80 e9       	ldi	r24, 0x90	; 144
    27d6:	91 e0       	ldi	r25, 0x01	; 1
    27d8:	98 a3       	std	Y+32, r25	; 0x20
    27da:	8f 8f       	std	Y+31, r24	; 0x1f
    27dc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27de:	98 a1       	ldd	r25, Y+32	; 0x20
    27e0:	01 97       	sbiw	r24, 0x01	; 1
    27e2:	f1 f7       	brne	.-4      	; 0x27e0 <HStepper_SetStepsDirection+0x85c>
    27e4:	98 a3       	std	Y+32, r25	; 0x20
    27e6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27e8:	89 a1       	ldd	r24, Y+33	; 0x21
    27ea:	9a a1       	ldd	r25, Y+34	; 0x22
    27ec:	01 97       	sbiw	r24, 0x01	; 1
    27ee:	9a a3       	std	Y+34, r25	; 0x22
    27f0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f2:	89 a1       	ldd	r24, Y+33	; 0x21
    27f4:	9a a1       	ldd	r25, Y+34	; 0x22
    27f6:	00 97       	sbiw	r24, 0x00	; 0
    27f8:	69 f7       	brne	.-38     	; 0x27d4 <HStepper_SetStepsDirection+0x850>
    27fa:	14 c0       	rjmp	.+40     	; 0x2824 <HStepper_SetStepsDirection+0x8a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27fc:	6b a1       	ldd	r22, Y+35	; 0x23
    27fe:	7c a1       	ldd	r23, Y+36	; 0x24
    2800:	8d a1       	ldd	r24, Y+37	; 0x25
    2802:	9e a1       	ldd	r25, Y+38	; 0x26
    2804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	9a a3       	std	Y+34, r25	; 0x22
    280e:	89 a3       	std	Y+33, r24	; 0x21
    2810:	89 a1       	ldd	r24, Y+33	; 0x21
    2812:	9a a1       	ldd	r25, Y+34	; 0x22
    2814:	9e 8f       	std	Y+30, r25	; 0x1e
    2816:	8d 8f       	std	Y+29, r24	; 0x1d
    2818:	8d 8d       	ldd	r24, Y+29	; 0x1d
    281a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    281c:	01 97       	sbiw	r24, 0x01	; 1
    281e:	f1 f7       	brne	.-4      	; 0x281c <HStepper_SetStepsDirection+0x898>
    2820:	9e 8f       	std	Y+30, r25	; 0x1e
    2822:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(MAX_SPEED_DELAY);
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_HIGH);
    2824:	82 e0       	ldi	r24, 0x02	; 2
    2826:	63 e0       	ldi	r22, 0x03	; 3
    2828:	41 e0       	ldi	r20, 0x01	; 1
    282a:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_LOW);
    282e:	82 e0       	ldi	r24, 0x02	; 2
    2830:	64 e0       	ldi	r22, 0x04	; 4
    2832:	40 e0       	ldi	r20, 0x00	; 0
    2834:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_HIGH);
    2838:	82 e0       	ldi	r24, 0x02	; 2
    283a:	65 e0       	ldi	r22, 0x05	; 5
    283c:	41 e0       	ldi	r20, 0x01	; 1
    283e:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_HIGH);
    2842:	82 e0       	ldi	r24, 0x02	; 2
    2844:	66 e0       	ldi	r22, 0x06	; 6
    2846:	41 e0       	ldi	r20, 0x01	; 1
    2848:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
    284c:	80 e0       	ldi	r24, 0x00	; 0
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	a0 ee       	ldi	r26, 0xE0	; 224
    2852:	b0 e4       	ldi	r27, 0x40	; 64
    2854:	89 8f       	std	Y+25, r24	; 0x19
    2856:	9a 8f       	std	Y+26, r25	; 0x1a
    2858:	ab 8f       	std	Y+27, r26	; 0x1b
    285a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    285c:	69 8d       	ldd	r22, Y+25	; 0x19
    285e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2860:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2862:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	4a e7       	ldi	r20, 0x7A	; 122
    286a:	55 e4       	ldi	r21, 0x45	; 69
    286c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	8d 8b       	std	Y+21, r24	; 0x15
    2876:	9e 8b       	std	Y+22, r25	; 0x16
    2878:	af 8b       	std	Y+23, r26	; 0x17
    287a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    287c:	6d 89       	ldd	r22, Y+21	; 0x15
    287e:	7e 89       	ldd	r23, Y+22	; 0x16
    2880:	8f 89       	ldd	r24, Y+23	; 0x17
    2882:	98 8d       	ldd	r25, Y+24	; 0x18
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	40 e8       	ldi	r20, 0x80	; 128
    288a:	5f e3       	ldi	r21, 0x3F	; 63
    288c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2890:	88 23       	and	r24, r24
    2892:	2c f4       	brge	.+10     	; 0x289e <HStepper_SetStepsDirection+0x91a>
		__ticks = 1;
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	9c 8b       	std	Y+20, r25	; 0x14
    289a:	8b 8b       	std	Y+19, r24	; 0x13
    289c:	3f c0       	rjmp	.+126    	; 0x291c <HStepper_SetStepsDirection+0x998>
	else if (__tmp > 65535)
    289e:	6d 89       	ldd	r22, Y+21	; 0x15
    28a0:	7e 89       	ldd	r23, Y+22	; 0x16
    28a2:	8f 89       	ldd	r24, Y+23	; 0x17
    28a4:	98 8d       	ldd	r25, Y+24	; 0x18
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	3f ef       	ldi	r19, 0xFF	; 255
    28aa:	4f e7       	ldi	r20, 0x7F	; 127
    28ac:	57 e4       	ldi	r21, 0x47	; 71
    28ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28b2:	18 16       	cp	r1, r24
    28b4:	4c f5       	brge	.+82     	; 0x2908 <HStepper_SetStepsDirection+0x984>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b6:	69 8d       	ldd	r22, Y+25	; 0x19
    28b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	40 e2       	ldi	r20, 0x20	; 32
    28c4:	51 e4       	ldi	r21, 0x41	; 65
    28c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ca:	dc 01       	movw	r26, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	bc 01       	movw	r22, r24
    28d0:	cd 01       	movw	r24, r26
    28d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	9c 8b       	std	Y+20, r25	; 0x14
    28dc:	8b 8b       	std	Y+19, r24	; 0x13
    28de:	0f c0       	rjmp	.+30     	; 0x28fe <HStepper_SetStepsDirection+0x97a>
    28e0:	80 e9       	ldi	r24, 0x90	; 144
    28e2:	91 e0       	ldi	r25, 0x01	; 1
    28e4:	9a 8b       	std	Y+18, r25	; 0x12
    28e6:	89 8b       	std	Y+17, r24	; 0x11
    28e8:	89 89       	ldd	r24, Y+17	; 0x11
    28ea:	9a 89       	ldd	r25, Y+18	; 0x12
    28ec:	01 97       	sbiw	r24, 0x01	; 1
    28ee:	f1 f7       	brne	.-4      	; 0x28ec <HStepper_SetStepsDirection+0x968>
    28f0:	9a 8b       	std	Y+18, r25	; 0x12
    28f2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f4:	8b 89       	ldd	r24, Y+19	; 0x13
    28f6:	9c 89       	ldd	r25, Y+20	; 0x14
    28f8:	01 97       	sbiw	r24, 0x01	; 1
    28fa:	9c 8b       	std	Y+20, r25	; 0x14
    28fc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2900:	9c 89       	ldd	r25, Y+20	; 0x14
    2902:	00 97       	sbiw	r24, 0x00	; 0
    2904:	69 f7       	brne	.-38     	; 0x28e0 <HStepper_SetStepsDirection+0x95c>
    2906:	14 c0       	rjmp	.+40     	; 0x2930 <HStepper_SetStepsDirection+0x9ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2908:	6d 89       	ldd	r22, Y+21	; 0x15
    290a:	7e 89       	ldd	r23, Y+22	; 0x16
    290c:	8f 89       	ldd	r24, Y+23	; 0x17
    290e:	98 8d       	ldd	r25, Y+24	; 0x18
    2910:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2914:	dc 01       	movw	r26, r24
    2916:	cb 01       	movw	r24, r22
    2918:	9c 8b       	std	Y+20, r25	; 0x14
    291a:	8b 8b       	std	Y+19, r24	; 0x13
    291c:	8b 89       	ldd	r24, Y+19	; 0x13
    291e:	9c 89       	ldd	r25, Y+20	; 0x14
    2920:	98 8b       	std	Y+16, r25	; 0x10
    2922:	8f 87       	std	Y+15, r24	; 0x0f
    2924:	8f 85       	ldd	r24, Y+15	; 0x0f
    2926:	98 89       	ldd	r25, Y+16	; 0x10
    2928:	01 97       	sbiw	r24, 0x01	; 1
    292a:	f1 f7       	brne	.-4      	; 0x2928 <HStepper_SetStepsDirection+0x9a4>
    292c:	98 8b       	std	Y+16, r25	; 0x10
    292e:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(MAX_SPEED_DELAY);

				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_LOW);
    2930:	82 e0       	ldi	r24, 0x02	; 2
    2932:	63 e0       	ldi	r22, 0x03	; 3
    2934:	40 e0       	ldi	r20, 0x00	; 0
    2936:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_HIGH);
    293a:	82 e0       	ldi	r24, 0x02	; 2
    293c:	64 e0       	ldi	r22, 0x04	; 4
    293e:	41 e0       	ldi	r20, 0x01	; 1
    2940:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_HIGH);
    2944:	82 e0       	ldi	r24, 0x02	; 2
    2946:	65 e0       	ldi	r22, 0x05	; 5
    2948:	41 e0       	ldi	r20, 0x01	; 1
    294a:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_HIGH);
    294e:	82 e0       	ldi	r24, 0x02	; 2
    2950:	66 e0       	ldi	r22, 0x06	; 6
    2952:	41 e0       	ldi	r20, 0x01	; 1
    2954:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
    2958:	80 e0       	ldi	r24, 0x00	; 0
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	a0 ee       	ldi	r26, 0xE0	; 224
    295e:	b0 e4       	ldi	r27, 0x40	; 64
    2960:	8b 87       	std	Y+11, r24	; 0x0b
    2962:	9c 87       	std	Y+12, r25	; 0x0c
    2964:	ad 87       	std	Y+13, r26	; 0x0d
    2966:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2968:	6b 85       	ldd	r22, Y+11	; 0x0b
    296a:	7c 85       	ldd	r23, Y+12	; 0x0c
    296c:	8d 85       	ldd	r24, Y+13	; 0x0d
    296e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	4a e7       	ldi	r20, 0x7A	; 122
    2976:	55 e4       	ldi	r21, 0x45	; 69
    2978:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	8f 83       	std	Y+7, r24	; 0x07
    2982:	98 87       	std	Y+8, r25	; 0x08
    2984:	a9 87       	std	Y+9, r26	; 0x09
    2986:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2988:	6f 81       	ldd	r22, Y+7	; 0x07
    298a:	78 85       	ldd	r23, Y+8	; 0x08
    298c:	89 85       	ldd	r24, Y+9	; 0x09
    298e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	40 e8       	ldi	r20, 0x80	; 128
    2996:	5f e3       	ldi	r21, 0x3F	; 63
    2998:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    299c:	88 23       	and	r24, r24
    299e:	2c f4       	brge	.+10     	; 0x29aa <HStepper_SetStepsDirection+0xa26>
		__ticks = 1;
    29a0:	81 e0       	ldi	r24, 0x01	; 1
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	9e 83       	std	Y+6, r25	; 0x06
    29a6:	8d 83       	std	Y+5, r24	; 0x05
    29a8:	3f c0       	rjmp	.+126    	; 0x2a28 <HStepper_SetStepsDirection+0xaa4>
	else if (__tmp > 65535)
    29aa:	6f 81       	ldd	r22, Y+7	; 0x07
    29ac:	78 85       	ldd	r23, Y+8	; 0x08
    29ae:	89 85       	ldd	r24, Y+9	; 0x09
    29b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	3f ef       	ldi	r19, 0xFF	; 255
    29b6:	4f e7       	ldi	r20, 0x7F	; 127
    29b8:	57 e4       	ldi	r21, 0x47	; 71
    29ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29be:	18 16       	cp	r1, r24
    29c0:	4c f5       	brge	.+82     	; 0x2a14 <HStepper_SetStepsDirection+0xa90>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    29c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    29c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	40 e2       	ldi	r20, 0x20	; 32
    29d0:	51 e4       	ldi	r21, 0x41	; 65
    29d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	bc 01       	movw	r22, r24
    29dc:	cd 01       	movw	r24, r26
    29de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e2:	dc 01       	movw	r26, r24
    29e4:	cb 01       	movw	r24, r22
    29e6:	9e 83       	std	Y+6, r25	; 0x06
    29e8:	8d 83       	std	Y+5, r24	; 0x05
    29ea:	0f c0       	rjmp	.+30     	; 0x2a0a <HStepper_SetStepsDirection+0xa86>
    29ec:	80 e9       	ldi	r24, 0x90	; 144
    29ee:	91 e0       	ldi	r25, 0x01	; 1
    29f0:	9c 83       	std	Y+4, r25	; 0x04
    29f2:	8b 83       	std	Y+3, r24	; 0x03
    29f4:	8b 81       	ldd	r24, Y+3	; 0x03
    29f6:	9c 81       	ldd	r25, Y+4	; 0x04
    29f8:	01 97       	sbiw	r24, 0x01	; 1
    29fa:	f1 f7       	brne	.-4      	; 0x29f8 <HStepper_SetStepsDirection+0xa74>
    29fc:	9c 83       	std	Y+4, r25	; 0x04
    29fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a00:	8d 81       	ldd	r24, Y+5	; 0x05
    2a02:	9e 81       	ldd	r25, Y+6	; 0x06
    2a04:	01 97       	sbiw	r24, 0x01	; 1
    2a06:	9e 83       	std	Y+6, r25	; 0x06
    2a08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a0e:	00 97       	sbiw	r24, 0x00	; 0
    2a10:	69 f7       	brne	.-38     	; 0x29ec <HStepper_SetStepsDirection+0xa68>
    2a12:	14 c0       	rjmp	.+40     	; 0x2a3c <HStepper_SetStepsDirection+0xab8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a14:	6f 81       	ldd	r22, Y+7	; 0x07
    2a16:	78 85       	ldd	r23, Y+8	; 0x08
    2a18:	89 85       	ldd	r24, Y+9	; 0x09
    2a1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	9e 83       	std	Y+6, r25	; 0x06
    2a26:	8d 83       	std	Y+5, r24	; 0x05
    2a28:	8d 81       	ldd	r24, Y+5	; 0x05
    2a2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a2c:	9a 83       	std	Y+2, r25	; 0x02
    2a2e:	89 83       	std	Y+1, r24	; 0x01
    2a30:	89 81       	ldd	r24, Y+1	; 0x01
    2a32:	9a 81       	ldd	r25, Y+2	; 0x02
    2a34:	01 97       	sbiw	r24, 0x01	; 1
    2a36:	f1 f7       	brne	.-4      	; 0x2a34 <HStepper_SetStepsDirection+0xab0>
    2a38:	9a 83       	std	Y+2, r25	; 0x02
    2a3a:	89 83       	std	Y+1, r24	; 0x01
					}
			break;

                                        /* counter clock wise*/
		case CCW :
			for(uint16 i=0 ;i<copy_uint16Steps;i++)
    2a3c:	de 01       	movw	r26, r28
    2a3e:	af 58       	subi	r26, 0x8F	; 143
    2a40:	bf 4f       	sbci	r27, 0xFF	; 255
    2a42:	fe 01       	movw	r30, r28
    2a44:	ef 58       	subi	r30, 0x8F	; 143
    2a46:	ff 4f       	sbci	r31, 0xFF	; 255
    2a48:	80 81       	ld	r24, Z
    2a4a:	91 81       	ldd	r25, Z+1	; 0x01
    2a4c:	01 96       	adiw	r24, 0x01	; 1
    2a4e:	8d 93       	st	X+, r24
    2a50:	9c 93       	st	X, r25
    2a52:	fe 01       	movw	r30, r28
    2a54:	ef 58       	subi	r30, 0x8F	; 143
    2a56:	ff 4f       	sbci	r31, 0xFF	; 255
    2a58:	de 01       	movw	r26, r28
    2a5a:	ab 58       	subi	r26, 0x8B	; 139
    2a5c:	bf 4f       	sbci	r27, 0xFF	; 255
    2a5e:	20 81       	ld	r18, Z
    2a60:	31 81       	ldd	r19, Z+1	; 0x01
    2a62:	8d 91       	ld	r24, X+
    2a64:	9c 91       	ld	r25, X
    2a66:	11 97       	sbiw	r26, 0x01	; 1
    2a68:	28 17       	cp	r18, r24
    2a6a:	39 07       	cpc	r19, r25
    2a6c:	08 f4       	brcc	.+2      	; 0x2a70 <HStepper_SetStepsDirection+0xaec>
    2a6e:	ce cd       	rjmp	.-1124   	; 0x260c <HStepper_SetStepsDirection+0x688>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_HIGH);
				_delay_ms(MAX_SPEED_DELAY);
				}
			break;
		}
}
    2a70:	c7 58       	subi	r28, 0x87	; 135
    2a72:	df 4f       	sbci	r29, 0xFF	; 255
    2a74:	0f b6       	in	r0, 0x3f	; 63
    2a76:	f8 94       	cli
    2a78:	de bf       	out	0x3e, r29	; 62
    2a7a:	0f be       	out	0x3f, r0	; 63
    2a7c:	cd bf       	out	0x3d, r28	; 61
    2a7e:	cf 91       	pop	r28
    2a80:	df 91       	pop	r29
    2a82:	1f 91       	pop	r17
    2a84:	0f 91       	pop	r16
    2a86:	08 95       	ret

00002a88 <HLED_Errorstate_Led_Init>:


/*******led initialize       ***********/

ErrorState HLED_Errorstate_Led_Init( LED_T* copy_LED_object)
{
    2a88:	df 93       	push	r29
    2a8a:	cf 93       	push	r28
    2a8c:	00 d0       	rcall	.+0      	; 0x2a8e <HLED_Errorstate_Led_Init+0x6>
    2a8e:	0f 92       	push	r0
    2a90:	cd b7       	in	r28, 0x3d	; 61
    2a92:	de b7       	in	r29, 0x3e	; 62
    2a94:	9b 83       	std	Y+3, r25	; 0x03
    2a96:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState Loc_ErrorState_Error_state=OK;
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	89 83       	std	Y+1, r24	; 0x01
	Loc_ErrorState_Error_state = MDIO_Errorstate_SetPinDirection(copy_LED_object->LedPort,copy_LED_object->LedPin,PIN_OUTPUT);
    2a9c:	ea 81       	ldd	r30, Y+2	; 0x02
    2a9e:	fb 81       	ldd	r31, Y+3	; 0x03
    2aa0:	80 81       	ld	r24, Z
    2aa2:	ea 81       	ldd	r30, Y+2	; 0x02
    2aa4:	fb 81       	ldd	r31, Y+3	; 0x03
    2aa6:	91 81       	ldd	r25, Z+1	; 0x01
    2aa8:	69 2f       	mov	r22, r25
    2aaa:	41 e0       	ldi	r20, 0x01	; 1
    2aac:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <MDIO_Errorstate_SetPinDirection>
    2ab0:	89 83       	std	Y+1, r24	; 0x01
		return Loc_ErrorState_Error_state;
    2ab2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ab4:	0f 90       	pop	r0
    2ab6:	0f 90       	pop	r0
    2ab8:	0f 90       	pop	r0
    2aba:	cf 91       	pop	r28
    2abc:	df 91       	pop	r29
    2abe:	08 95       	ret

00002ac0 <HLED_Errorstate_Led_On>:

/********* led on              ***********/
ErrorState HLED_Errorstate_Led_On(LED_T* copy_LED_object)
{
    2ac0:	df 93       	push	r29
    2ac2:	cf 93       	push	r28
    2ac4:	00 d0       	rcall	.+0      	; 0x2ac6 <HLED_Errorstate_Led_On+0x6>
    2ac6:	0f 92       	push	r0
    2ac8:	cd b7       	in	r28, 0x3d	; 61
    2aca:	de b7       	in	r29, 0x3e	; 62
    2acc:	9b 83       	std	Y+3, r25	; 0x03
    2ace:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState Loc_ErrorState_Error_state=OK;
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	89 83       	std	Y+1, r24	; 0x01

	if(copy_LED_object->LedActiveState==ACTIVE_HIGH)
    2ad4:	ea 81       	ldd	r30, Y+2	; 0x02
    2ad6:	fb 81       	ldd	r31, Y+3	; 0x03
    2ad8:	82 81       	ldd	r24, Z+2	; 0x02
    2ada:	81 30       	cpi	r24, 0x01	; 1
    2adc:	59 f4       	brne	.+22     	; 0x2af4 <HLED_Errorstate_Led_On+0x34>
	{
		MDIO_Errorstate_SetPinValue(copy_LED_object->LedPort,copy_LED_object->LedPin,PIN_HIGH);
    2ade:	ea 81       	ldd	r30, Y+2	; 0x02
    2ae0:	fb 81       	ldd	r31, Y+3	; 0x03
    2ae2:	80 81       	ld	r24, Z
    2ae4:	ea 81       	ldd	r30, Y+2	; 0x02
    2ae6:	fb 81       	ldd	r31, Y+3	; 0x03
    2ae8:	91 81       	ldd	r25, Z+1	; 0x01
    2aea:	69 2f       	mov	r22, r25
    2aec:	41 e0       	ldi	r20, 0x01	; 1
    2aee:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
    2af2:	11 c0       	rjmp	.+34     	; 0x2b16 <HLED_Errorstate_Led_On+0x56>
	}
	else if(copy_LED_object->LedActiveState==ACTIVE_LOW)
    2af4:	ea 81       	ldd	r30, Y+2	; 0x02
    2af6:	fb 81       	ldd	r31, Y+3	; 0x03
    2af8:	82 81       	ldd	r24, Z+2	; 0x02
    2afa:	88 23       	and	r24, r24
    2afc:	59 f4       	brne	.+22     	; 0x2b14 <HLED_Errorstate_Led_On+0x54>
	{
		MDIO_Errorstate_SetPinValue(copy_LED_object->LedPort,copy_LED_object->LedPin,PIN_LOW);
    2afe:	ea 81       	ldd	r30, Y+2	; 0x02
    2b00:	fb 81       	ldd	r31, Y+3	; 0x03
    2b02:	80 81       	ld	r24, Z
    2b04:	ea 81       	ldd	r30, Y+2	; 0x02
    2b06:	fb 81       	ldd	r31, Y+3	; 0x03
    2b08:	91 81       	ldd	r25, Z+1	; 0x01
    2b0a:	69 2f       	mov	r22, r25
    2b0c:	40 e0       	ldi	r20, 0x00	; 0
    2b0e:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
    2b12:	01 c0       	rjmp	.+2      	; 0x2b16 <HLED_Errorstate_Led_On+0x56>
	}
	else
	{
		Loc_ErrorState_Error_state=NOK;
    2b14:	19 82       	std	Y+1, r1	; 0x01
	}

	return Loc_ErrorState_Error_state;
    2b16:	89 81       	ldd	r24, Y+1	; 0x01
	}
    2b18:	0f 90       	pop	r0
    2b1a:	0f 90       	pop	r0
    2b1c:	0f 90       	pop	r0
    2b1e:	cf 91       	pop	r28
    2b20:	df 91       	pop	r29
    2b22:	08 95       	ret

00002b24 <HLED_Errorstate_Led_Off>:

/***                        leed off                  ****/
	ErrorState HLED_Errorstate_Led_Off(LED_T* copy_LED_object)
	{
    2b24:	df 93       	push	r29
    2b26:	cf 93       	push	r28
    2b28:	00 d0       	rcall	.+0      	; 0x2b2a <HLED_Errorstate_Led_Off+0x6>
    2b2a:	0f 92       	push	r0
    2b2c:	cd b7       	in	r28, 0x3d	; 61
    2b2e:	de b7       	in	r29, 0x3e	; 62
    2b30:	9b 83       	std	Y+3, r25	; 0x03
    2b32:	8a 83       	std	Y+2, r24	; 0x02
		ErrorState Loc_ErrorState_Error_state=OK;
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	89 83       	std	Y+1, r24	; 0x01

		if(copy_LED_object->LedActiveState==ACTIVE_HIGH)
    2b38:	ea 81       	ldd	r30, Y+2	; 0x02
    2b3a:	fb 81       	ldd	r31, Y+3	; 0x03
    2b3c:	82 81       	ldd	r24, Z+2	; 0x02
    2b3e:	81 30       	cpi	r24, 0x01	; 1
    2b40:	59 f4       	brne	.+22     	; 0x2b58 <HLED_Errorstate_Led_Off+0x34>
		{
			MDIO_Errorstate_SetPinValue(copy_LED_object->LedPort,copy_LED_object->LedPin,PIN_LOW);
    2b42:	ea 81       	ldd	r30, Y+2	; 0x02
    2b44:	fb 81       	ldd	r31, Y+3	; 0x03
    2b46:	80 81       	ld	r24, Z
    2b48:	ea 81       	ldd	r30, Y+2	; 0x02
    2b4a:	fb 81       	ldd	r31, Y+3	; 0x03
    2b4c:	91 81       	ldd	r25, Z+1	; 0x01
    2b4e:	69 2f       	mov	r22, r25
    2b50:	40 e0       	ldi	r20, 0x00	; 0
    2b52:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
    2b56:	11 c0       	rjmp	.+34     	; 0x2b7a <HLED_Errorstate_Led_Off+0x56>
		}
		else if(copy_LED_object->LedActiveState==ACTIVE_LOW)
    2b58:	ea 81       	ldd	r30, Y+2	; 0x02
    2b5a:	fb 81       	ldd	r31, Y+3	; 0x03
    2b5c:	82 81       	ldd	r24, Z+2	; 0x02
    2b5e:	88 23       	and	r24, r24
    2b60:	59 f4       	brne	.+22     	; 0x2b78 <HLED_Errorstate_Led_Off+0x54>
		{
			MDIO_Errorstate_SetPinValue(copy_LED_object->LedPort,copy_LED_object->LedPin,PIN_HIGH);
    2b62:	ea 81       	ldd	r30, Y+2	; 0x02
    2b64:	fb 81       	ldd	r31, Y+3	; 0x03
    2b66:	80 81       	ld	r24, Z
    2b68:	ea 81       	ldd	r30, Y+2	; 0x02
    2b6a:	fb 81       	ldd	r31, Y+3	; 0x03
    2b6c:	91 81       	ldd	r25, Z+1	; 0x01
    2b6e:	69 2f       	mov	r22, r25
    2b70:	41 e0       	ldi	r20, 0x01	; 1
    2b72:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
    2b76:	01 c0       	rjmp	.+2      	; 0x2b7a <HLED_Errorstate_Led_Off+0x56>
		}
		else
		{
			Loc_ErrorState_Error_state=NOK;
    2b78:	19 82       	std	Y+1, r1	; 0x01
		}

		return Loc_ErrorState_Error_state;
    2b7a:	89 81       	ldd	r24, Y+1	; 0x01
		}
    2b7c:	0f 90       	pop	r0
    2b7e:	0f 90       	pop	r0
    2b80:	0f 90       	pop	r0
    2b82:	cf 91       	pop	r28
    2b84:	df 91       	pop	r29
    2b86:	08 95       	ret

00002b88 <HLED_Errorstate_Led_Toggle>:

	ErrorState HLED_Errorstate_Led_Toggle(LED_T* copy_LED_object)
	{
    2b88:	df 93       	push	r29
    2b8a:	cf 93       	push	r28
    2b8c:	00 d0       	rcall	.+0      	; 0x2b8e <HLED_Errorstate_Led_Toggle+0x6>
    2b8e:	0f 92       	push	r0
    2b90:	cd b7       	in	r28, 0x3d	; 61
    2b92:	de b7       	in	r29, 0x3e	; 62
    2b94:	9b 83       	std	Y+3, r25	; 0x03
    2b96:	8a 83       	std	Y+2, r24	; 0x02
		static uint8 flag=0; // imp
		ErrorState Loc_ErrorState_Error_state=OK;
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	89 83       	std	Y+1, r24	; 0x01
		if(flag==0)
    2b9c:	80 91 98 00 	lds	r24, 0x0098
    2ba0:	88 23       	and	r24, r24
    2ba2:	71 f4       	brne	.+28     	; 0x2bc0 <HLED_Errorstate_Led_Toggle+0x38>
		{
			MDIO_Errorstate_SetPinValue(copy_LED_object->LedPort,copy_LED_object->LedPin,PIN_HIGH);
    2ba4:	ea 81       	ldd	r30, Y+2	; 0x02
    2ba6:	fb 81       	ldd	r31, Y+3	; 0x03
    2ba8:	80 81       	ld	r24, Z
    2baa:	ea 81       	ldd	r30, Y+2	; 0x02
    2bac:	fb 81       	ldd	r31, Y+3	; 0x03
    2bae:	91 81       	ldd	r25, Z+1	; 0x01
    2bb0:	69 2f       	mov	r22, r25
    2bb2:	41 e0       	ldi	r20, 0x01	; 1
    2bb4:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
			flag=1;
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	80 93 98 00 	sts	0x0098, r24
    2bbe:	10 c0       	rjmp	.+32     	; 0x2be0 <HLED_Errorstate_Led_Toggle+0x58>
		}
		else if(flag==1)
    2bc0:	80 91 98 00 	lds	r24, 0x0098
    2bc4:	81 30       	cpi	r24, 0x01	; 1
    2bc6:	61 f4       	brne	.+24     	; 0x2be0 <HLED_Errorstate_Led_Toggle+0x58>
		{

			MDIO_Errorstate_SetPinValue(copy_LED_object->LedPort,copy_LED_object->LedPin,PIN_LOW);
    2bc8:	ea 81       	ldd	r30, Y+2	; 0x02
    2bca:	fb 81       	ldd	r31, Y+3	; 0x03
    2bcc:	80 81       	ld	r24, Z
    2bce:	ea 81       	ldd	r30, Y+2	; 0x02
    2bd0:	fb 81       	ldd	r31, Y+3	; 0x03
    2bd2:	91 81       	ldd	r25, Z+1	; 0x01
    2bd4:	69 2f       	mov	r22, r25
    2bd6:	40 e0       	ldi	r20, 0x00	; 0
    2bd8:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
			flag=0;
    2bdc:	10 92 98 00 	sts	0x0098, r1
		}
		else
		{
			/*do nothing*/
		}
		return Loc_ErrorState_Error_state;
    2be0:	89 81       	ldd	r24, Y+1	; 0x01
	}
    2be2:	0f 90       	pop	r0
    2be4:	0f 90       	pop	r0
    2be6:	0f 90       	pop	r0
    2be8:	cf 91       	pop	r28
    2bea:	df 91       	pop	r29
    2bec:	08 95       	ret

00002bee <HKPD_VidInit>:
				'D'
		}
};
/* keypad init */
void HKPD_VidInit(void)
{
    2bee:	df 93       	push	r29
    2bf0:	cf 93       	push	r28
    2bf2:	cd b7       	in	r28, 0x3d	; 61
    2bf4:	de b7       	in	r29, 0x3e	; 62
	/*Set Row PINS AS AN inPUT*/
	MDIO_Errorstate_SetPinDirection(HKPD_ROWPORT,HKPD_ROWPIN0,PIN_INPUT);
    2bf6:	80 e0       	ldi	r24, 0x00	; 0
    2bf8:	60 e0       	ldi	r22, 0x00	; 0
    2bfa:	40 e0       	ldi	r20, 0x00	; 0
    2bfc:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HKPD_ROWPORT,HKPD_ROWPIN1,PIN_INPUT);
    2c00:	80 e0       	ldi	r24, 0x00	; 0
    2c02:	61 e0       	ldi	r22, 0x01	; 1
    2c04:	40 e0       	ldi	r20, 0x00	; 0
    2c06:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HKPD_ROWPORT,HKPD_ROWPIN2,PIN_INPUT);
    2c0a:	80 e0       	ldi	r24, 0x00	; 0
    2c0c:	62 e0       	ldi	r22, 0x02	; 2
    2c0e:	40 e0       	ldi	r20, 0x00	; 0
    2c10:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HKPD_ROWPORT,HKPD_ROWPIN3,PIN_INPUT);
    2c14:	80 e0       	ldi	r24, 0x00	; 0
    2c16:	63 e0       	ldi	r22, 0x03	; 3
    2c18:	40 e0       	ldi	r20, 0x00	; 0
    2c1a:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <MDIO_Errorstate_SetPinDirection>

	/*Active internal  PULL UP RESISTOR for Row PINS*/
	MDIO_Errorstate_SetPinValue(HKPD_ROWPORT,HKPD_ROWPIN0,PIN_HIGH);
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
    2c20:	60 e0       	ldi	r22, 0x00	; 0
    2c22:	41 e0       	ldi	r20, 0x01	; 1
    2c24:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
	MDIO_Errorstate_SetPinValue(HKPD_ROWPORT,HKPD_ROWPIN1,PIN_HIGH);
    2c28:	80 e0       	ldi	r24, 0x00	; 0
    2c2a:	61 e0       	ldi	r22, 0x01	; 1
    2c2c:	41 e0       	ldi	r20, 0x01	; 1
    2c2e:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
	MDIO_Errorstate_SetPinValue(HKPD_ROWPORT,HKPD_ROWPIN2,PIN_HIGH);
    2c32:	80 e0       	ldi	r24, 0x00	; 0
    2c34:	62 e0       	ldi	r22, 0x02	; 2
    2c36:	41 e0       	ldi	r20, 0x01	; 1
    2c38:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
	MDIO_Errorstate_SetPinValue(HKPD_ROWPORT,HKPD_ROWPIN3,PIN_HIGH);
    2c3c:	80 e0       	ldi	r24, 0x00	; 0
    2c3e:	63 e0       	ldi	r22, 0x03	; 3
    2c40:	41 e0       	ldi	r20, 0x01	; 1
    2c42:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>

	/*Set COLOUM PINS AS AN OUTPUTS*/
	MDIO_Errorstate_SetPinDirection(HKPD_COLPORT,HKPD_COLPIN0,PIN_OUTPUT);
    2c46:	81 e0       	ldi	r24, 0x01	; 1
    2c48:	64 e0       	ldi	r22, 0x04	; 4
    2c4a:	41 e0       	ldi	r20, 0x01	; 1
    2c4c:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HKPD_COLPORT,HKPD_COLPIN1,PIN_OUTPUT);
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	65 e0       	ldi	r22, 0x05	; 5
    2c54:	41 e0       	ldi	r20, 0x01	; 1
    2c56:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HKPD_COLPORT,HKPD_COLPIN2,PIN_OUTPUT);
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
    2c5c:	66 e0       	ldi	r22, 0x06	; 6
    2c5e:	41 e0       	ldi	r20, 0x01	; 1
    2c60:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HKPD_COLPORT,HKPD_COLPIN3,PIN_OUTPUT);
    2c64:	81 e0       	ldi	r24, 0x01	; 1
    2c66:	67 e0       	ldi	r22, 0x07	; 7
    2c68:	41 e0       	ldi	r20, 0x01	; 1
    2c6a:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <MDIO_Errorstate_SetPinDirection>

	/* Set COLOUM PINS initial value --> one*/
	MDIO_Errorstate_SetPinValue(HKPD_COLPORT,HKPD_COLPIN0,PIN_HIGH);
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	64 e0       	ldi	r22, 0x04	; 4
    2c72:	41 e0       	ldi	r20, 0x01	; 1
    2c74:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
	MDIO_Errorstate_SetPinValue(HKPD_COLPORT,HKPD_COLPIN1,PIN_HIGH);
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	65 e0       	ldi	r22, 0x05	; 5
    2c7c:	41 e0       	ldi	r20, 0x01	; 1
    2c7e:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
	MDIO_Errorstate_SetPinValue(HKPD_COLPORT,HKPD_COLPIN2,PIN_HIGH);
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	66 e0       	ldi	r22, 0x06	; 6
    2c86:	41 e0       	ldi	r20, 0x01	; 1
    2c88:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
	MDIO_Errorstate_SetPinValue(HKPD_COLPORT,HKPD_COLPIN3,PIN_HIGH);
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	67 e0       	ldi	r22, 0x07	; 7
    2c90:	41 e0       	ldi	r20, 0x01	; 1
    2c92:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
}
    2c96:	cf 91       	pop	r28
    2c98:	df 91       	pop	r29
    2c9a:	08 95       	ret

00002c9c <HKPD_uint8GetPressed>:

  /* keypad pressed */

uint8 HKPD_uint8GetPressed(void)
{
    2c9c:	df 93       	push	r29
    2c9e:	cf 93       	push	r28
    2ca0:	cd b7       	in	r28, 0x3d	; 61
    2ca2:	de b7       	in	r29, 0x3e	; 62
    2ca4:	62 97       	sbiw	r28, 0x12	; 18
    2ca6:	0f b6       	in	r0, 0x3f	; 63
    2ca8:	f8 94       	cli
    2caa:	de bf       	out	0x3e, r29	; 62
    2cac:	0f be       	out	0x3f, r0	; 63
    2cae:	cd bf       	out	0x3d, r28	; 61
	uint8 Loc_uint8ColCount=0;
    2cb0:	19 8a       	std	Y+17, r1	; 0x11
	uint8 Loc_uint8RowCount=0;
    2cb2:	18 8a       	std	Y+16, r1	; 0x10
	uint8 Loc_uint8KeyState;
	uint8 Loc_uint8KeyValue=HKPD_NOTPRESSED;
    2cb4:	8f ef       	ldi	r24, 0xFF	; 255
    2cb6:	8f 87       	std	Y+15, r24	; 0x0f

	for(Loc_uint8ColCount=HKPD_COLINIT ; Loc_uint8ColCount<HKPD_COLEND; Loc_uint8ColCount++)
    2cb8:	84 e0       	ldi	r24, 0x04	; 4
    2cba:	89 8b       	std	Y+17, r24	; 0x11
    2cbc:	b4 c0       	rjmp	.+360    	; 0x2e26 <HKPD_uint8GetPressed+0x18a>
	{
		/*Select COLOUM*/

		MDIO_Errorstate_SetPinValue(HKPD_COLPORT,Loc_uint8ColCount,PIN_LOW);
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	69 89       	ldd	r22, Y+17	; 0x11
    2cc2:	40 e0       	ldi	r20, 0x00	; 0
    2cc4:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>

		/*select row*/

		for(Loc_uint8RowCount=HKPD_ROWINIT;Loc_uint8RowCount<HKPD_ROWEND;Loc_uint8RowCount++)
    2cc8:	18 8a       	std	Y+16, r1	; 0x10
    2cca:	a1 c0       	rjmp	.+322    	; 0x2e0e <HKPD_uint8GetPressed+0x172>
		{
			MDIO_Errorstate_GetPinValue(HKPD_ROWPORT,Loc_uint8RowCount,&Loc_uint8KeyState);
    2ccc:	9e 01       	movw	r18, r28
    2cce:	2e 5e       	subi	r18, 0xEE	; 238
    2cd0:	3f 4f       	sbci	r19, 0xFF	; 255
    2cd2:	80 e0       	ldi	r24, 0x00	; 0
    2cd4:	68 89       	ldd	r22, Y+16	; 0x10
    2cd6:	a9 01       	movw	r20, r18
    2cd8:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <MDIO_Errorstate_GetPinValue>

			if(Loc_uint8KeyState==0)
    2cdc:	8a 89       	ldd	r24, Y+18	; 0x12
    2cde:	88 23       	and	r24, r24
    2ce0:	a9 f4       	brne	.+42     	; 0x2d0c <HKPD_uint8GetPressed+0x70>
			{
				Loc_uint8KeyValue=KPD_uint8Values[Loc_uint8ColCount-HKPD_COLINIT][Loc_uint8RowCount-HKPD_ROWINIT];
    2ce2:	89 89       	ldd	r24, Y+17	; 0x11
    2ce4:	88 2f       	mov	r24, r24
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	ac 01       	movw	r20, r24
    2cea:	44 50       	subi	r20, 0x04	; 4
    2cec:	50 40       	sbci	r21, 0x00	; 0
    2cee:	88 89       	ldd	r24, Y+16	; 0x10
    2cf0:	28 2f       	mov	r18, r24
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	ca 01       	movw	r24, r20
    2cf6:	88 0f       	add	r24, r24
    2cf8:	99 1f       	adc	r25, r25
    2cfa:	88 0f       	add	r24, r24
    2cfc:	99 1f       	adc	r25, r25
    2cfe:	82 0f       	add	r24, r18
    2d00:	93 1f       	adc	r25, r19
    2d02:	fc 01       	movw	r30, r24
    2d04:	e9 57       	subi	r30, 0x79	; 121
    2d06:	ff 4f       	sbci	r31, 0xFF	; 255
    2d08:	80 81       	ld	r24, Z
    2d0a:	8f 87       	std	Y+15, r24	; 0x0f
    2d0c:	80 e0       	ldi	r24, 0x00	; 0
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	a0 ea       	ldi	r26, 0xA0	; 160
    2d12:	b1 e4       	ldi	r27, 0x41	; 65
    2d14:	8b 87       	std	Y+11, r24	; 0x0b
    2d16:	9c 87       	std	Y+12, r25	; 0x0c
    2d18:	ad 87       	std	Y+13, r26	; 0x0d
    2d1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d20:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d22:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d24:	20 e0       	ldi	r18, 0x00	; 0
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	4a e7       	ldi	r20, 0x7A	; 122
    2d2a:	55 e4       	ldi	r21, 0x45	; 69
    2d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d30:	dc 01       	movw	r26, r24
    2d32:	cb 01       	movw	r24, r22
    2d34:	8f 83       	std	Y+7, r24	; 0x07
    2d36:	98 87       	std	Y+8, r25	; 0x08
    2d38:	a9 87       	std	Y+9, r26	; 0x09
    2d3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d3e:	78 85       	ldd	r23, Y+8	; 0x08
    2d40:	89 85       	ldd	r24, Y+9	; 0x09
    2d42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	40 e8       	ldi	r20, 0x80	; 128
    2d4a:	5f e3       	ldi	r21, 0x3F	; 63
    2d4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d50:	88 23       	and	r24, r24
    2d52:	2c f4       	brge	.+10     	; 0x2d5e <HKPD_uint8GetPressed+0xc2>
		__ticks = 1;
    2d54:	81 e0       	ldi	r24, 0x01	; 1
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	9e 83       	std	Y+6, r25	; 0x06
    2d5a:	8d 83       	std	Y+5, r24	; 0x05
    2d5c:	3f c0       	rjmp	.+126    	; 0x2ddc <HKPD_uint8GetPressed+0x140>
	else if (__tmp > 65535)
    2d5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d60:	78 85       	ldd	r23, Y+8	; 0x08
    2d62:	89 85       	ldd	r24, Y+9	; 0x09
    2d64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	3f ef       	ldi	r19, 0xFF	; 255
    2d6a:	4f e7       	ldi	r20, 0x7F	; 127
    2d6c:	57 e4       	ldi	r21, 0x47	; 71
    2d6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d72:	18 16       	cp	r1, r24
    2d74:	4c f5       	brge	.+82     	; 0x2dc8 <HKPD_uint8GetPressed+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d76:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d78:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	40 e2       	ldi	r20, 0x20	; 32
    2d84:	51 e4       	ldi	r21, 0x41	; 65
    2d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	bc 01       	movw	r22, r24
    2d90:	cd 01       	movw	r24, r26
    2d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d96:	dc 01       	movw	r26, r24
    2d98:	cb 01       	movw	r24, r22
    2d9a:	9e 83       	std	Y+6, r25	; 0x06
    2d9c:	8d 83       	std	Y+5, r24	; 0x05
    2d9e:	0f c0       	rjmp	.+30     	; 0x2dbe <HKPD_uint8GetPressed+0x122>
    2da0:	80 e9       	ldi	r24, 0x90	; 144
    2da2:	91 e0       	ldi	r25, 0x01	; 1
    2da4:	9c 83       	std	Y+4, r25	; 0x04
    2da6:	8b 83       	std	Y+3, r24	; 0x03
    2da8:	8b 81       	ldd	r24, Y+3	; 0x03
    2daa:	9c 81       	ldd	r25, Y+4	; 0x04
    2dac:	01 97       	sbiw	r24, 0x01	; 1
    2dae:	f1 f7       	brne	.-4      	; 0x2dac <HKPD_uint8GetPressed+0x110>
    2db0:	9c 83       	std	Y+4, r25	; 0x04
    2db2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db4:	8d 81       	ldd	r24, Y+5	; 0x05
    2db6:	9e 81       	ldd	r25, Y+6	; 0x06
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	9e 83       	std	Y+6, r25	; 0x06
    2dbc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc2:	00 97       	sbiw	r24, 0x00	; 0
    2dc4:	69 f7       	brne	.-38     	; 0x2da0 <HKPD_uint8GetPressed+0x104>
    2dc6:	1d c0       	rjmp	.+58     	; 0x2e02 <HKPD_uint8GetPressed+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dc8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dca:	78 85       	ldd	r23, Y+8	; 0x08
    2dcc:	89 85       	ldd	r24, Y+9	; 0x09
    2dce:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd4:	dc 01       	movw	r26, r24
    2dd6:	cb 01       	movw	r24, r22
    2dd8:	9e 83       	std	Y+6, r25	; 0x06
    2dda:	8d 83       	std	Y+5, r24	; 0x05
    2ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dde:	9e 81       	ldd	r25, Y+6	; 0x06
    2de0:	9a 83       	std	Y+2, r25	; 0x02
    2de2:	89 83       	std	Y+1, r24	; 0x01
    2de4:	89 81       	ldd	r24, Y+1	; 0x01
    2de6:	9a 81       	ldd	r25, Y+2	; 0x02
    2de8:	01 97       	sbiw	r24, 0x01	; 1
    2dea:	f1 f7       	brne	.-4      	; 0x2de8 <HKPD_uint8GetPressed+0x14c>
    2dec:	9a 83       	std	Y+2, r25	; 0x02
    2dee:	89 83       	std	Y+1, r24	; 0x01
    2df0:	08 c0       	rjmp	.+16     	; 0x2e02 <HKPD_uint8GetPressed+0x166>
			_delay_ms(20);

			/*to do one press*/
			while(Loc_uint8KeyState==0)
			{
				MDIO_Errorstate_GetPinValue(HKPD_ROWPORT,Loc_uint8RowCount,&Loc_uint8KeyState);
    2df2:	9e 01       	movw	r18, r28
    2df4:	2e 5e       	subi	r18, 0xEE	; 238
    2df6:	3f 4f       	sbci	r19, 0xFF	; 255
    2df8:	80 e0       	ldi	r24, 0x00	; 0
    2dfa:	68 89       	ldd	r22, Y+16	; 0x10
    2dfc:	a9 01       	movw	r20, r18
    2dfe:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <MDIO_Errorstate_GetPinValue>

			/* DE_POuncing*/
			_delay_ms(20);

			/*to do one press*/
			while(Loc_uint8KeyState==0)
    2e02:	8a 89       	ldd	r24, Y+18	; 0x12
    2e04:	88 23       	and	r24, r24
    2e06:	a9 f3       	breq	.-22     	; 0x2df2 <HKPD_uint8GetPressed+0x156>

		MDIO_Errorstate_SetPinValue(HKPD_COLPORT,Loc_uint8ColCount,PIN_LOW);

		/*select row*/

		for(Loc_uint8RowCount=HKPD_ROWINIT;Loc_uint8RowCount<HKPD_ROWEND;Loc_uint8RowCount++)
    2e08:	88 89       	ldd	r24, Y+16	; 0x10
    2e0a:	8f 5f       	subi	r24, 0xFF	; 255
    2e0c:	88 8b       	std	Y+16, r24	; 0x10
    2e0e:	88 89       	ldd	r24, Y+16	; 0x10
    2e10:	84 30       	cpi	r24, 0x04	; 4
    2e12:	08 f4       	brcc	.+2      	; 0x2e16 <HKPD_uint8GetPressed+0x17a>
    2e14:	5b cf       	rjmp	.-330    	; 0x2ccc <HKPD_uint8GetPressed+0x30>
			}
		}

		/*DE_Activate for coloum*/

		MDIO_Errorstate_SetPinValue(HKPD_COLPORT,Loc_uint8ColCount,PIN_HIGH);
    2e16:	81 e0       	ldi	r24, 0x01	; 1
    2e18:	69 89       	ldd	r22, Y+17	; 0x11
    2e1a:	41 e0       	ldi	r20, 0x01	; 1
    2e1c:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
	uint8 Loc_uint8ColCount=0;
	uint8 Loc_uint8RowCount=0;
	uint8 Loc_uint8KeyState;
	uint8 Loc_uint8KeyValue=HKPD_NOTPRESSED;

	for(Loc_uint8ColCount=HKPD_COLINIT ; Loc_uint8ColCount<HKPD_COLEND; Loc_uint8ColCount++)
    2e20:	89 89       	ldd	r24, Y+17	; 0x11
    2e22:	8f 5f       	subi	r24, 0xFF	; 255
    2e24:	89 8b       	std	Y+17, r24	; 0x11
    2e26:	89 89       	ldd	r24, Y+17	; 0x11
    2e28:	88 30       	cpi	r24, 0x08	; 8
    2e2a:	08 f4       	brcc	.+2      	; 0x2e2e <HKPD_uint8GetPressed+0x192>
    2e2c:	48 cf       	rjmp	.-368    	; 0x2cbe <HKPD_uint8GetPressed+0x22>

		/*DE_Activate for coloum*/

		MDIO_Errorstate_SetPinValue(HKPD_COLPORT,Loc_uint8ColCount,PIN_HIGH);
	}
	return Loc_uint8KeyValue;
    2e2e:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2e30:	62 96       	adiw	r28, 0x12	; 18
    2e32:	0f b6       	in	r0, 0x3f	; 63
    2e34:	f8 94       	cli
    2e36:	de bf       	out	0x3e, r29	; 62
    2e38:	0f be       	out	0x3f, r0	; 63
    2e3a:	cd bf       	out	0x3d, r28	; 61
    2e3c:	cf 91       	pop	r28
    2e3e:	df 91       	pop	r29
    2e40:	08 95       	ret

00002e42 <HAL_VidHCLCD_4BitModeWriteCommand>:
#include"HCLCD_Config.h"
#define F_CPU   16000000UL
#include"util/delay.h"

void HAL_VidHCLCD_4BitModeWriteCommand(uint8 Copy_uint8Command)
{
    2e42:	df 93       	push	r29
    2e44:	cf 93       	push	r28
    2e46:	cd b7       	in	r28, 0x3d	; 61
    2e48:	de b7       	in	r29, 0x3e	; 62
    2e4a:	2f 97       	sbiw	r28, 0x0f	; 15
    2e4c:	0f b6       	in	r0, 0x3f	; 63
    2e4e:	f8 94       	cli
    2e50:	de bf       	out	0x3e, r29	; 62
    2e52:	0f be       	out	0x3f, r0	; 63
    2e54:	cd bf       	out	0x3d, r28	; 61
    2e56:	8f 87       	std	Y+15, r24	; 0x0f
	/*Select Command Register-->LOW*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,RS_PIN,PIN_LOW);
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	61 e0       	ldi	r22, 0x01	; 1
    2e5c:	40 e0       	ldi	r20, 0x00	; 0
    2e5e:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
	/*Select Write Mode*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,RW_PIN,PIN_LOW);
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	62 e0       	ldi	r22, 0x02	; 2
    2e66:	40 e0       	ldi	r20, 0x00	; 0
    2e68:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
	/*Send Command*/
	MDIO_Errorstate_Set4MostBits(HCLCD_DataPort,Copy_uint8Command);
    2e6c:	80 e0       	ldi	r24, 0x00	; 0
    2e6e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2e70:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <MDIO_Errorstate_Set4MostBits>
	/*LCD Enable*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,E_PIN,PIN_HIGH);
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	63 e0       	ldi	r22, 0x03	; 3
    2e78:	41 e0       	ldi	r20, 0x01	; 1
    2e7a:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
    2e7e:	80 e0       	ldi	r24, 0x00	; 0
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	a0 e0       	ldi	r26, 0x00	; 0
    2e84:	b0 e4       	ldi	r27, 0x40	; 64
    2e86:	8b 87       	std	Y+11, r24	; 0x0b
    2e88:	9c 87       	std	Y+12, r25	; 0x0c
    2e8a:	ad 87       	std	Y+13, r26	; 0x0d
    2e8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e90:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e96:	20 e0       	ldi	r18, 0x00	; 0
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	4a e7       	ldi	r20, 0x7A	; 122
    2e9c:	55 e4       	ldi	r21, 0x45	; 69
    2e9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea2:	dc 01       	movw	r26, r24
    2ea4:	cb 01       	movw	r24, r22
    2ea6:	8f 83       	std	Y+7, r24	; 0x07
    2ea8:	98 87       	std	Y+8, r25	; 0x08
    2eaa:	a9 87       	std	Y+9, r26	; 0x09
    2eac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eae:	6f 81       	ldd	r22, Y+7	; 0x07
    2eb0:	78 85       	ldd	r23, Y+8	; 0x08
    2eb2:	89 85       	ldd	r24, Y+9	; 0x09
    2eb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb6:	20 e0       	ldi	r18, 0x00	; 0
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	40 e8       	ldi	r20, 0x80	; 128
    2ebc:	5f e3       	ldi	r21, 0x3F	; 63
    2ebe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ec2:	88 23       	and	r24, r24
    2ec4:	2c f4       	brge	.+10     	; 0x2ed0 <HAL_VidHCLCD_4BitModeWriteCommand+0x8e>
		__ticks = 1;
    2ec6:	81 e0       	ldi	r24, 0x01	; 1
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	9e 83       	std	Y+6, r25	; 0x06
    2ecc:	8d 83       	std	Y+5, r24	; 0x05
    2ece:	3f c0       	rjmp	.+126    	; 0x2f4e <HAL_VidHCLCD_4BitModeWriteCommand+0x10c>
	else if (__tmp > 65535)
    2ed0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ed2:	78 85       	ldd	r23, Y+8	; 0x08
    2ed4:	89 85       	ldd	r24, Y+9	; 0x09
    2ed6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	3f ef       	ldi	r19, 0xFF	; 255
    2edc:	4f e7       	ldi	r20, 0x7F	; 127
    2ede:	57 e4       	ldi	r21, 0x47	; 71
    2ee0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ee4:	18 16       	cp	r1, r24
    2ee6:	4c f5       	brge	.+82     	; 0x2f3a <HAL_VidHCLCD_4BitModeWriteCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ee8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eea:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eec:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eee:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ef0:	20 e0       	ldi	r18, 0x00	; 0
    2ef2:	30 e0       	ldi	r19, 0x00	; 0
    2ef4:	40 e2       	ldi	r20, 0x20	; 32
    2ef6:	51 e4       	ldi	r21, 0x41	; 65
    2ef8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2efc:	dc 01       	movw	r26, r24
    2efe:	cb 01       	movw	r24, r22
    2f00:	bc 01       	movw	r22, r24
    2f02:	cd 01       	movw	r24, r26
    2f04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	9e 83       	std	Y+6, r25	; 0x06
    2f0e:	8d 83       	std	Y+5, r24	; 0x05
    2f10:	0f c0       	rjmp	.+30     	; 0x2f30 <HAL_VidHCLCD_4BitModeWriteCommand+0xee>
    2f12:	80 e9       	ldi	r24, 0x90	; 144
    2f14:	91 e0       	ldi	r25, 0x01	; 1
    2f16:	9c 83       	std	Y+4, r25	; 0x04
    2f18:	8b 83       	std	Y+3, r24	; 0x03
    2f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f1e:	01 97       	sbiw	r24, 0x01	; 1
    2f20:	f1 f7       	brne	.-4      	; 0x2f1e <HAL_VidHCLCD_4BitModeWriteCommand+0xdc>
    2f22:	9c 83       	std	Y+4, r25	; 0x04
    2f24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f26:	8d 81       	ldd	r24, Y+5	; 0x05
    2f28:	9e 81       	ldd	r25, Y+6	; 0x06
    2f2a:	01 97       	sbiw	r24, 0x01	; 1
    2f2c:	9e 83       	std	Y+6, r25	; 0x06
    2f2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f30:	8d 81       	ldd	r24, Y+5	; 0x05
    2f32:	9e 81       	ldd	r25, Y+6	; 0x06
    2f34:	00 97       	sbiw	r24, 0x00	; 0
    2f36:	69 f7       	brne	.-38     	; 0x2f12 <HAL_VidHCLCD_4BitModeWriteCommand+0xd0>
    2f38:	14 c0       	rjmp	.+40     	; 0x2f62 <HAL_VidHCLCD_4BitModeWriteCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f3a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f3c:	78 85       	ldd	r23, Y+8	; 0x08
    2f3e:	89 85       	ldd	r24, Y+9	; 0x09
    2f40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f46:	dc 01       	movw	r26, r24
    2f48:	cb 01       	movw	r24, r22
    2f4a:	9e 83       	std	Y+6, r25	; 0x06
    2f4c:	8d 83       	std	Y+5, r24	; 0x05
    2f4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f50:	9e 81       	ldd	r25, Y+6	; 0x06
    2f52:	9a 83       	std	Y+2, r25	; 0x02
    2f54:	89 83       	std	Y+1, r24	; 0x01
    2f56:	89 81       	ldd	r24, Y+1	; 0x01
    2f58:	9a 81       	ldd	r25, Y+2	; 0x02
    2f5a:	01 97       	sbiw	r24, 0x01	; 1
    2f5c:	f1 f7       	brne	.-4      	; 0x2f5a <HAL_VidHCLCD_4BitModeWriteCommand+0x118>
    2f5e:	9a 83       	std	Y+2, r25	; 0x02
    2f60:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,E_PIN,PIN_LOW);
    2f62:	81 e0       	ldi	r24, 0x01	; 1
    2f64:	63 e0       	ldi	r22, 0x03	; 3
    2f66:	40 e0       	ldi	r20, 0x00	; 0
    2f68:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
}
    2f6c:	2f 96       	adiw	r28, 0x0f	; 15
    2f6e:	0f b6       	in	r0, 0x3f	; 63
    2f70:	f8 94       	cli
    2f72:	de bf       	out	0x3e, r29	; 62
    2f74:	0f be       	out	0x3f, r0	; 63
    2f76:	cd bf       	out	0x3d, r28	; 61
    2f78:	cf 91       	pop	r28
    2f7a:	df 91       	pop	r29
    2f7c:	08 95       	ret

00002f7e <HAL_VidHCLCD_4BitModeWriteChar>:
void HAL_VidHCLCD_4BitModeWriteChar(uint8 Copy_uint8Char)
{
    2f7e:	df 93       	push	r29
    2f80:	cf 93       	push	r28
    2f82:	cd b7       	in	r28, 0x3d	; 61
    2f84:	de b7       	in	r29, 0x3e	; 62
    2f86:	6d 97       	sbiw	r28, 0x1d	; 29
    2f88:	0f b6       	in	r0, 0x3f	; 63
    2f8a:	f8 94       	cli
    2f8c:	de bf       	out	0x3e, r29	; 62
    2f8e:	0f be       	out	0x3f, r0	; 63
    2f90:	cd bf       	out	0x3d, r28	; 61
    2f92:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Select Data Register-->HIGH*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,RS_PIN,PIN_HIGH);
    2f94:	81 e0       	ldi	r24, 0x01	; 1
    2f96:	61 e0       	ldi	r22, 0x01	; 1
    2f98:	41 e0       	ldi	r20, 0x01	; 1
    2f9a:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
	/*Select Write Mode*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,RW_PIN,PIN_LOW);
    2f9e:	81 e0       	ldi	r24, 0x01	; 1
    2fa0:	62 e0       	ldi	r22, 0x02	; 2
    2fa2:	40 e0       	ldi	r20, 0x00	; 0
    2fa4:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
	/*Send 4 Most Bits of Data*/
	MDIO_Errorstate_Set4MostBits(HCLCD_DataPort,(Copy_uint8Char&0xF0));
    2fa8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2faa:	98 2f       	mov	r25, r24
    2fac:	90 7f       	andi	r25, 0xF0	; 240
    2fae:	80 e0       	ldi	r24, 0x00	; 0
    2fb0:	69 2f       	mov	r22, r25
    2fb2:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <MDIO_Errorstate_Set4MostBits>
	/*LCD Enable*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,E_PIN,PIN_HIGH);
    2fb6:	81 e0       	ldi	r24, 0x01	; 1
    2fb8:	63 e0       	ldi	r22, 0x03	; 3
    2fba:	41 e0       	ldi	r20, 0x01	; 1
    2fbc:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
    2fc0:	80 e0       	ldi	r24, 0x00	; 0
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	a0 e0       	ldi	r26, 0x00	; 0
    2fc6:	b0 e4       	ldi	r27, 0x40	; 64
    2fc8:	89 8f       	std	Y+25, r24	; 0x19
    2fca:	9a 8f       	std	Y+26, r25	; 0x1a
    2fcc:	ab 8f       	std	Y+27, r26	; 0x1b
    2fce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fd0:	69 8d       	ldd	r22, Y+25	; 0x19
    2fd2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fd8:	20 e0       	ldi	r18, 0x00	; 0
    2fda:	30 e0       	ldi	r19, 0x00	; 0
    2fdc:	4a e7       	ldi	r20, 0x7A	; 122
    2fde:	55 e4       	ldi	r21, 0x45	; 69
    2fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe4:	dc 01       	movw	r26, r24
    2fe6:	cb 01       	movw	r24, r22
    2fe8:	8d 8b       	std	Y+21, r24	; 0x15
    2fea:	9e 8b       	std	Y+22, r25	; 0x16
    2fec:	af 8b       	std	Y+23, r26	; 0x17
    2fee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ff0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ff2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ff4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ff6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ff8:	20 e0       	ldi	r18, 0x00	; 0
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	40 e8       	ldi	r20, 0x80	; 128
    2ffe:	5f e3       	ldi	r21, 0x3F	; 63
    3000:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3004:	88 23       	and	r24, r24
    3006:	2c f4       	brge	.+10     	; 0x3012 <HAL_VidHCLCD_4BitModeWriteChar+0x94>
		__ticks = 1;
    3008:	81 e0       	ldi	r24, 0x01	; 1
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	9c 8b       	std	Y+20, r25	; 0x14
    300e:	8b 8b       	std	Y+19, r24	; 0x13
    3010:	3f c0       	rjmp	.+126    	; 0x3090 <HAL_VidHCLCD_4BitModeWriteChar+0x112>
	else if (__tmp > 65535)
    3012:	6d 89       	ldd	r22, Y+21	; 0x15
    3014:	7e 89       	ldd	r23, Y+22	; 0x16
    3016:	8f 89       	ldd	r24, Y+23	; 0x17
    3018:	98 8d       	ldd	r25, Y+24	; 0x18
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	3f ef       	ldi	r19, 0xFF	; 255
    301e:	4f e7       	ldi	r20, 0x7F	; 127
    3020:	57 e4       	ldi	r21, 0x47	; 71
    3022:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3026:	18 16       	cp	r1, r24
    3028:	4c f5       	brge	.+82     	; 0x307c <HAL_VidHCLCD_4BitModeWriteChar+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    302a:	69 8d       	ldd	r22, Y+25	; 0x19
    302c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    302e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3030:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3032:	20 e0       	ldi	r18, 0x00	; 0
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	40 e2       	ldi	r20, 0x20	; 32
    3038:	51 e4       	ldi	r21, 0x41	; 65
    303a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    303e:	dc 01       	movw	r26, r24
    3040:	cb 01       	movw	r24, r22
    3042:	bc 01       	movw	r22, r24
    3044:	cd 01       	movw	r24, r26
    3046:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    304a:	dc 01       	movw	r26, r24
    304c:	cb 01       	movw	r24, r22
    304e:	9c 8b       	std	Y+20, r25	; 0x14
    3050:	8b 8b       	std	Y+19, r24	; 0x13
    3052:	0f c0       	rjmp	.+30     	; 0x3072 <HAL_VidHCLCD_4BitModeWriteChar+0xf4>
    3054:	80 e9       	ldi	r24, 0x90	; 144
    3056:	91 e0       	ldi	r25, 0x01	; 1
    3058:	9a 8b       	std	Y+18, r25	; 0x12
    305a:	89 8b       	std	Y+17, r24	; 0x11
    305c:	89 89       	ldd	r24, Y+17	; 0x11
    305e:	9a 89       	ldd	r25, Y+18	; 0x12
    3060:	01 97       	sbiw	r24, 0x01	; 1
    3062:	f1 f7       	brne	.-4      	; 0x3060 <HAL_VidHCLCD_4BitModeWriteChar+0xe2>
    3064:	9a 8b       	std	Y+18, r25	; 0x12
    3066:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3068:	8b 89       	ldd	r24, Y+19	; 0x13
    306a:	9c 89       	ldd	r25, Y+20	; 0x14
    306c:	01 97       	sbiw	r24, 0x01	; 1
    306e:	9c 8b       	std	Y+20, r25	; 0x14
    3070:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3072:	8b 89       	ldd	r24, Y+19	; 0x13
    3074:	9c 89       	ldd	r25, Y+20	; 0x14
    3076:	00 97       	sbiw	r24, 0x00	; 0
    3078:	69 f7       	brne	.-38     	; 0x3054 <HAL_VidHCLCD_4BitModeWriteChar+0xd6>
    307a:	14 c0       	rjmp	.+40     	; 0x30a4 <HAL_VidHCLCD_4BitModeWriteChar+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    307c:	6d 89       	ldd	r22, Y+21	; 0x15
    307e:	7e 89       	ldd	r23, Y+22	; 0x16
    3080:	8f 89       	ldd	r24, Y+23	; 0x17
    3082:	98 8d       	ldd	r25, Y+24	; 0x18
    3084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3088:	dc 01       	movw	r26, r24
    308a:	cb 01       	movw	r24, r22
    308c:	9c 8b       	std	Y+20, r25	; 0x14
    308e:	8b 8b       	std	Y+19, r24	; 0x13
    3090:	8b 89       	ldd	r24, Y+19	; 0x13
    3092:	9c 89       	ldd	r25, Y+20	; 0x14
    3094:	98 8b       	std	Y+16, r25	; 0x10
    3096:	8f 87       	std	Y+15, r24	; 0x0f
    3098:	8f 85       	ldd	r24, Y+15	; 0x0f
    309a:	98 89       	ldd	r25, Y+16	; 0x10
    309c:	01 97       	sbiw	r24, 0x01	; 1
    309e:	f1 f7       	brne	.-4      	; 0x309c <HAL_VidHCLCD_4BitModeWriteChar+0x11e>
    30a0:	98 8b       	std	Y+16, r25	; 0x10
    30a2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,E_PIN,PIN_LOW);
    30a4:	81 e0       	ldi	r24, 0x01	; 1
    30a6:	63 e0       	ldi	r22, 0x03	; 3
    30a8:	40 e0       	ldi	r20, 0x00	; 0
    30aa:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
	/*Send 4 Least Bits of Data*/
	MDIO_Errorstate_Set4MostBits(HCLCD_DataPort,(Copy_uint8Char<<4));
    30ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30b0:	98 2f       	mov	r25, r24
    30b2:	92 95       	swap	r25
    30b4:	90 7f       	andi	r25, 0xF0	; 240
    30b6:	80 e0       	ldi	r24, 0x00	; 0
    30b8:	69 2f       	mov	r22, r25
    30ba:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <MDIO_Errorstate_Set4MostBits>
	/*LCD Enable*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,E_PIN,PIN_HIGH);
    30be:	81 e0       	ldi	r24, 0x01	; 1
    30c0:	63 e0       	ldi	r22, 0x03	; 3
    30c2:	41 e0       	ldi	r20, 0x01	; 1
    30c4:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
    30c8:	80 e0       	ldi	r24, 0x00	; 0
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	a0 e0       	ldi	r26, 0x00	; 0
    30ce:	b0 e4       	ldi	r27, 0x40	; 64
    30d0:	8b 87       	std	Y+11, r24	; 0x0b
    30d2:	9c 87       	std	Y+12, r25	; 0x0c
    30d4:	ad 87       	std	Y+13, r26	; 0x0d
    30d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    30da:	7c 85       	ldd	r23, Y+12	; 0x0c
    30dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    30de:	9e 85       	ldd	r25, Y+14	; 0x0e
    30e0:	20 e0       	ldi	r18, 0x00	; 0
    30e2:	30 e0       	ldi	r19, 0x00	; 0
    30e4:	4a e7       	ldi	r20, 0x7A	; 122
    30e6:	55 e4       	ldi	r21, 0x45	; 69
    30e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ec:	dc 01       	movw	r26, r24
    30ee:	cb 01       	movw	r24, r22
    30f0:	8f 83       	std	Y+7, r24	; 0x07
    30f2:	98 87       	std	Y+8, r25	; 0x08
    30f4:	a9 87       	std	Y+9, r26	; 0x09
    30f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30f8:	6f 81       	ldd	r22, Y+7	; 0x07
    30fa:	78 85       	ldd	r23, Y+8	; 0x08
    30fc:	89 85       	ldd	r24, Y+9	; 0x09
    30fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3100:	20 e0       	ldi	r18, 0x00	; 0
    3102:	30 e0       	ldi	r19, 0x00	; 0
    3104:	40 e8       	ldi	r20, 0x80	; 128
    3106:	5f e3       	ldi	r21, 0x3F	; 63
    3108:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    310c:	88 23       	and	r24, r24
    310e:	2c f4       	brge	.+10     	; 0x311a <HAL_VidHCLCD_4BitModeWriteChar+0x19c>
		__ticks = 1;
    3110:	81 e0       	ldi	r24, 0x01	; 1
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	9e 83       	std	Y+6, r25	; 0x06
    3116:	8d 83       	std	Y+5, r24	; 0x05
    3118:	3f c0       	rjmp	.+126    	; 0x3198 <HAL_VidHCLCD_4BitModeWriteChar+0x21a>
	else if (__tmp > 65535)
    311a:	6f 81       	ldd	r22, Y+7	; 0x07
    311c:	78 85       	ldd	r23, Y+8	; 0x08
    311e:	89 85       	ldd	r24, Y+9	; 0x09
    3120:	9a 85       	ldd	r25, Y+10	; 0x0a
    3122:	20 e0       	ldi	r18, 0x00	; 0
    3124:	3f ef       	ldi	r19, 0xFF	; 255
    3126:	4f e7       	ldi	r20, 0x7F	; 127
    3128:	57 e4       	ldi	r21, 0x47	; 71
    312a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    312e:	18 16       	cp	r1, r24
    3130:	4c f5       	brge	.+82     	; 0x3184 <HAL_VidHCLCD_4BitModeWriteChar+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3132:	6b 85       	ldd	r22, Y+11	; 0x0b
    3134:	7c 85       	ldd	r23, Y+12	; 0x0c
    3136:	8d 85       	ldd	r24, Y+13	; 0x0d
    3138:	9e 85       	ldd	r25, Y+14	; 0x0e
    313a:	20 e0       	ldi	r18, 0x00	; 0
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	40 e2       	ldi	r20, 0x20	; 32
    3140:	51 e4       	ldi	r21, 0x41	; 65
    3142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3146:	dc 01       	movw	r26, r24
    3148:	cb 01       	movw	r24, r22
    314a:	bc 01       	movw	r22, r24
    314c:	cd 01       	movw	r24, r26
    314e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3152:	dc 01       	movw	r26, r24
    3154:	cb 01       	movw	r24, r22
    3156:	9e 83       	std	Y+6, r25	; 0x06
    3158:	8d 83       	std	Y+5, r24	; 0x05
    315a:	0f c0       	rjmp	.+30     	; 0x317a <HAL_VidHCLCD_4BitModeWriteChar+0x1fc>
    315c:	80 e9       	ldi	r24, 0x90	; 144
    315e:	91 e0       	ldi	r25, 0x01	; 1
    3160:	9c 83       	std	Y+4, r25	; 0x04
    3162:	8b 83       	std	Y+3, r24	; 0x03
    3164:	8b 81       	ldd	r24, Y+3	; 0x03
    3166:	9c 81       	ldd	r25, Y+4	; 0x04
    3168:	01 97       	sbiw	r24, 0x01	; 1
    316a:	f1 f7       	brne	.-4      	; 0x3168 <HAL_VidHCLCD_4BitModeWriteChar+0x1ea>
    316c:	9c 83       	std	Y+4, r25	; 0x04
    316e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3170:	8d 81       	ldd	r24, Y+5	; 0x05
    3172:	9e 81       	ldd	r25, Y+6	; 0x06
    3174:	01 97       	sbiw	r24, 0x01	; 1
    3176:	9e 83       	std	Y+6, r25	; 0x06
    3178:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    317a:	8d 81       	ldd	r24, Y+5	; 0x05
    317c:	9e 81       	ldd	r25, Y+6	; 0x06
    317e:	00 97       	sbiw	r24, 0x00	; 0
    3180:	69 f7       	brne	.-38     	; 0x315c <HAL_VidHCLCD_4BitModeWriteChar+0x1de>
    3182:	14 c0       	rjmp	.+40     	; 0x31ac <HAL_VidHCLCD_4BitModeWriteChar+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3184:	6f 81       	ldd	r22, Y+7	; 0x07
    3186:	78 85       	ldd	r23, Y+8	; 0x08
    3188:	89 85       	ldd	r24, Y+9	; 0x09
    318a:	9a 85       	ldd	r25, Y+10	; 0x0a
    318c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3190:	dc 01       	movw	r26, r24
    3192:	cb 01       	movw	r24, r22
    3194:	9e 83       	std	Y+6, r25	; 0x06
    3196:	8d 83       	std	Y+5, r24	; 0x05
    3198:	8d 81       	ldd	r24, Y+5	; 0x05
    319a:	9e 81       	ldd	r25, Y+6	; 0x06
    319c:	9a 83       	std	Y+2, r25	; 0x02
    319e:	89 83       	std	Y+1, r24	; 0x01
    31a0:	89 81       	ldd	r24, Y+1	; 0x01
    31a2:	9a 81       	ldd	r25, Y+2	; 0x02
    31a4:	01 97       	sbiw	r24, 0x01	; 1
    31a6:	f1 f7       	brne	.-4      	; 0x31a4 <HAL_VidHCLCD_4BitModeWriteChar+0x226>
    31a8:	9a 83       	std	Y+2, r25	; 0x02
    31aa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,E_PIN,PIN_LOW);
    31ac:	81 e0       	ldi	r24, 0x01	; 1
    31ae:	63 e0       	ldi	r22, 0x03	; 3
    31b0:	40 e0       	ldi	r20, 0x00	; 0
    31b2:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MDIO_Errorstate_SetPinValue>
}
    31b6:	6d 96       	adiw	r28, 0x1d	; 29
    31b8:	0f b6       	in	r0, 0x3f	; 63
    31ba:	f8 94       	cli
    31bc:	de bf       	out	0x3e, r29	; 62
    31be:	0f be       	out	0x3f, r0	; 63
    31c0:	cd bf       	out	0x3d, r28	; 61
    31c2:	cf 91       	pop	r28
    31c4:	df 91       	pop	r29
    31c6:	08 95       	ret

000031c8 <HAL_VidHCLCD_4BitModeInit>:
void HAL_VidHCLCD_4BitModeInit(void)
{
    31c8:	df 93       	push	r29
    31ca:	cf 93       	push	r28
    31cc:	cd b7       	in	r28, 0x3d	; 61
    31ce:	de b7       	in	r29, 0x3e	; 62
    31d0:	e8 97       	sbiw	r28, 0x38	; 56
    31d2:	0f b6       	in	r0, 0x3f	; 63
    31d4:	f8 94       	cli
    31d6:	de bf       	out	0x3e, r29	; 62
    31d8:	0f be       	out	0x3f, r0	; 63
    31da:	cd bf       	out	0x3d, r28	; 61
    31dc:	80 e0       	ldi	r24, 0x00	; 0
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	a0 ef       	ldi	r26, 0xF0	; 240
    31e2:	b1 e4       	ldi	r27, 0x41	; 65
    31e4:	8d ab       	std	Y+53, r24	; 0x35
    31e6:	9e ab       	std	Y+54, r25	; 0x36
    31e8:	af ab       	std	Y+55, r26	; 0x37
    31ea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31ec:	6d a9       	ldd	r22, Y+53	; 0x35
    31ee:	7e a9       	ldd	r23, Y+54	; 0x36
    31f0:	8f a9       	ldd	r24, Y+55	; 0x37
    31f2:	98 ad       	ldd	r25, Y+56	; 0x38
    31f4:	20 e0       	ldi	r18, 0x00	; 0
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	4a e7       	ldi	r20, 0x7A	; 122
    31fa:	55 e4       	ldi	r21, 0x45	; 69
    31fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3200:	dc 01       	movw	r26, r24
    3202:	cb 01       	movw	r24, r22
    3204:	89 ab       	std	Y+49, r24	; 0x31
    3206:	9a ab       	std	Y+50, r25	; 0x32
    3208:	ab ab       	std	Y+51, r26	; 0x33
    320a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    320c:	69 a9       	ldd	r22, Y+49	; 0x31
    320e:	7a a9       	ldd	r23, Y+50	; 0x32
    3210:	8b a9       	ldd	r24, Y+51	; 0x33
    3212:	9c a9       	ldd	r25, Y+52	; 0x34
    3214:	20 e0       	ldi	r18, 0x00	; 0
    3216:	30 e0       	ldi	r19, 0x00	; 0
    3218:	40 e8       	ldi	r20, 0x80	; 128
    321a:	5f e3       	ldi	r21, 0x3F	; 63
    321c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3220:	88 23       	and	r24, r24
    3222:	2c f4       	brge	.+10     	; 0x322e <HAL_VidHCLCD_4BitModeInit+0x66>
		__ticks = 1;
    3224:	81 e0       	ldi	r24, 0x01	; 1
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	98 ab       	std	Y+48, r25	; 0x30
    322a:	8f a7       	std	Y+47, r24	; 0x2f
    322c:	3f c0       	rjmp	.+126    	; 0x32ac <HAL_VidHCLCD_4BitModeInit+0xe4>
	else if (__tmp > 65535)
    322e:	69 a9       	ldd	r22, Y+49	; 0x31
    3230:	7a a9       	ldd	r23, Y+50	; 0x32
    3232:	8b a9       	ldd	r24, Y+51	; 0x33
    3234:	9c a9       	ldd	r25, Y+52	; 0x34
    3236:	20 e0       	ldi	r18, 0x00	; 0
    3238:	3f ef       	ldi	r19, 0xFF	; 255
    323a:	4f e7       	ldi	r20, 0x7F	; 127
    323c:	57 e4       	ldi	r21, 0x47	; 71
    323e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3242:	18 16       	cp	r1, r24
    3244:	4c f5       	brge	.+82     	; 0x3298 <HAL_VidHCLCD_4BitModeInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3246:	6d a9       	ldd	r22, Y+53	; 0x35
    3248:	7e a9       	ldd	r23, Y+54	; 0x36
    324a:	8f a9       	ldd	r24, Y+55	; 0x37
    324c:	98 ad       	ldd	r25, Y+56	; 0x38
    324e:	20 e0       	ldi	r18, 0x00	; 0
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	40 e2       	ldi	r20, 0x20	; 32
    3254:	51 e4       	ldi	r21, 0x41	; 65
    3256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    325a:	dc 01       	movw	r26, r24
    325c:	cb 01       	movw	r24, r22
    325e:	bc 01       	movw	r22, r24
    3260:	cd 01       	movw	r24, r26
    3262:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3266:	dc 01       	movw	r26, r24
    3268:	cb 01       	movw	r24, r22
    326a:	98 ab       	std	Y+48, r25	; 0x30
    326c:	8f a7       	std	Y+47, r24	; 0x2f
    326e:	0f c0       	rjmp	.+30     	; 0x328e <HAL_VidHCLCD_4BitModeInit+0xc6>
    3270:	80 e9       	ldi	r24, 0x90	; 144
    3272:	91 e0       	ldi	r25, 0x01	; 1
    3274:	9e a7       	std	Y+46, r25	; 0x2e
    3276:	8d a7       	std	Y+45, r24	; 0x2d
    3278:	8d a5       	ldd	r24, Y+45	; 0x2d
    327a:	9e a5       	ldd	r25, Y+46	; 0x2e
    327c:	01 97       	sbiw	r24, 0x01	; 1
    327e:	f1 f7       	brne	.-4      	; 0x327c <HAL_VidHCLCD_4BitModeInit+0xb4>
    3280:	9e a7       	std	Y+46, r25	; 0x2e
    3282:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3284:	8f a5       	ldd	r24, Y+47	; 0x2f
    3286:	98 a9       	ldd	r25, Y+48	; 0x30
    3288:	01 97       	sbiw	r24, 0x01	; 1
    328a:	98 ab       	std	Y+48, r25	; 0x30
    328c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    328e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3290:	98 a9       	ldd	r25, Y+48	; 0x30
    3292:	00 97       	sbiw	r24, 0x00	; 0
    3294:	69 f7       	brne	.-38     	; 0x3270 <HAL_VidHCLCD_4BitModeInit+0xa8>
    3296:	14 c0       	rjmp	.+40     	; 0x32c0 <HAL_VidHCLCD_4BitModeInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3298:	69 a9       	ldd	r22, Y+49	; 0x31
    329a:	7a a9       	ldd	r23, Y+50	; 0x32
    329c:	8b a9       	ldd	r24, Y+51	; 0x33
    329e:	9c a9       	ldd	r25, Y+52	; 0x34
    32a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32a4:	dc 01       	movw	r26, r24
    32a6:	cb 01       	movw	r24, r22
    32a8:	98 ab       	std	Y+48, r25	; 0x30
    32aa:	8f a7       	std	Y+47, r24	; 0x2f
    32ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    32ae:	98 a9       	ldd	r25, Y+48	; 0x30
    32b0:	9c a7       	std	Y+44, r25	; 0x2c
    32b2:	8b a7       	std	Y+43, r24	; 0x2b
    32b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    32b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    32b8:	01 97       	sbiw	r24, 0x01	; 1
    32ba:	f1 f7       	brne	.-4      	; 0x32b8 <HAL_VidHCLCD_4BitModeInit+0xf0>
    32bc:	9c a7       	std	Y+44, r25	; 0x2c
    32be:	8b a7       	std	Y+43, r24	; 0x2b
	/*Wait 30ms*/
	_delay_ms(30);
	/*send Function set command*/
	HAL_VidHCLCD_4BitModeWriteCommand((SET_FUNCTIONSET&0xF0));
    32c0:	80 e2       	ldi	r24, 0x20	; 32
    32c2:	0e 94 21 17 	call	0x2e42	; 0x2e42 <HAL_VidHCLCD_4BitModeWriteCommand>
	HAL_VidHCLCD_4BitModeWriteCommand((SET_FUNCTIONSET&0xF0));
    32c6:	80 e2       	ldi	r24, 0x20	; 32
    32c8:	0e 94 21 17 	call	0x2e42	; 0x2e42 <HAL_VidHCLCD_4BitModeWriteCommand>
	HAL_VidHCLCD_4BitModeWriteCommand((SET_FUNCTIONSET<<4));
    32cc:	80 e8       	ldi	r24, 0x80	; 128
    32ce:	0e 94 21 17 	call	0x2e42	; 0x2e42 <HAL_VidHCLCD_4BitModeWriteCommand>
    32d2:	80 e0       	ldi	r24, 0x00	; 0
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	a0 e8       	ldi	r26, 0x80	; 128
    32d8:	bf e3       	ldi	r27, 0x3F	; 63
    32da:	8f a3       	std	Y+39, r24	; 0x27
    32dc:	98 a7       	std	Y+40, r25	; 0x28
    32de:	a9 a7       	std	Y+41, r26	; 0x29
    32e0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32e2:	6f a1       	ldd	r22, Y+39	; 0x27
    32e4:	78 a5       	ldd	r23, Y+40	; 0x28
    32e6:	89 a5       	ldd	r24, Y+41	; 0x29
    32e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    32ea:	20 e0       	ldi	r18, 0x00	; 0
    32ec:	30 e0       	ldi	r19, 0x00	; 0
    32ee:	4a e7       	ldi	r20, 0x7A	; 122
    32f0:	55 e4       	ldi	r21, 0x45	; 69
    32f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f6:	dc 01       	movw	r26, r24
    32f8:	cb 01       	movw	r24, r22
    32fa:	8b a3       	std	Y+35, r24	; 0x23
    32fc:	9c a3       	std	Y+36, r25	; 0x24
    32fe:	ad a3       	std	Y+37, r26	; 0x25
    3300:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3302:	6b a1       	ldd	r22, Y+35	; 0x23
    3304:	7c a1       	ldd	r23, Y+36	; 0x24
    3306:	8d a1       	ldd	r24, Y+37	; 0x25
    3308:	9e a1       	ldd	r25, Y+38	; 0x26
    330a:	20 e0       	ldi	r18, 0x00	; 0
    330c:	30 e0       	ldi	r19, 0x00	; 0
    330e:	40 e8       	ldi	r20, 0x80	; 128
    3310:	5f e3       	ldi	r21, 0x3F	; 63
    3312:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3316:	88 23       	and	r24, r24
    3318:	2c f4       	brge	.+10     	; 0x3324 <HAL_VidHCLCD_4BitModeInit+0x15c>
		__ticks = 1;
    331a:	81 e0       	ldi	r24, 0x01	; 1
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	9a a3       	std	Y+34, r25	; 0x22
    3320:	89 a3       	std	Y+33, r24	; 0x21
    3322:	3f c0       	rjmp	.+126    	; 0x33a2 <HAL_VidHCLCD_4BitModeInit+0x1da>
	else if (__tmp > 65535)
    3324:	6b a1       	ldd	r22, Y+35	; 0x23
    3326:	7c a1       	ldd	r23, Y+36	; 0x24
    3328:	8d a1       	ldd	r24, Y+37	; 0x25
    332a:	9e a1       	ldd	r25, Y+38	; 0x26
    332c:	20 e0       	ldi	r18, 0x00	; 0
    332e:	3f ef       	ldi	r19, 0xFF	; 255
    3330:	4f e7       	ldi	r20, 0x7F	; 127
    3332:	57 e4       	ldi	r21, 0x47	; 71
    3334:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3338:	18 16       	cp	r1, r24
    333a:	4c f5       	brge	.+82     	; 0x338e <HAL_VidHCLCD_4BitModeInit+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    333c:	6f a1       	ldd	r22, Y+39	; 0x27
    333e:	78 a5       	ldd	r23, Y+40	; 0x28
    3340:	89 a5       	ldd	r24, Y+41	; 0x29
    3342:	9a a5       	ldd	r25, Y+42	; 0x2a
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	40 e2       	ldi	r20, 0x20	; 32
    334a:	51 e4       	ldi	r21, 0x41	; 65
    334c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3350:	dc 01       	movw	r26, r24
    3352:	cb 01       	movw	r24, r22
    3354:	bc 01       	movw	r22, r24
    3356:	cd 01       	movw	r24, r26
    3358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    335c:	dc 01       	movw	r26, r24
    335e:	cb 01       	movw	r24, r22
    3360:	9a a3       	std	Y+34, r25	; 0x22
    3362:	89 a3       	std	Y+33, r24	; 0x21
    3364:	0f c0       	rjmp	.+30     	; 0x3384 <HAL_VidHCLCD_4BitModeInit+0x1bc>
    3366:	80 e9       	ldi	r24, 0x90	; 144
    3368:	91 e0       	ldi	r25, 0x01	; 1
    336a:	98 a3       	std	Y+32, r25	; 0x20
    336c:	8f 8f       	std	Y+31, r24	; 0x1f
    336e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3370:	98 a1       	ldd	r25, Y+32	; 0x20
    3372:	01 97       	sbiw	r24, 0x01	; 1
    3374:	f1 f7       	brne	.-4      	; 0x3372 <HAL_VidHCLCD_4BitModeInit+0x1aa>
    3376:	98 a3       	std	Y+32, r25	; 0x20
    3378:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    337a:	89 a1       	ldd	r24, Y+33	; 0x21
    337c:	9a a1       	ldd	r25, Y+34	; 0x22
    337e:	01 97       	sbiw	r24, 0x01	; 1
    3380:	9a a3       	std	Y+34, r25	; 0x22
    3382:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3384:	89 a1       	ldd	r24, Y+33	; 0x21
    3386:	9a a1       	ldd	r25, Y+34	; 0x22
    3388:	00 97       	sbiw	r24, 0x00	; 0
    338a:	69 f7       	brne	.-38     	; 0x3366 <HAL_VidHCLCD_4BitModeInit+0x19e>
    338c:	14 c0       	rjmp	.+40     	; 0x33b6 <HAL_VidHCLCD_4BitModeInit+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    338e:	6b a1       	ldd	r22, Y+35	; 0x23
    3390:	7c a1       	ldd	r23, Y+36	; 0x24
    3392:	8d a1       	ldd	r24, Y+37	; 0x25
    3394:	9e a1       	ldd	r25, Y+38	; 0x26
    3396:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    339a:	dc 01       	movw	r26, r24
    339c:	cb 01       	movw	r24, r22
    339e:	9a a3       	std	Y+34, r25	; 0x22
    33a0:	89 a3       	std	Y+33, r24	; 0x21
    33a2:	89 a1       	ldd	r24, Y+33	; 0x21
    33a4:	9a a1       	ldd	r25, Y+34	; 0x22
    33a6:	9e 8f       	std	Y+30, r25	; 0x1e
    33a8:	8d 8f       	std	Y+29, r24	; 0x1d
    33aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33ae:	01 97       	sbiw	r24, 0x01	; 1
    33b0:	f1 f7       	brne	.-4      	; 0x33ae <HAL_VidHCLCD_4BitModeInit+0x1e6>
    33b2:	9e 8f       	std	Y+30, r25	; 0x1e
    33b4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*Send Display on off command*/
	HAL_VidHCLCD_4BitModeWriteCommand((SET_DISPLAYON_OFF&0xF0));
    33b6:	80 e0       	ldi	r24, 0x00	; 0
    33b8:	0e 94 21 17 	call	0x2e42	; 0x2e42 <HAL_VidHCLCD_4BitModeWriteCommand>
	HAL_VidHCLCD_4BitModeWriteCommand((SET_DISPLAYON_OFF<<4));
    33bc:	80 ef       	ldi	r24, 0xF0	; 240
    33be:	0e 94 21 17 	call	0x2e42	; 0x2e42 <HAL_VidHCLCD_4BitModeWriteCommand>
    33c2:	80 e0       	ldi	r24, 0x00	; 0
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	a0 e8       	ldi	r26, 0x80	; 128
    33c8:	bf e3       	ldi	r27, 0x3F	; 63
    33ca:	89 8f       	std	Y+25, r24	; 0x19
    33cc:	9a 8f       	std	Y+26, r25	; 0x1a
    33ce:	ab 8f       	std	Y+27, r26	; 0x1b
    33d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33d2:	69 8d       	ldd	r22, Y+25	; 0x19
    33d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33da:	20 e0       	ldi	r18, 0x00	; 0
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	4a e7       	ldi	r20, 0x7A	; 122
    33e0:	55 e4       	ldi	r21, 0x45	; 69
    33e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e6:	dc 01       	movw	r26, r24
    33e8:	cb 01       	movw	r24, r22
    33ea:	8d 8b       	std	Y+21, r24	; 0x15
    33ec:	9e 8b       	std	Y+22, r25	; 0x16
    33ee:	af 8b       	std	Y+23, r26	; 0x17
    33f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33f2:	6d 89       	ldd	r22, Y+21	; 0x15
    33f4:	7e 89       	ldd	r23, Y+22	; 0x16
    33f6:	8f 89       	ldd	r24, Y+23	; 0x17
    33f8:	98 8d       	ldd	r25, Y+24	; 0x18
    33fa:	20 e0       	ldi	r18, 0x00	; 0
    33fc:	30 e0       	ldi	r19, 0x00	; 0
    33fe:	40 e8       	ldi	r20, 0x80	; 128
    3400:	5f e3       	ldi	r21, 0x3F	; 63
    3402:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3406:	88 23       	and	r24, r24
    3408:	2c f4       	brge	.+10     	; 0x3414 <HAL_VidHCLCD_4BitModeInit+0x24c>
		__ticks = 1;
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	9c 8b       	std	Y+20, r25	; 0x14
    3410:	8b 8b       	std	Y+19, r24	; 0x13
    3412:	3f c0       	rjmp	.+126    	; 0x3492 <HAL_VidHCLCD_4BitModeInit+0x2ca>
	else if (__tmp > 65535)
    3414:	6d 89       	ldd	r22, Y+21	; 0x15
    3416:	7e 89       	ldd	r23, Y+22	; 0x16
    3418:	8f 89       	ldd	r24, Y+23	; 0x17
    341a:	98 8d       	ldd	r25, Y+24	; 0x18
    341c:	20 e0       	ldi	r18, 0x00	; 0
    341e:	3f ef       	ldi	r19, 0xFF	; 255
    3420:	4f e7       	ldi	r20, 0x7F	; 127
    3422:	57 e4       	ldi	r21, 0x47	; 71
    3424:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3428:	18 16       	cp	r1, r24
    342a:	4c f5       	brge	.+82     	; 0x347e <HAL_VidHCLCD_4BitModeInit+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    342c:	69 8d       	ldd	r22, Y+25	; 0x19
    342e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3430:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3432:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3434:	20 e0       	ldi	r18, 0x00	; 0
    3436:	30 e0       	ldi	r19, 0x00	; 0
    3438:	40 e2       	ldi	r20, 0x20	; 32
    343a:	51 e4       	ldi	r21, 0x41	; 65
    343c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3440:	dc 01       	movw	r26, r24
    3442:	cb 01       	movw	r24, r22
    3444:	bc 01       	movw	r22, r24
    3446:	cd 01       	movw	r24, r26
    3448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344c:	dc 01       	movw	r26, r24
    344e:	cb 01       	movw	r24, r22
    3450:	9c 8b       	std	Y+20, r25	; 0x14
    3452:	8b 8b       	std	Y+19, r24	; 0x13
    3454:	0f c0       	rjmp	.+30     	; 0x3474 <HAL_VidHCLCD_4BitModeInit+0x2ac>
    3456:	80 e9       	ldi	r24, 0x90	; 144
    3458:	91 e0       	ldi	r25, 0x01	; 1
    345a:	9a 8b       	std	Y+18, r25	; 0x12
    345c:	89 8b       	std	Y+17, r24	; 0x11
    345e:	89 89       	ldd	r24, Y+17	; 0x11
    3460:	9a 89       	ldd	r25, Y+18	; 0x12
    3462:	01 97       	sbiw	r24, 0x01	; 1
    3464:	f1 f7       	brne	.-4      	; 0x3462 <HAL_VidHCLCD_4BitModeInit+0x29a>
    3466:	9a 8b       	std	Y+18, r25	; 0x12
    3468:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    346a:	8b 89       	ldd	r24, Y+19	; 0x13
    346c:	9c 89       	ldd	r25, Y+20	; 0x14
    346e:	01 97       	sbiw	r24, 0x01	; 1
    3470:	9c 8b       	std	Y+20, r25	; 0x14
    3472:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3474:	8b 89       	ldd	r24, Y+19	; 0x13
    3476:	9c 89       	ldd	r25, Y+20	; 0x14
    3478:	00 97       	sbiw	r24, 0x00	; 0
    347a:	69 f7       	brne	.-38     	; 0x3456 <HAL_VidHCLCD_4BitModeInit+0x28e>
    347c:	14 c0       	rjmp	.+40     	; 0x34a6 <HAL_VidHCLCD_4BitModeInit+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    347e:	6d 89       	ldd	r22, Y+21	; 0x15
    3480:	7e 89       	ldd	r23, Y+22	; 0x16
    3482:	8f 89       	ldd	r24, Y+23	; 0x17
    3484:	98 8d       	ldd	r25, Y+24	; 0x18
    3486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    348a:	dc 01       	movw	r26, r24
    348c:	cb 01       	movw	r24, r22
    348e:	9c 8b       	std	Y+20, r25	; 0x14
    3490:	8b 8b       	std	Y+19, r24	; 0x13
    3492:	8b 89       	ldd	r24, Y+19	; 0x13
    3494:	9c 89       	ldd	r25, Y+20	; 0x14
    3496:	98 8b       	std	Y+16, r25	; 0x10
    3498:	8f 87       	std	Y+15, r24	; 0x0f
    349a:	8f 85       	ldd	r24, Y+15	; 0x0f
    349c:	98 89       	ldd	r25, Y+16	; 0x10
    349e:	01 97       	sbiw	r24, 0x01	; 1
    34a0:	f1 f7       	brne	.-4      	; 0x349e <HAL_VidHCLCD_4BitModeInit+0x2d6>
    34a2:	98 8b       	std	Y+16, r25	; 0x10
    34a4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*Send Display Clear command*/
	HAL_VidHCLCD_4BitModeWriteCommand((SET_DISPALYCLEAR&0xF0));
    34a6:	80 e0       	ldi	r24, 0x00	; 0
    34a8:	0e 94 21 17 	call	0x2e42	; 0x2e42 <HAL_VidHCLCD_4BitModeWriteCommand>
	HAL_VidHCLCD_4BitModeWriteCommand((SET_DISPALYCLEAR<<4));
    34ac:	80 e1       	ldi	r24, 0x10	; 16
    34ae:	0e 94 21 17 	call	0x2e42	; 0x2e42 <HAL_VidHCLCD_4BitModeWriteCommand>
    34b2:	80 e0       	ldi	r24, 0x00	; 0
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	a0 e0       	ldi	r26, 0x00	; 0
    34b8:	b0 e4       	ldi	r27, 0x40	; 64
    34ba:	8b 87       	std	Y+11, r24	; 0x0b
    34bc:	9c 87       	std	Y+12, r25	; 0x0c
    34be:	ad 87       	std	Y+13, r26	; 0x0d
    34c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    34c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    34c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    34c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    34ca:	20 e0       	ldi	r18, 0x00	; 0
    34cc:	30 e0       	ldi	r19, 0x00	; 0
    34ce:	4a e7       	ldi	r20, 0x7A	; 122
    34d0:	55 e4       	ldi	r21, 0x45	; 69
    34d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d6:	dc 01       	movw	r26, r24
    34d8:	cb 01       	movw	r24, r22
    34da:	8f 83       	std	Y+7, r24	; 0x07
    34dc:	98 87       	std	Y+8, r25	; 0x08
    34de:	a9 87       	std	Y+9, r26	; 0x09
    34e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34e2:	6f 81       	ldd	r22, Y+7	; 0x07
    34e4:	78 85       	ldd	r23, Y+8	; 0x08
    34e6:	89 85       	ldd	r24, Y+9	; 0x09
    34e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ea:	20 e0       	ldi	r18, 0x00	; 0
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	40 e8       	ldi	r20, 0x80	; 128
    34f0:	5f e3       	ldi	r21, 0x3F	; 63
    34f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34f6:	88 23       	and	r24, r24
    34f8:	2c f4       	brge	.+10     	; 0x3504 <HAL_VidHCLCD_4BitModeInit+0x33c>
		__ticks = 1;
    34fa:	81 e0       	ldi	r24, 0x01	; 1
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	9e 83       	std	Y+6, r25	; 0x06
    3500:	8d 83       	std	Y+5, r24	; 0x05
    3502:	3f c0       	rjmp	.+126    	; 0x3582 <HAL_VidHCLCD_4BitModeInit+0x3ba>
	else if (__tmp > 65535)
    3504:	6f 81       	ldd	r22, Y+7	; 0x07
    3506:	78 85       	ldd	r23, Y+8	; 0x08
    3508:	89 85       	ldd	r24, Y+9	; 0x09
    350a:	9a 85       	ldd	r25, Y+10	; 0x0a
    350c:	20 e0       	ldi	r18, 0x00	; 0
    350e:	3f ef       	ldi	r19, 0xFF	; 255
    3510:	4f e7       	ldi	r20, 0x7F	; 127
    3512:	57 e4       	ldi	r21, 0x47	; 71
    3514:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3518:	18 16       	cp	r1, r24
    351a:	4c f5       	brge	.+82     	; 0x356e <HAL_VidHCLCD_4BitModeInit+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    351c:	6b 85       	ldd	r22, Y+11	; 0x0b
    351e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3520:	8d 85       	ldd	r24, Y+13	; 0x0d
    3522:	9e 85       	ldd	r25, Y+14	; 0x0e
    3524:	20 e0       	ldi	r18, 0x00	; 0
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	40 e2       	ldi	r20, 0x20	; 32
    352a:	51 e4       	ldi	r21, 0x41	; 65
    352c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3530:	dc 01       	movw	r26, r24
    3532:	cb 01       	movw	r24, r22
    3534:	bc 01       	movw	r22, r24
    3536:	cd 01       	movw	r24, r26
    3538:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    353c:	dc 01       	movw	r26, r24
    353e:	cb 01       	movw	r24, r22
    3540:	9e 83       	std	Y+6, r25	; 0x06
    3542:	8d 83       	std	Y+5, r24	; 0x05
    3544:	0f c0       	rjmp	.+30     	; 0x3564 <HAL_VidHCLCD_4BitModeInit+0x39c>
    3546:	80 e9       	ldi	r24, 0x90	; 144
    3548:	91 e0       	ldi	r25, 0x01	; 1
    354a:	9c 83       	std	Y+4, r25	; 0x04
    354c:	8b 83       	std	Y+3, r24	; 0x03
    354e:	8b 81       	ldd	r24, Y+3	; 0x03
    3550:	9c 81       	ldd	r25, Y+4	; 0x04
    3552:	01 97       	sbiw	r24, 0x01	; 1
    3554:	f1 f7       	brne	.-4      	; 0x3552 <HAL_VidHCLCD_4BitModeInit+0x38a>
    3556:	9c 83       	std	Y+4, r25	; 0x04
    3558:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    355a:	8d 81       	ldd	r24, Y+5	; 0x05
    355c:	9e 81       	ldd	r25, Y+6	; 0x06
    355e:	01 97       	sbiw	r24, 0x01	; 1
    3560:	9e 83       	std	Y+6, r25	; 0x06
    3562:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3564:	8d 81       	ldd	r24, Y+5	; 0x05
    3566:	9e 81       	ldd	r25, Y+6	; 0x06
    3568:	00 97       	sbiw	r24, 0x00	; 0
    356a:	69 f7       	brne	.-38     	; 0x3546 <HAL_VidHCLCD_4BitModeInit+0x37e>
    356c:	14 c0       	rjmp	.+40     	; 0x3596 <HAL_VidHCLCD_4BitModeInit+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    356e:	6f 81       	ldd	r22, Y+7	; 0x07
    3570:	78 85       	ldd	r23, Y+8	; 0x08
    3572:	89 85       	ldd	r24, Y+9	; 0x09
    3574:	9a 85       	ldd	r25, Y+10	; 0x0a
    3576:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    357a:	dc 01       	movw	r26, r24
    357c:	cb 01       	movw	r24, r22
    357e:	9e 83       	std	Y+6, r25	; 0x06
    3580:	8d 83       	std	Y+5, r24	; 0x05
    3582:	8d 81       	ldd	r24, Y+5	; 0x05
    3584:	9e 81       	ldd	r25, Y+6	; 0x06
    3586:	9a 83       	std	Y+2, r25	; 0x02
    3588:	89 83       	std	Y+1, r24	; 0x01
    358a:	89 81       	ldd	r24, Y+1	; 0x01
    358c:	9a 81       	ldd	r25, Y+2	; 0x02
    358e:	01 97       	sbiw	r24, 0x01	; 1
    3590:	f1 f7       	brne	.-4      	; 0x358e <HAL_VidHCLCD_4BitModeInit+0x3c6>
    3592:	9a 83       	std	Y+2, r25	; 0x02
    3594:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*Send Entry Mode command*/
	HAL_VidHCLCD_4BitModeWriteCommand((SET_ENTRYMODE&0xF0));
    3596:	80 e0       	ldi	r24, 0x00	; 0
    3598:	0e 94 21 17 	call	0x2e42	; 0x2e42 <HAL_VidHCLCD_4BitModeWriteCommand>
	HAL_VidHCLCD_4BitModeWriteCommand((SET_ENTRYMODE<<4));
    359c:	80 e6       	ldi	r24, 0x60	; 96
    359e:	0e 94 21 17 	call	0x2e42	; 0x2e42 <HAL_VidHCLCD_4BitModeWriteCommand>
}
    35a2:	e8 96       	adiw	r28, 0x38	; 56
    35a4:	0f b6       	in	r0, 0x3f	; 63
    35a6:	f8 94       	cli
    35a8:	de bf       	out	0x3e, r29	; 62
    35aa:	0f be       	out	0x3f, r0	; 63
    35ac:	cd bf       	out	0x3d, r28	; 61
    35ae:	cf 91       	pop	r28
    35b0:	df 91       	pop	r29
    35b2:	08 95       	ret

000035b4 <HAL_VidHCLCD_4BitModeSendCommand>:
void HAL_VidHCLCD_4BitModeSendCommand(uint8 Copy_uint8Command)
{
    35b4:	df 93       	push	r29
    35b6:	cf 93       	push	r28
    35b8:	0f 92       	push	r0
    35ba:	cd b7       	in	r28, 0x3d	; 61
    35bc:	de b7       	in	r29, 0x3e	; 62
    35be:	89 83       	std	Y+1, r24	; 0x01
	HAL_VidHCLCD_4BitModeWriteCommand((Copy_uint8Command&0xF0));
    35c0:	89 81       	ldd	r24, Y+1	; 0x01
    35c2:	80 7f       	andi	r24, 0xF0	; 240
    35c4:	0e 94 21 17 	call	0x2e42	; 0x2e42 <HAL_VidHCLCD_4BitModeWriteCommand>
	HAL_VidHCLCD_4BitModeWriteCommand((Copy_uint8Command<<4));
    35c8:	89 81       	ldd	r24, Y+1	; 0x01
    35ca:	82 95       	swap	r24
    35cc:	80 7f       	andi	r24, 0xF0	; 240
    35ce:	0e 94 21 17 	call	0x2e42	; 0x2e42 <HAL_VidHCLCD_4BitModeWriteCommand>
}
    35d2:	0f 90       	pop	r0
    35d4:	cf 91       	pop	r28
    35d6:	df 91       	pop	r29
    35d8:	08 95       	ret

000035da <HAL_VidHCLCD_4BitModeWriteString>:
/*AMIT'\0'*/
void HAL_VidHCLCD_4BitModeWriteString(uint8 *Copy_uint8String)
{
    35da:	df 93       	push	r29
    35dc:	cf 93       	push	r28
    35de:	00 d0       	rcall	.+0      	; 0x35e0 <HAL_VidHCLCD_4BitModeWriteString+0x6>
    35e0:	0f 92       	push	r0
    35e2:	cd b7       	in	r28, 0x3d	; 61
    35e4:	de b7       	in	r29, 0x3e	; 62
    35e6:	9b 83       	std	Y+3, r25	; 0x03
    35e8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Loc_uint8Count=0;
    35ea:	19 82       	std	Y+1, r1	; 0x01
    35ec:	0e c0       	rjmp	.+28     	; 0x360a <HAL_VidHCLCD_4BitModeWriteString+0x30>
	while(Copy_uint8String[Loc_uint8Count]!='\0')
	{
		HAL_VidHCLCD_4BitModeWriteChar(Copy_uint8String[Loc_uint8Count]);
    35ee:	89 81       	ldd	r24, Y+1	; 0x01
    35f0:	28 2f       	mov	r18, r24
    35f2:	30 e0       	ldi	r19, 0x00	; 0
    35f4:	8a 81       	ldd	r24, Y+2	; 0x02
    35f6:	9b 81       	ldd	r25, Y+3	; 0x03
    35f8:	fc 01       	movw	r30, r24
    35fa:	e2 0f       	add	r30, r18
    35fc:	f3 1f       	adc	r31, r19
    35fe:	80 81       	ld	r24, Z
    3600:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <HAL_VidHCLCD_4BitModeWriteChar>
		Loc_uint8Count++;
    3604:	89 81       	ldd	r24, Y+1	; 0x01
    3606:	8f 5f       	subi	r24, 0xFF	; 255
    3608:	89 83       	std	Y+1, r24	; 0x01
}
/*AMIT'\0'*/
void HAL_VidHCLCD_4BitModeWriteString(uint8 *Copy_uint8String)
{
	uint8 Loc_uint8Count=0;
	while(Copy_uint8String[Loc_uint8Count]!='\0')
    360a:	89 81       	ldd	r24, Y+1	; 0x01
    360c:	28 2f       	mov	r18, r24
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	8a 81       	ldd	r24, Y+2	; 0x02
    3612:	9b 81       	ldd	r25, Y+3	; 0x03
    3614:	fc 01       	movw	r30, r24
    3616:	e2 0f       	add	r30, r18
    3618:	f3 1f       	adc	r31, r19
    361a:	80 81       	ld	r24, Z
    361c:	88 23       	and	r24, r24
    361e:	39 f7       	brne	.-50     	; 0x35ee <HAL_VidHCLCD_4BitModeWriteString+0x14>
	{
		HAL_VidHCLCD_4BitModeWriteChar(Copy_uint8String[Loc_uint8Count]);
		Loc_uint8Count++;
	}
}
    3620:	0f 90       	pop	r0
    3622:	0f 90       	pop	r0
    3624:	0f 90       	pop	r0
    3626:	cf 91       	pop	r28
    3628:	df 91       	pop	r29
    362a:	08 95       	ret

0000362c <HAL_VidHCLCD_4BitModeWriteNumber>:
/*1234*/
void HAL_VidHCLCD_4BitModeWriteNumber(uint32 Copy_uint32Number)
{
    362c:	0f 93       	push	r16
    362e:	1f 93       	push	r17
    3630:	df 93       	push	r29
    3632:	cf 93       	push	r28
    3634:	cd b7       	in	r28, 0x3d	; 61
    3636:	de b7       	in	r29, 0x3e	; 62
    3638:	65 97       	sbiw	r28, 0x15	; 21
    363a:	0f b6       	in	r0, 0x3f	; 63
    363c:	f8 94       	cli
    363e:	de bf       	out	0x3e, r29	; 62
    3640:	0f be       	out	0x3f, r0	; 63
    3642:	cd bf       	out	0x3d, r28	; 61
    3644:	6a 8b       	std	Y+18, r22	; 0x12
    3646:	7b 8b       	std	Y+19, r23	; 0x13
    3648:	8c 8b       	std	Y+20, r24	; 0x14
    364a:	9d 8b       	std	Y+21, r25	; 0x15
	uint8 Loc_uint8Digits[16];
	sint8 Loc_sint8Count=0;
    364c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_uint32Number==0)
    364e:	8a 89       	ldd	r24, Y+18	; 0x12
    3650:	9b 89       	ldd	r25, Y+19	; 0x13
    3652:	ac 89       	ldd	r26, Y+20	; 0x14
    3654:	bd 89       	ldd	r27, Y+21	; 0x15
    3656:	00 97       	sbiw	r24, 0x00	; 0
    3658:	a1 05       	cpc	r26, r1
    365a:	b1 05       	cpc	r27, r1
    365c:	99 f5       	brne	.+102    	; 0x36c4 <HAL_VidHCLCD_4BitModeWriteNumber+0x98>
	{
		HAL_VidHCLCD_4BitModeWriteChar(0+48);
    365e:	80 e3       	ldi	r24, 0x30	; 48
    3660:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <HAL_VidHCLCD_4BitModeWriteChar>
    3664:	4f c0       	rjmp	.+158    	; 0x3704 <HAL_VidHCLCD_4BitModeWriteNumber+0xd8>
	}
	else
	{
		while(Copy_uint32Number!=0)
		{
			Loc_uint8Digits[Loc_sint8Count]=Copy_uint32Number%10;
    3666:	89 81       	ldd	r24, Y+1	; 0x01
    3668:	08 2f       	mov	r16, r24
    366a:	11 27       	eor	r17, r17
    366c:	07 fd       	sbrc	r16, 7
    366e:	10 95       	com	r17
    3670:	8a 89       	ldd	r24, Y+18	; 0x12
    3672:	9b 89       	ldd	r25, Y+19	; 0x13
    3674:	ac 89       	ldd	r26, Y+20	; 0x14
    3676:	bd 89       	ldd	r27, Y+21	; 0x15
    3678:	2a e0       	ldi	r18, 0x0A	; 10
    367a:	30 e0       	ldi	r19, 0x00	; 0
    367c:	40 e0       	ldi	r20, 0x00	; 0
    367e:	50 e0       	ldi	r21, 0x00	; 0
    3680:	bc 01       	movw	r22, r24
    3682:	cd 01       	movw	r24, r26
    3684:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <__udivmodsi4>
    3688:	dc 01       	movw	r26, r24
    368a:	cb 01       	movw	r24, r22
    368c:	28 2f       	mov	r18, r24
    368e:	ce 01       	movw	r24, r28
    3690:	02 96       	adiw	r24, 0x02	; 2
    3692:	fc 01       	movw	r30, r24
    3694:	e0 0f       	add	r30, r16
    3696:	f1 1f       	adc	r31, r17
    3698:	20 83       	st	Z, r18
			Copy_uint32Number/=10;
    369a:	8a 89       	ldd	r24, Y+18	; 0x12
    369c:	9b 89       	ldd	r25, Y+19	; 0x13
    369e:	ac 89       	ldd	r26, Y+20	; 0x14
    36a0:	bd 89       	ldd	r27, Y+21	; 0x15
    36a2:	2a e0       	ldi	r18, 0x0A	; 10
    36a4:	30 e0       	ldi	r19, 0x00	; 0
    36a6:	40 e0       	ldi	r20, 0x00	; 0
    36a8:	50 e0       	ldi	r21, 0x00	; 0
    36aa:	bc 01       	movw	r22, r24
    36ac:	cd 01       	movw	r24, r26
    36ae:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <__udivmodsi4>
    36b2:	da 01       	movw	r26, r20
    36b4:	c9 01       	movw	r24, r18
    36b6:	8a 8b       	std	Y+18, r24	; 0x12
    36b8:	9b 8b       	std	Y+19, r25	; 0x13
    36ba:	ac 8b       	std	Y+20, r26	; 0x14
    36bc:	bd 8b       	std	Y+21, r27	; 0x15
			Loc_sint8Count++;
    36be:	89 81       	ldd	r24, Y+1	; 0x01
    36c0:	8f 5f       	subi	r24, 0xFF	; 255
    36c2:	89 83       	std	Y+1, r24	; 0x01
	{
		HAL_VidHCLCD_4BitModeWriteChar(0+48);
	}
	else
	{
		while(Copy_uint32Number!=0)
    36c4:	8a 89       	ldd	r24, Y+18	; 0x12
    36c6:	9b 89       	ldd	r25, Y+19	; 0x13
    36c8:	ac 89       	ldd	r26, Y+20	; 0x14
    36ca:	bd 89       	ldd	r27, Y+21	; 0x15
    36cc:	00 97       	sbiw	r24, 0x00	; 0
    36ce:	a1 05       	cpc	r26, r1
    36d0:	b1 05       	cpc	r27, r1
    36d2:	49 f6       	brne	.-110    	; 0x3666 <HAL_VidHCLCD_4BitModeWriteNumber+0x3a>
		{
			Loc_uint8Digits[Loc_sint8Count]=Copy_uint32Number%10;
			Copy_uint32Number/=10;
			Loc_sint8Count++;
		}
		Loc_sint8Count-=1;
    36d4:	89 81       	ldd	r24, Y+1	; 0x01
    36d6:	81 50       	subi	r24, 0x01	; 1
    36d8:	89 83       	std	Y+1, r24	; 0x01
    36da:	11 c0       	rjmp	.+34     	; 0x36fe <HAL_VidHCLCD_4BitModeWriteNumber+0xd2>
		while(Loc_sint8Count>=0)
		{
			HAL_VidHCLCD_4BitModeWriteChar(Loc_uint8Digits[Loc_sint8Count]+48);
    36dc:	89 81       	ldd	r24, Y+1	; 0x01
    36de:	28 2f       	mov	r18, r24
    36e0:	33 27       	eor	r19, r19
    36e2:	27 fd       	sbrc	r18, 7
    36e4:	30 95       	com	r19
    36e6:	ce 01       	movw	r24, r28
    36e8:	02 96       	adiw	r24, 0x02	; 2
    36ea:	fc 01       	movw	r30, r24
    36ec:	e2 0f       	add	r30, r18
    36ee:	f3 1f       	adc	r31, r19
    36f0:	80 81       	ld	r24, Z
    36f2:	80 5d       	subi	r24, 0xD0	; 208
    36f4:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <HAL_VidHCLCD_4BitModeWriteChar>
			Loc_sint8Count--;
    36f8:	89 81       	ldd	r24, Y+1	; 0x01
    36fa:	81 50       	subi	r24, 0x01	; 1
    36fc:	89 83       	std	Y+1, r24	; 0x01
			Loc_uint8Digits[Loc_sint8Count]=Copy_uint32Number%10;
			Copy_uint32Number/=10;
			Loc_sint8Count++;
		}
		Loc_sint8Count-=1;
		while(Loc_sint8Count>=0)
    36fe:	89 81       	ldd	r24, Y+1	; 0x01
    3700:	88 23       	and	r24, r24
    3702:	64 f7       	brge	.-40     	; 0x36dc <HAL_VidHCLCD_4BitModeWriteNumber+0xb0>
		{
			HAL_VidHCLCD_4BitModeWriteChar(Loc_uint8Digits[Loc_sint8Count]+48);
			Loc_sint8Count--;
		}
	}
}
    3704:	65 96       	adiw	r28, 0x15	; 21
    3706:	0f b6       	in	r0, 0x3f	; 63
    3708:	f8 94       	cli
    370a:	de bf       	out	0x3e, r29	; 62
    370c:	0f be       	out	0x3f, r0	; 63
    370e:	cd bf       	out	0x3d, r28	; 61
    3710:	cf 91       	pop	r28
    3712:	df 91       	pop	r29
    3714:	1f 91       	pop	r17
    3716:	0f 91       	pop	r16
    3718:	08 95       	ret

0000371a <HAL_VidHCLCD_4BitModeSetPosition>:
void HAL_VidHCLCD_4BitModeSetPosition(uint8 Copy_uint8LineNum,uint8 Copy_uint8Position)
{
    371a:	df 93       	push	r29
    371c:	cf 93       	push	r28
    371e:	00 d0       	rcall	.+0      	; 0x3720 <HAL_VidHCLCD_4BitModeSetPosition+0x6>
    3720:	cd b7       	in	r28, 0x3d	; 61
    3722:	de b7       	in	r29, 0x3e	; 62
    3724:	89 83       	std	Y+1, r24	; 0x01
    3726:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_uint8LineNum==1)
    3728:	89 81       	ldd	r24, Y+1	; 0x01
    372a:	81 30       	cpi	r24, 0x01	; 1
    372c:	29 f4       	brne	.+10     	; 0x3738 <HAL_VidHCLCD_4BitModeSetPosition+0x1e>
	{
		HAL_VidHCLCD_4BitModeSendCommand(128+Copy_uint8Position);
    372e:	8a 81       	ldd	r24, Y+2	; 0x02
    3730:	80 58       	subi	r24, 0x80	; 128
    3732:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <HAL_VidHCLCD_4BitModeSendCommand>
    3736:	07 c0       	rjmp	.+14     	; 0x3746 <HAL_VidHCLCD_4BitModeSetPosition+0x2c>
	}
	else if(Copy_uint8LineNum==2)
    3738:	89 81       	ldd	r24, Y+1	; 0x01
    373a:	82 30       	cpi	r24, 0x02	; 2
    373c:	21 f4       	brne	.+8      	; 0x3746 <HAL_VidHCLCD_4BitModeSetPosition+0x2c>
	{
		HAL_VidHCLCD_4BitModeSendCommand(192+Copy_uint8Position);
    373e:	8a 81       	ldd	r24, Y+2	; 0x02
    3740:	80 54       	subi	r24, 0x40	; 64
    3742:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <HAL_VidHCLCD_4BitModeSendCommand>
	}
	else
	{
		/*Do Nothing*/
	}
}
    3746:	0f 90       	pop	r0
    3748:	0f 90       	pop	r0
    374a:	cf 91       	pop	r28
    374c:	df 91       	pop	r29
    374e:	08 95       	ret

00003750 <HBUTTON_Errorstate_Button_Init>:
#include"../../LIB/LBIT_MATH.h"
#include"../../MCAL/MDIO/MDIO_Interface.h"
#include"HBUTTON_Interface.h"

ErrorState  HBUTTON_Errorstate_Button_Init(Button_t* copy_Button_object)
{
    3750:	df 93       	push	r29
    3752:	cf 93       	push	r28
    3754:	00 d0       	rcall	.+0      	; 0x3756 <HBUTTON_Errorstate_Button_Init+0x6>
    3756:	0f 92       	push	r0
    3758:	cd b7       	in	r28, 0x3d	; 61
    375a:	de b7       	in	r29, 0x3e	; 62
    375c:	9b 83       	std	Y+3, r25	; 0x03
    375e:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState Loc_ErrorState_Error_state=OK;
    3760:	81 e0       	ldi	r24, 0x01	; 1
    3762:	89 83       	std	Y+1, r24	; 0x01
		Loc_ErrorState_Error_state = MDIO_Errorstate_SetPinDirection(copy_Button_object->ButtonPort,copy_Button_object->ButtonPin,PIN_INPUT);
    3764:	ea 81       	ldd	r30, Y+2	; 0x02
    3766:	fb 81       	ldd	r31, Y+3	; 0x03
    3768:	80 81       	ld	r24, Z
    376a:	ea 81       	ldd	r30, Y+2	; 0x02
    376c:	fb 81       	ldd	r31, Y+3	; 0x03
    376e:	91 81       	ldd	r25, Z+1	; 0x01
    3770:	69 2f       	mov	r22, r25
    3772:	40 e0       	ldi	r20, 0x00	; 0
    3774:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <MDIO_Errorstate_SetPinDirection>
    3778:	89 83       	std	Y+1, r24	; 0x01
			return Loc_ErrorState_Error_state;
    377a:	89 81       	ldd	r24, Y+1	; 0x01
}
    377c:	0f 90       	pop	r0
    377e:	0f 90       	pop	r0
    3780:	0f 90       	pop	r0
    3782:	cf 91       	pop	r28
    3784:	df 91       	pop	r29
    3786:	08 95       	ret

00003788 <HBUTTON_Errorstate_Button_Pressed>:
ErrorState  HBUTTON_Errorstate_Button_Pressed(Button_t* copy_Button_object)
{
    3788:	df 93       	push	r29
    378a:	cf 93       	push	r28
    378c:	00 d0       	rcall	.+0      	; 0x378e <HBUTTON_Errorstate_Button_Pressed+0x6>
    378e:	00 d0       	rcall	.+0      	; 0x3790 <HBUTTON_Errorstate_Button_Pressed+0x8>
    3790:	cd b7       	in	r28, 0x3d	; 61
    3792:	de b7       	in	r29, 0x3e	; 62
    3794:	9c 83       	std	Y+4, r25	; 0x04
    3796:	8b 83       	std	Y+3, r24	; 0x03

	uint8 Loc_Button_State;
	ErrorState Loc_ErrorState_Error_state=OK;
    3798:	81 e0       	ldi	r24, 0x01	; 1
    379a:	89 83       	std	Y+1, r24	; 0x01
	if((copy_Button_object->ButtonActiveState)==PULL_DOWN)/*check 3la button activate state*/
    379c:	eb 81       	ldd	r30, Y+3	; 0x03
    379e:	fc 81       	ldd	r31, Y+4	; 0x04
    37a0:	82 81       	ldd	r24, Z+2	; 0x02
    37a2:	88 23       	and	r24, r24
    37a4:	71 f4       	brne	.+28     	; 0x37c2 <HBUTTON_Errorstate_Button_Pressed+0x3a>
	{
		/*pull down */
		MDIO_Errorstate_GetPinValue(copy_Button_object->ButtonPort,copy_Button_object->ButtonPin,&Loc_Button_State);
    37a6:	eb 81       	ldd	r30, Y+3	; 0x03
    37a8:	fc 81       	ldd	r31, Y+4	; 0x04
    37aa:	80 81       	ld	r24, Z
    37ac:	eb 81       	ldd	r30, Y+3	; 0x03
    37ae:	fc 81       	ldd	r31, Y+4	; 0x04
    37b0:	91 81       	ldd	r25, Z+1	; 0x01
    37b2:	9e 01       	movw	r18, r28
    37b4:	2e 5f       	subi	r18, 0xFE	; 254
    37b6:	3f 4f       	sbci	r19, 0xFF	; 255
    37b8:	69 2f       	mov	r22, r25
    37ba:	a9 01       	movw	r20, r18
    37bc:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <MDIO_Errorstate_GetPinValue>
    37c0:	14 c0       	rjmp	.+40     	; 0x37ea <HBUTTON_Errorstate_Button_Pressed+0x62>
	}
	else if((copy_Button_object->ButtonActiveState)==PULL_UP)
    37c2:	eb 81       	ldd	r30, Y+3	; 0x03
    37c4:	fc 81       	ldd	r31, Y+4	; 0x04
    37c6:	82 81       	ldd	r24, Z+2	; 0x02
    37c8:	81 30       	cpi	r24, 0x01	; 1
    37ca:	71 f4       	brne	.+28     	; 0x37e8 <HBUTTON_Errorstate_Button_Pressed+0x60>
	{
		/*internal pull up activate*/
		MDIO_Errorstate_GetPinValue(copy_Button_object->ButtonPort,copy_Button_object->ButtonPin,&Loc_Button_State);
    37cc:	eb 81       	ldd	r30, Y+3	; 0x03
    37ce:	fc 81       	ldd	r31, Y+4	; 0x04
    37d0:	80 81       	ld	r24, Z
    37d2:	eb 81       	ldd	r30, Y+3	; 0x03
    37d4:	fc 81       	ldd	r31, Y+4	; 0x04
    37d6:	91 81       	ldd	r25, Z+1	; 0x01
    37d8:	9e 01       	movw	r18, r28
    37da:	2e 5f       	subi	r18, 0xFE	; 254
    37dc:	3f 4f       	sbci	r19, 0xFF	; 255
    37de:	69 2f       	mov	r22, r25
    37e0:	a9 01       	movw	r20, r18
    37e2:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <MDIO_Errorstate_GetPinValue>
    37e6:	01 c0       	rjmp	.+2      	; 0x37ea <HBUTTON_Errorstate_Button_Pressed+0x62>
	}
	else
	{
		Loc_ErrorState_Error_state=NOK;
    37e8:	19 82       	std	Y+1, r1	; 0x01
	}

return Loc_ErrorState_Error_state;
    37ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    37ec:	0f 90       	pop	r0
    37ee:	0f 90       	pop	r0
    37f0:	0f 90       	pop	r0
    37f2:	0f 90       	pop	r0
    37f4:	cf 91       	pop	r28
    37f6:	df 91       	pop	r29
    37f8:	08 95       	ret

000037fa <main>:
#include"HAL/HCLCD/HCLCD_Interface.h"

#define F_CPU 16000000UL
#include <util/delay.h>
int main(void)
{
    37fa:	df 93       	push	r29
    37fc:	cf 93       	push	r28
    37fe:	cd b7       	in	r28, 0x3d	; 61
    3800:	de b7       	in	r29, 0x3e	; 62
    3802:	64 97       	sbiw	r28, 0x14	; 20
    3804:	0f b6       	in	r0, 0x3f	; 63
    3806:	f8 94       	cli
    3808:	de bf       	out	0x3e, r29	; 62
    380a:	0f be       	out	0x3f, r0	; 63
    380c:	cd bf       	out	0x3d, r28	; 61
	/*LCD PIN init*/
	MDIO_Errorstate_SetPinDirection(MDIO_PORTA,PIN4,PIN_OUTPUT);
    380e:	80 e0       	ldi	r24, 0x00	; 0
    3810:	64 e0       	ldi	r22, 0x04	; 4
    3812:	41 e0       	ldi	r20, 0x01	; 1
    3814:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(MDIO_PORTA,PIN5,PIN_OUTPUT);
    3818:	80 e0       	ldi	r24, 0x00	; 0
    381a:	65 e0       	ldi	r22, 0x05	; 5
    381c:	41 e0       	ldi	r20, 0x01	; 1
    381e:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(MDIO_PORTA,PIN6,PIN_OUTPUT);
    3822:	80 e0       	ldi	r24, 0x00	; 0
    3824:	66 e0       	ldi	r22, 0x06	; 6
    3826:	41 e0       	ldi	r20, 0x01	; 1
    3828:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(MDIO_PORTA,PIN7,PIN_OUTPUT);
    382c:	80 e0       	ldi	r24, 0x00	; 0
    382e:	67 e0       	ldi	r22, 0x07	; 7
    3830:	41 e0       	ldi	r20, 0x01	; 1
    3832:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HCLCD_ControlPort,RS_PIN,PIN_OUTPUT);
    3836:	81 e0       	ldi	r24, 0x01	; 1
    3838:	61 e0       	ldi	r22, 0x01	; 1
    383a:	41 e0       	ldi	r20, 0x01	; 1
    383c:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HCLCD_ControlPort,RW_PIN,PIN_OUTPUT);
    3840:	81 e0       	ldi	r24, 0x01	; 1
    3842:	62 e0       	ldi	r22, 0x02	; 2
    3844:	41 e0       	ldi	r20, 0x01	; 1
    3846:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HCLCD_ControlPort,E_PIN,PIN_OUTPUT);
    384a:	81 e0       	ldi	r24, 0x01	; 1
    384c:	63 e0       	ldi	r22, 0x03	; 3
    384e:	41 e0       	ldi	r20, 0x01	; 1
    3850:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <MDIO_Errorstate_SetPinDirection>
	/*LCD int*/
	HAL_VidHCLCD_4BitModeInit();
    3854:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <HAL_VidHCLCD_4BitModeInit>
	HAL_VidHCLCD_4BitModeWriteString((uint8*)"welcome..");
    3858:	80 e6       	ldi	r24, 0x60	; 96
    385a:	90 e0       	ldi	r25, 0x00	; 0
    385c:	0e 94 ed 1a 	call	0x35da	; 0x35da <HAL_VidHCLCD_4BitModeWriteString>
    3860:	80 e0       	ldi	r24, 0x00	; 0
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	aa e7       	ldi	r26, 0x7A	; 122
    3866:	b4 e4       	ldi	r27, 0x44	; 68
    3868:	8b 87       	std	Y+11, r24	; 0x0b
    386a:	9c 87       	std	Y+12, r25	; 0x0c
    386c:	ad 87       	std	Y+13, r26	; 0x0d
    386e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3870:	6b 85       	ldd	r22, Y+11	; 0x0b
    3872:	7c 85       	ldd	r23, Y+12	; 0x0c
    3874:	8d 85       	ldd	r24, Y+13	; 0x0d
    3876:	9e 85       	ldd	r25, Y+14	; 0x0e
    3878:	20 e0       	ldi	r18, 0x00	; 0
    387a:	30 e0       	ldi	r19, 0x00	; 0
    387c:	4a e7       	ldi	r20, 0x7A	; 122
    387e:	55 e4       	ldi	r21, 0x45	; 69
    3880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3884:	dc 01       	movw	r26, r24
    3886:	cb 01       	movw	r24, r22
    3888:	8f 83       	std	Y+7, r24	; 0x07
    388a:	98 87       	std	Y+8, r25	; 0x08
    388c:	a9 87       	std	Y+9, r26	; 0x09
    388e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3890:	6f 81       	ldd	r22, Y+7	; 0x07
    3892:	78 85       	ldd	r23, Y+8	; 0x08
    3894:	89 85       	ldd	r24, Y+9	; 0x09
    3896:	9a 85       	ldd	r25, Y+10	; 0x0a
    3898:	20 e0       	ldi	r18, 0x00	; 0
    389a:	30 e0       	ldi	r19, 0x00	; 0
    389c:	40 e8       	ldi	r20, 0x80	; 128
    389e:	5f e3       	ldi	r21, 0x3F	; 63
    38a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38a4:	88 23       	and	r24, r24
    38a6:	2c f4       	brge	.+10     	; 0x38b2 <main+0xb8>
		__ticks = 1;
    38a8:	81 e0       	ldi	r24, 0x01	; 1
    38aa:	90 e0       	ldi	r25, 0x00	; 0
    38ac:	9e 83       	std	Y+6, r25	; 0x06
    38ae:	8d 83       	std	Y+5, r24	; 0x05
    38b0:	3f c0       	rjmp	.+126    	; 0x3930 <main+0x136>
	else if (__tmp > 65535)
    38b2:	6f 81       	ldd	r22, Y+7	; 0x07
    38b4:	78 85       	ldd	r23, Y+8	; 0x08
    38b6:	89 85       	ldd	r24, Y+9	; 0x09
    38b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    38ba:	20 e0       	ldi	r18, 0x00	; 0
    38bc:	3f ef       	ldi	r19, 0xFF	; 255
    38be:	4f e7       	ldi	r20, 0x7F	; 127
    38c0:	57 e4       	ldi	r21, 0x47	; 71
    38c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38c6:	18 16       	cp	r1, r24
    38c8:	4c f5       	brge	.+82     	; 0x391c <main+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    38cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    38ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    38d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    38d2:	20 e0       	ldi	r18, 0x00	; 0
    38d4:	30 e0       	ldi	r19, 0x00	; 0
    38d6:	40 e2       	ldi	r20, 0x20	; 32
    38d8:	51 e4       	ldi	r21, 0x41	; 65
    38da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38de:	dc 01       	movw	r26, r24
    38e0:	cb 01       	movw	r24, r22
    38e2:	bc 01       	movw	r22, r24
    38e4:	cd 01       	movw	r24, r26
    38e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ea:	dc 01       	movw	r26, r24
    38ec:	cb 01       	movw	r24, r22
    38ee:	9e 83       	std	Y+6, r25	; 0x06
    38f0:	8d 83       	std	Y+5, r24	; 0x05
    38f2:	0f c0       	rjmp	.+30     	; 0x3912 <main+0x118>
    38f4:	80 e9       	ldi	r24, 0x90	; 144
    38f6:	91 e0       	ldi	r25, 0x01	; 1
    38f8:	9c 83       	std	Y+4, r25	; 0x04
    38fa:	8b 83       	std	Y+3, r24	; 0x03
    38fc:	8b 81       	ldd	r24, Y+3	; 0x03
    38fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3900:	01 97       	sbiw	r24, 0x01	; 1
    3902:	f1 f7       	brne	.-4      	; 0x3900 <main+0x106>
    3904:	9c 83       	std	Y+4, r25	; 0x04
    3906:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3908:	8d 81       	ldd	r24, Y+5	; 0x05
    390a:	9e 81       	ldd	r25, Y+6	; 0x06
    390c:	01 97       	sbiw	r24, 0x01	; 1
    390e:	9e 83       	std	Y+6, r25	; 0x06
    3910:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3912:	8d 81       	ldd	r24, Y+5	; 0x05
    3914:	9e 81       	ldd	r25, Y+6	; 0x06
    3916:	00 97       	sbiw	r24, 0x00	; 0
    3918:	69 f7       	brne	.-38     	; 0x38f4 <main+0xfa>
    391a:	14 c0       	rjmp	.+40     	; 0x3944 <main+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    391c:	6f 81       	ldd	r22, Y+7	; 0x07
    391e:	78 85       	ldd	r23, Y+8	; 0x08
    3920:	89 85       	ldd	r24, Y+9	; 0x09
    3922:	9a 85       	ldd	r25, Y+10	; 0x0a
    3924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3928:	dc 01       	movw	r26, r24
    392a:	cb 01       	movw	r24, r22
    392c:	9e 83       	std	Y+6, r25	; 0x06
    392e:	8d 83       	std	Y+5, r24	; 0x05
    3930:	8d 81       	ldd	r24, Y+5	; 0x05
    3932:	9e 81       	ldd	r25, Y+6	; 0x06
    3934:	9a 83       	std	Y+2, r25	; 0x02
    3936:	89 83       	std	Y+1, r24	; 0x01
    3938:	89 81       	ldd	r24, Y+1	; 0x01
    393a:	9a 81       	ldd	r25, Y+2	; 0x02
    393c:	01 97       	sbiw	r24, 0x01	; 1
    393e:	f1 f7       	brne	.-4      	; 0x393c <main+0x142>
    3940:	9a 83       	std	Y+2, r25	; 0x02
    3942:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	HAL_VidHCLCD_4BitModeSendCommand(0x01);
    3944:	81 e0       	ldi	r24, 0x01	; 1
    3946:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <HAL_VidHCLCD_4BitModeSendCommand>
	HAL_VidHCLCD_4BitModeSetPosition(1,0);
    394a:	81 e0       	ldi	r24, 0x01	; 1
    394c:	60 e0       	ldi	r22, 0x00	; 0
    394e:	0e 94 8d 1b 	call	0x371a	; 0x371a <HAL_VidHCLCD_4BitModeSetPosition>
	HAL_VidHCLCD_4BitModeWriteString((uint8*)"ADC READING");
    3952:	8a e6       	ldi	r24, 0x6A	; 106
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	0e 94 ed 1a 	call	0x35da	; 0x35da <HAL_VidHCLCD_4BitModeWriteString>
    MDIO_Errorstate_SetPinDirection(MDIO_PORTA,PIN1,PIN_INPUT);
    395a:	80 e0       	ldi	r24, 0x00	; 0
    395c:	61 e0       	ldi	r22, 0x01	; 1
    395e:	40 e0       	ldi	r20, 0x00	; 0
    3960:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <MDIO_Errorstate_SetPinDirection>
	/*ADC*/

	MADC_VidSingleConversion_Init();
    3964:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <MADC_VidSingleConversion_Init>
	uint16 Loc_uint16Digital;
	uint16 Loc_uint16AnalogPrev=0;
    3968:	1a 8a       	std	Y+18, r1	; 0x12
    396a:	19 8a       	std	Y+17, r1	; 0x11
	uint16 Loc_uint16Analog;
	HAL_VidHCLCD_4BitModeSetPosition(2,0);
    396c:	82 e0       	ldi	r24, 0x02	; 2
    396e:	60 e0       	ldi	r22, 0x00	; 0
    3970:	0e 94 8d 1b 	call	0x371a	; 0x371a <HAL_VidHCLCD_4BitModeSetPosition>
	HAL_VidHCLCD_4BitModeWriteString((uint8*)"Volt=");
    3974:	86 e7       	ldi	r24, 0x76	; 118
    3976:	90 e0       	ldi	r25, 0x00	; 0
    3978:	0e 94 ed 1a 	call	0x35da	; 0x35da <HAL_VidHCLCD_4BitModeWriteString>
	HAL_VidHCLCD_4BitModeSetPosition(2,9);
    397c:	82 e0       	ldi	r24, 0x02	; 2
    397e:	69 e0       	ldi	r22, 0x09	; 9
    3980:	0e 94 8d 1b 	call	0x371a	; 0x371a <HAL_VidHCLCD_4BitModeSetPosition>
	HAL_VidHCLCD_4BitModeWriteString((uint8*)"MV");
    3984:	8c e7       	ldi	r24, 0x7C	; 124
    3986:	90 e0       	ldi	r25, 0x00	; 0
    3988:	0e 94 ed 1a 	call	0x35da	; 0x35da <HAL_VidHCLCD_4BitModeWriteString>


	while(1)
	{
		MADC_VidADCStartSingleConversion(1);
    398c:	81 e0       	ldi	r24, 0x01	; 1
    398e:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <MADC_VidADCStartSingleConversion>
		Loc_uint16Digital=MADC_uint16Read();
    3992:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <MADC_uint16Read>
    3996:	9c 8b       	std	Y+20, r25	; 0x14
    3998:	8b 8b       	std	Y+19, r24	; 0x13
		Loc_uint16Analog=(Loc_uint16Digital*5000UL)/1024; // 5000 for mill volt  and UL means unsigned long 3ashn yakahdo 3la marten da so2al interview
    399a:	8b 89       	ldd	r24, Y+19	; 0x13
    399c:	9c 89       	ldd	r25, Y+20	; 0x14
    399e:	cc 01       	movw	r24, r24
    39a0:	a0 e0       	ldi	r26, 0x00	; 0
    39a2:	b0 e0       	ldi	r27, 0x00	; 0
    39a4:	28 e8       	ldi	r18, 0x88	; 136
    39a6:	33 e1       	ldi	r19, 0x13	; 19
    39a8:	40 e0       	ldi	r20, 0x00	; 0
    39aa:	50 e0       	ldi	r21, 0x00	; 0
    39ac:	bc 01       	movw	r22, r24
    39ae:	cd 01       	movw	r24, r26
    39b0:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <__mulsi3>
    39b4:	dc 01       	movw	r26, r24
    39b6:	cb 01       	movw	r24, r22
    39b8:	07 2e       	mov	r0, r23
    39ba:	7a e0       	ldi	r23, 0x0A	; 10
    39bc:	b6 95       	lsr	r27
    39be:	a7 95       	ror	r26
    39c0:	97 95       	ror	r25
    39c2:	87 95       	ror	r24
    39c4:	7a 95       	dec	r23
    39c6:	d1 f7       	brne	.-12     	; 0x39bc <main+0x1c2>
    39c8:	70 2d       	mov	r23, r0
    39ca:	98 8b       	std	Y+16, r25	; 0x10
    39cc:	8f 87       	std	Y+15, r24	; 0x0f
		if(Loc_uint16Analog!=Loc_uint16AnalogPrev)
    39ce:	2f 85       	ldd	r18, Y+15	; 0x0f
    39d0:	38 89       	ldd	r19, Y+16	; 0x10
    39d2:	89 89       	ldd	r24, Y+17	; 0x11
    39d4:	9a 89       	ldd	r25, Y+18	; 0x12
    39d6:	28 17       	cp	r18, r24
    39d8:	39 07       	cpc	r19, r25
    39da:	c1 f2       	breq	.-80     	; 0x398c <main+0x192>
		{
		HAL_VidHCLCD_4BitModeSetPosition(2,5);
    39dc:	82 e0       	ldi	r24, 0x02	; 2
    39de:	65 e0       	ldi	r22, 0x05	; 5
    39e0:	0e 94 8d 1b 	call	0x371a	; 0x371a <HAL_VidHCLCD_4BitModeSetPosition>
		HAL_VidHCLCD_4BitModeWriteNumber(Loc_uint16Analog);
    39e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    39e6:	98 89       	ldd	r25, Y+16	; 0x10
    39e8:	cc 01       	movw	r24, r24
    39ea:	a0 e0       	ldi	r26, 0x00	; 0
    39ec:	b0 e0       	ldi	r27, 0x00	; 0
    39ee:	bc 01       	movw	r22, r24
    39f0:	cd 01       	movw	r24, r26
    39f2:	0e 94 16 1b 	call	0x362c	; 0x362c <HAL_VidHCLCD_4BitModeWriteNumber>
		Loc_uint16AnalogPrev=Loc_uint16Analog;
    39f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    39f8:	98 89       	ldd	r25, Y+16	; 0x10
    39fa:	9a 8b       	std	Y+18, r25	; 0x12
    39fc:	89 8b       	std	Y+17, r24	; 0x11
		HAL_VidHCLCD_4BitModeSetPosition(2,11);
    39fe:	82 e0       	ldi	r24, 0x02	; 2
    3a00:	6b e0       	ldi	r22, 0x0B	; 11
    3a02:	0e 94 8d 1b 	call	0x371a	; 0x371a <HAL_VidHCLCD_4BitModeSetPosition>
    3a06:	c2 cf       	rjmp	.-124    	; 0x398c <main+0x192>

00003a08 <__mulsi3>:
    3a08:	62 9f       	mul	r22, r18
    3a0a:	d0 01       	movw	r26, r0
    3a0c:	73 9f       	mul	r23, r19
    3a0e:	f0 01       	movw	r30, r0
    3a10:	82 9f       	mul	r24, r18
    3a12:	e0 0d       	add	r30, r0
    3a14:	f1 1d       	adc	r31, r1
    3a16:	64 9f       	mul	r22, r20
    3a18:	e0 0d       	add	r30, r0
    3a1a:	f1 1d       	adc	r31, r1
    3a1c:	92 9f       	mul	r25, r18
    3a1e:	f0 0d       	add	r31, r0
    3a20:	83 9f       	mul	r24, r19
    3a22:	f0 0d       	add	r31, r0
    3a24:	74 9f       	mul	r23, r20
    3a26:	f0 0d       	add	r31, r0
    3a28:	65 9f       	mul	r22, r21
    3a2a:	f0 0d       	add	r31, r0
    3a2c:	99 27       	eor	r25, r25
    3a2e:	72 9f       	mul	r23, r18
    3a30:	b0 0d       	add	r27, r0
    3a32:	e1 1d       	adc	r30, r1
    3a34:	f9 1f       	adc	r31, r25
    3a36:	63 9f       	mul	r22, r19
    3a38:	b0 0d       	add	r27, r0
    3a3a:	e1 1d       	adc	r30, r1
    3a3c:	f9 1f       	adc	r31, r25
    3a3e:	bd 01       	movw	r22, r26
    3a40:	cf 01       	movw	r24, r30
    3a42:	11 24       	eor	r1, r1
    3a44:	08 95       	ret

00003a46 <__udivmodsi4>:
    3a46:	a1 e2       	ldi	r26, 0x21	; 33
    3a48:	1a 2e       	mov	r1, r26
    3a4a:	aa 1b       	sub	r26, r26
    3a4c:	bb 1b       	sub	r27, r27
    3a4e:	fd 01       	movw	r30, r26
    3a50:	0d c0       	rjmp	.+26     	; 0x3a6c <__udivmodsi4_ep>

00003a52 <__udivmodsi4_loop>:
    3a52:	aa 1f       	adc	r26, r26
    3a54:	bb 1f       	adc	r27, r27
    3a56:	ee 1f       	adc	r30, r30
    3a58:	ff 1f       	adc	r31, r31
    3a5a:	a2 17       	cp	r26, r18
    3a5c:	b3 07       	cpc	r27, r19
    3a5e:	e4 07       	cpc	r30, r20
    3a60:	f5 07       	cpc	r31, r21
    3a62:	20 f0       	brcs	.+8      	; 0x3a6c <__udivmodsi4_ep>
    3a64:	a2 1b       	sub	r26, r18
    3a66:	b3 0b       	sbc	r27, r19
    3a68:	e4 0b       	sbc	r30, r20
    3a6a:	f5 0b       	sbc	r31, r21

00003a6c <__udivmodsi4_ep>:
    3a6c:	66 1f       	adc	r22, r22
    3a6e:	77 1f       	adc	r23, r23
    3a70:	88 1f       	adc	r24, r24
    3a72:	99 1f       	adc	r25, r25
    3a74:	1a 94       	dec	r1
    3a76:	69 f7       	brne	.-38     	; 0x3a52 <__udivmodsi4_loop>
    3a78:	60 95       	com	r22
    3a7a:	70 95       	com	r23
    3a7c:	80 95       	com	r24
    3a7e:	90 95       	com	r25
    3a80:	9b 01       	movw	r18, r22
    3a82:	ac 01       	movw	r20, r24
    3a84:	bd 01       	movw	r22, r26
    3a86:	cf 01       	movw	r24, r30
    3a88:	08 95       	ret

00003a8a <__prologue_saves__>:
    3a8a:	2f 92       	push	r2
    3a8c:	3f 92       	push	r3
    3a8e:	4f 92       	push	r4
    3a90:	5f 92       	push	r5
    3a92:	6f 92       	push	r6
    3a94:	7f 92       	push	r7
    3a96:	8f 92       	push	r8
    3a98:	9f 92       	push	r9
    3a9a:	af 92       	push	r10
    3a9c:	bf 92       	push	r11
    3a9e:	cf 92       	push	r12
    3aa0:	df 92       	push	r13
    3aa2:	ef 92       	push	r14
    3aa4:	ff 92       	push	r15
    3aa6:	0f 93       	push	r16
    3aa8:	1f 93       	push	r17
    3aaa:	cf 93       	push	r28
    3aac:	df 93       	push	r29
    3aae:	cd b7       	in	r28, 0x3d	; 61
    3ab0:	de b7       	in	r29, 0x3e	; 62
    3ab2:	ca 1b       	sub	r28, r26
    3ab4:	db 0b       	sbc	r29, r27
    3ab6:	0f b6       	in	r0, 0x3f	; 63
    3ab8:	f8 94       	cli
    3aba:	de bf       	out	0x3e, r29	; 62
    3abc:	0f be       	out	0x3f, r0	; 63
    3abe:	cd bf       	out	0x3d, r28	; 61
    3ac0:	09 94       	ijmp

00003ac2 <__epilogue_restores__>:
    3ac2:	2a 88       	ldd	r2, Y+18	; 0x12
    3ac4:	39 88       	ldd	r3, Y+17	; 0x11
    3ac6:	48 88       	ldd	r4, Y+16	; 0x10
    3ac8:	5f 84       	ldd	r5, Y+15	; 0x0f
    3aca:	6e 84       	ldd	r6, Y+14	; 0x0e
    3acc:	7d 84       	ldd	r7, Y+13	; 0x0d
    3ace:	8c 84       	ldd	r8, Y+12	; 0x0c
    3ad0:	9b 84       	ldd	r9, Y+11	; 0x0b
    3ad2:	aa 84       	ldd	r10, Y+10	; 0x0a
    3ad4:	b9 84       	ldd	r11, Y+9	; 0x09
    3ad6:	c8 84       	ldd	r12, Y+8	; 0x08
    3ad8:	df 80       	ldd	r13, Y+7	; 0x07
    3ada:	ee 80       	ldd	r14, Y+6	; 0x06
    3adc:	fd 80       	ldd	r15, Y+5	; 0x05
    3ade:	0c 81       	ldd	r16, Y+4	; 0x04
    3ae0:	1b 81       	ldd	r17, Y+3	; 0x03
    3ae2:	aa 81       	ldd	r26, Y+2	; 0x02
    3ae4:	b9 81       	ldd	r27, Y+1	; 0x01
    3ae6:	ce 0f       	add	r28, r30
    3ae8:	d1 1d       	adc	r29, r1
    3aea:	0f b6       	in	r0, 0x3f	; 63
    3aec:	f8 94       	cli
    3aee:	de bf       	out	0x3e, r29	; 62
    3af0:	0f be       	out	0x3f, r0	; 63
    3af2:	cd bf       	out	0x3d, r28	; 61
    3af4:	ed 01       	movw	r28, r26
    3af6:	08 95       	ret

00003af8 <_exit>:
    3af8:	f8 94       	cli

00003afa <__stop_program>:
    3afa:	ff cf       	rjmp	.-2      	; 0x3afa <__stop_program>
